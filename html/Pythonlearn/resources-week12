<div id="content">
<a id="top"></a>
<h1 class="firstHeading" id="firstHeading">Pythonlearn:resources-week12</h1>
<div id="bodyContent">
<h3 id="siteSub">From Coursera</h3>
<div id="contentSub"></div>
<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div> <!-- start content -->
<div class="mw-content-ltr" dir="ltr" lang="en"><p><a href="/wiki/index.php/Pythonlearn:Resources" title="Pythonlearn:Resources"> Back to Resources</a></p>
<table class="toc" id="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Lecture_Notes"><span class="tocnumber">1</span> <span class="toctext">Lecture Notes</span></a>
<ul>
<li class="toclevel-2"><a href="#Request-Response_Cycle"><span class="tocnumber">1.1</span> <span class="toctext">Request-Response Cycle</span></a></li>
<li class="toclevel-2"><a href="#Python_Socket_Library"><span class="tocnumber">1.2</span> <span class="toctext">Python Socket Library</span></a></li>
<li class="toclevel-2"><a href="#Urllib:_open_urls_as_if_it_were_a_file_.28and_read_the_content.29"><span class="tocnumber">1.3</span> <span class="toctext">Urllib: open urls as if it were a file (and read the content)</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Chapter_12_Exercises"><span class="tocnumber">2</span> <span class="toctext">Chapter 12 Exercises</span></a></li>
<li class="toclevel-1"><a href="#tags_.3D_soup.28.27a.27.29_and_tag.get.28.27href.27.2C_None.29_-_can_use_but_don.27t_understand"><span class="tocnumber">3</span> <span class="toctext">tags = soup('a') and tag.get('href', None) - can use but don't understand</span></a></li>
<li class="toclevel-1"><a href="#More_Resource_Topics"><span class="tocnumber">4</span> <span class="toctext">More Resource Topics</span></a></li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Lecture_Notes">Lecture Notes</span></h1>
<p>In this chapter, we’re talking about taking our Python applications and changing the source of their data. Up until now, we’ve been reading files. But a lot of the time you need to look at data that’s coming in from the Internet. So now we're looking at programs that talk to the Internet. </p>
<h2> <span class="mw-headline" id="Request-Response_Cycle">Request-Response Cycle</span></h2>
<p>Your browser sends commands across the Internet to servers, which run server languages like PHP, MySql, etc., and send stuff back. We’re writing Python programs that use the same protocol as your web browser so we can read information across the Internet. </p>
<p>Transport Control Protocol (TCP) is built on top of IP (Internet Protocol). It assumes IP might lose some data, so it stores and transmits data if it seems to be lost. It handles “flow control.” 
Peer-to-peer transport layer: computer applications effectively make telephone calls from one application to another. We don’t worry too much about the details of the connection, just like when you make a phone call, you don’t care so much about how it works, just that you and the other person can hear each other. </p>
<p>Socket: “In computer networking, an Internet socket or network socket is an endpoint of a bidirectional inter-process communication flow across an Internet Protocol-based computer network, such as the Internet.” A socket is a concept, in which two computer applications talk across a network. Like a file handle connects us to a disc drive, a socket is a way to connect to another process and get data back. File handles and sockets are like portholes that allow us to send and receive information to and from the outside world.<br/>
Lots of different applications can run on the same server, so these applications have what we call a TCP Port Number, which is like an extension on a phone number. (The IP address is like the main phone number.) It allows you to talk specifically to the web server on a host, or the email server on a host, etc. </p>
<p>A client initiates a connection, the server responds to it.</p>
<p>Port 80 is the one we use the most, the port for a web server (HTTP). The port number is determined by the protocol.  </p>
<h2> <span class="mw-headline" id="Python_Socket_Library">Python Socket Library</span></h2>
<p>There’s a really nice library in Python called the socket library that saves us from having to understand how the connection works. </p>
<code><pre>import socket
mysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
mysock.connect(('www.py4inf.com', 80))
mysock.send('GET http://www.py4inf.com/code/romeo.txt HTTP/1.0\n\n')
</pre></code>
<p>The second line above is like “open” when we’re dealing with file handles. It creates a porthole that allows us to communicate with the network. You’ll probably never change that line. (The weird “socket.socket” syntax is because socket is both the name of the library and the method within the library.) This line effectively opens the porthole to the outside world, but it doesn’t connect the socket to anything yet. That’s what the next line is for—it tells the socket where you want the other end to connect. (You can’t just connect to anything—there has to be running software waiting for your connection.)  </p>
<h2> <span class="mw-headline" id="Urllib:_open_urls_as_if_it_were_a_file_.28and_read_the_content.29">Urllib: open urls as if it were a file (and read the content)</span></h2>
<p>The urllib library makes it even easier to open and read the content of urls, you treat a webpage much like a file. We add the 'for line in filehandle' loop to print the contents of the url. </p>
<code><pre>import urllib
filehandle = urllib.urlopen('http://www.py4inf.com/code/romeo.txt')
for line in filehandle:
 print line.rstrip()
</pre></code>
<h1> <span class="mw-headline" id="Chapter_12_Exercises"><a href="/wiki/index.php/Pythonlearn:exercises-chapter12" title="Pythonlearn:exercises-chapter12"> Chapter 12 Exercises</a></span></h1>
<p>The above page is intended as a place for students to work out solutions and answers to the exercises from the textbook. Please do not post answers to exercises that are actually graded assignments.</p>
<h1> <span class="mw-headline" id="tags_.3D_soup.28.27a.27.29_and_tag.get.28.27href.27.2C_None.29_-_can_use_but_don.27t_understand">tags = soup('a') and tag.get('href', None) - can use but don't understand</span></h1>
<p><strong>Student's Question:</strong></p>
<p>Have been wondering about the expression</p>
<p><strong>tags = soup('a')</strong></p>
<p>I understand that the result of it is a list of all &lt;a&gt; tags in a format of [&lt;a...&gt;, &lt;a...&gt;, &lt;a...&gt;]</p>
<p>What I don't understand is the function of each element in "soup('a')" and their relationship:</p>
<p>Is it a 'soup' object containing a string 'a' (or any other string I put there; or is it only certain special words recognized by BS)?
Is it a particular part of a 'soup' object indicated by the 'a'?
Is it a method of 'soup' applied to 'a'?</p>
<p>When asking for type(soup), I'm getting &lt;class 'BeautifulSoup.BeautifulSoup'&gt; which doesn't help my understanding...</p>
<p>I feel silly but I did try searching for soup() and couldn't find any answers, which makes me think I'm thinking of it wrong :) What exactly am I saying - the long human language version, please! - when I'm saying tags=soup('a')?</p>
<p>I keep seeing expressions with findAll (or find_all for BS4), never a shortcut like tags=soup('a'):</p>
<code><pre>for a in soup.find_all('a', href=True): print "Found the URL:", a['href']
</pre></code>
<p>or</p>
<code><pre>href_tags = soup.find_all(href=True)
</pre></code>
<p>(2) 
    <strong>for tag in tags:
    print tag.get('href', None)</strong></p>
<p>(a) Saw an opinion that since we limit the search for href to the contents of the &lt;a&gt; tags, checking for None would be redundant since all &lt;a&gt; tags contain an href attribute, and the following was suggested:</p>
<code><pre>links = soup.find_all('a',attrs={'href': re.compile("^http://")})

for tag in links:
link = tag['href']
print link
</pre></code>
<p>(b) <strong>tag.get()</strong>
- what exactly am I doing and what are the options in the parentheses?</p>
<p>Any word of wisdom on it?.. I have successfully used the above expressions but I apparently don't dig either of them :(</p>
<p><strong>Mark Montgomery, Mentor:</strong></p>
<p>The 'a' is not specific to the soup object necessarily. Soup is extracting portions of the HTML file. In this case, the &lt;a&gt; is referring to an anchor tag. As you can see on that link I provided, there are many types of tags in HTML.</p>
<p>When you create the soup item, Beautifulsoup parses the HTML file and extracts the tag contents, etc for you to use in your code. Then when you say tags=soup('a'), you are assigning the list of &lt;a&gt; anchor data to a variable called 'tags'.</p>
<p><strong>Stephen Catto, Mentor:</strong></p>
<p>It's a lot easier to stick with what's in the course, and supported, and the supplied starter code.</p>
<p>Not using BS4, find_all() isn't used, using simple soup() and not a regex / compile. Just forget that stuff, that's all for later and understanding HMTL / regex beyond what the course uses.</p>
<p>For what's in the course, we are saying soup(find something) , let it do the regex, parsing in the background for us.</p>
<p>Some of what you ask is HTML , BS4, regex course which isn't what this course is.</p>
<p>In your 2a "checking for None would be redundant since all &lt;a&gt; tags contain an href attribute, and the following was suggested:"</p>
<p>It depends on the data, as not all anchor tags have an href, like</p>
<code><pre>&lt;a name="section1"&gt;
</pre></code>
<p>or href appears in a link tag that is not an &lt;a&gt;</p>
<p><strong>Student's Question:</strong></p>
<p>[...] So in tag.get('href', <strong>None</strong>), what does exactly None do? We are asking to look at a 'tag' (in 'tags' list), find (all?) the 'href' occurrences, and return it as a list. If there no matches (None) - will an empty list be created, or is it saying to create a list if there is a match, and do nothing if there's None?..</p>
<p><strong>Jamie Hall, Mentor:</strong></p>
<p>this</p>
<code><pre>tags = soup('a')
</pre></code>
<p>is just a shorter version of</p>
<code><pre>tags = soup.find_all('a')
</pre></code>
<p>the longer version is more helpful, as the method name tells you what you're doing ie you're finding all of the 'a' elements from your soup object</p>
<p>these operations</p>
<code><pre>for tag in tags:
    print tag.get('href', None)

for tag in links:
    link = tag['href']
</pre></code>
<p>work because BS provides a dictionary-like interface to the object that you're calling tag. If you recall how to work with dicts from the previous course, you should feel empowered here</p>
<p><strong>Stephen Catto, Mentor:</strong></p>
<p>None is the same as in earlier parts of the course, the default value in Part 2 it was 
    .get(data, 0) + 1.</p>
<p>You can see this with a little example,</p>
<code><pre>&gt;&gt;&gt; sample_dict = {"k1":1, "k2":2}

key is in dictionary, returns value

&gt;&gt;&gt; data = sample_dict.get("k1",0)

&gt;&gt;&gt; data

1

data not in dictionary, returns default 0

&gt;&gt;&gt; data = sample_dict.get("k3",0)

&gt;&gt;&gt; data

0

change default to None, same lookup

&gt;&gt;&gt; data = sample_dict.get("k3",None)

&gt;&gt;&gt; data

&gt;&gt;&gt; # this blank line no output because of None

&gt;&gt;&gt; data is None

True

&gt;&gt;&gt;
</pre></code>
<h1> <span class="mw-headline" id="More_Resource_Topics">More Resource Topics</span></h1>
<p>Add resources for this chapter to this page..</p>
<!-- 
NewPP limit report
Preprocessor node count: 93/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->
<!-- Saved in parser cache with key crowdwiki:pcache:idhash:5398-0!*!0!!en!*!* and timestamp 20161126102117 -->
</div><div class="printfooter">
Retrieved from "<a href="https://share.coursera.org/wiki/index.php?title=Pythonlearn:resources-week12&amp;oldid=34375">https://share.coursera.org/wiki/index.php?title=Pythonlearn:resources-week12&amp;oldid=34375</a>"</div>
<div class="catlinks catlinks-allhidden" id="catlinks"></div> <!-- end content -->
</div>
</div>