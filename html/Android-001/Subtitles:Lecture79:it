<div id="content">
				<a id="top"></a>
	        		        	<h1 id="firstHeading" class="firstHeading">Android-001:Subtitles:Lecture79:it</h1>
				<div id="bodyContent">
		            <h3 id="siteSub">From Coursera</h3>
		            <div id="contentSub"></div>
		            		            		            					<!-- start content -->
					<div lang="en" dir="ltr" class="mw-content-ltr"><p></p>
<h3> <span class="mw-headline" id="Sensors_-_Part_1_-_Italian_subtitles">Sensors - Part 1 - Italian subtitles</span></h3>
<ul>
<li><p><a href="/wiki/index.php/Android-001:Subtitles:Lecture73:it" title="Android-001:Subtitles:Lecture73:it">&lt;&lt; prev</a> | <a href="/wiki/index.php?title=Android-001:Subtitles:Lecture79:en&amp;action=edit&amp;redlink=1" class="new" title="Android-001:Subtitles:Lecture79:en (page does not exist)">en</a> <a href="/wiki/index.php/Android-001:Subtitles:Lecture79:es" title="Android-001:Subtitles:Lecture79:es">es</a> <strong class="selflink">it</strong> <a href="/wiki/index.php?title=Android-001:Subtitles:Lecture79:zh-tw&amp;action=edit&amp;redlink=1" class="new" title="Android-001:Subtitles:Lecture79:zh-tw (page does not exist)">zh-tw</a> <a href="/wiki/index.php?title=Android-001:Subtitles:Lecture79:pt&amp;action=edit&amp;redlink=1" class="new" title="Android-001:Subtitles:Lecture79:pt (page does not exist)">pt</a> | <a href="/wiki/index.php/Android-001:Subtitles:Lecture81:it" title="Android-001:Subtitles:Lecture81:it">next &gt;&gt;</a></p></li>
<li><p><a rel="nofollow" class="external text" href="https://www.dropbox.com/s/2ik530rwql9f0lg/7%20-%201%20-%20Sensors%20-%20Part%201%20%2811-06%29.srt">Direct download</a></p></li>
</ul>
<pre>
1
00:00:00,000 --&gt; 00:00:09,589
[ _ ]

2
00:00:09,589 --&gt; 00:00:12,953
Ciao, sono Adam Porter, e questo è

3
00:00:12,953 --&gt; 00:00:19,499
&quot;programming mobile applications for
Android handheld systems.&quot;

4
00:00:19,499 --&gt; 00:00:24,690
I dispositivi portatili permettono 
elaborazioni sensibili al contesto.

5
00:00:24,690 --&gt; 00:00:30,060
Questo significa che le applicazioni possono
rispondere o comportarsi in modo diverso

6
00:00:30,060 --&gt; 00:00:34,620
in base a fattori contestuali, 
come il luogo in cui sono utilizzati

7
00:00:34,620 --&gt; 00:00:38,350
come sono maneggiati 
dagli utenti,

8
00:00:39,360 --&gt; 00:00:41,630
quanta luce ambientale ci sia.

9
00:00:41,630 --&gt; 00:00:44,110
o quanto viaggi velocemente l'utente.

10
00:00:44,110 --&gt; 00:00:48,570
Per fare questo, le applicazioni leggono 
informazioni dalla vasta gamma

11
00:00:48,570 --&gt; 00:00:53,090
di sensori che vengono inseriti nei
dispositivi palmari di oggi.

12
00:00:54,410 --&gt; 00:00:56,470
In questa lezione, vorrei parlare dei

13
00:00:56,470 --&gt; 00:01:00,230
sensori che i dispositivi Android possono supportare

14
00:01:00,230 --&gt; 00:01:04,680
e discutere di come le applicazioni possono
accedere a questi sensori.

15
00:01:04,680 --&gt; 00:01:08,170
Poi, discuteremo di SensorEvents, la classe

16
00:01:08,170 --&gt; 00:01:12,300
che Android utilizza per rappresentare 
le letture dei sensori.

17
00:01:12,300 --&gt; 00:01:15,730
Poi parleremo di SensorEventListeners,
che vengono utilizzati

18
00:01:15,730 --&gt; 00:01:19,300
per trasferire informazioni 
da un sensore

19
00:01:19,300 --&gt; 00:01:20,350
alla vostra applicazione.

20
00:01:21,430 --&gt; 00:01:25,240
Dopo di che, vorrei discutere alcune tecniche
comuni che vengono utilizzate per

21
00:01:25,240 --&gt; 00:01:30,210
livellare o filtrare i valori dei sensori, 
in modo che le applicazioni

22
00:01:30,210 --&gt; 00:01:34,540
possano utilizzare i valori in una varietà di
modi diversi.

23
00:01:34,540 --&gt; 00:01:37,960
E, andando avanti nella lezione, 
mostreremo

24
00:01:37,960 --&gt; 00:01:42,160
diverse applicazioni di esempio che usano 
sensori comuni.

25
00:01:44,010 --&gt; 00:01:46,760
I sensori sono componenti hardware che
misurano

26
00:01:46,760 --&gt; 00:01:50,200
l'ambiente fisico intorno 
al dispositivo.

27
00:01:50,200 --&gt; 00:01:55,740
E questi sensori sono di tre tipi diversi.
Ci sono sensori che misurano il movimento.

28
00:01:55,740 --&gt; 00:01:57,620
Per esempio, quanto velocemente ti stai muovendo.

29
00:01:58,650 --&gt; 00:02:02,940
Vi sono sensori che misurano la posizione
del dispositivo.

30
00:02:02,940 --&gt; 00:02:08,020
Per esempio dove ti trovi nel mondo o
l'orientamento del dispositivo.

31
00:02:09,230 --&gt; 00:02:11,870
E ci sono sensori che misurano 
l'ambiente,

32
00:02:11,870 --&gt; 00:02:16,070
come la quantità di luce, 
pressione o umidità

33
00:02:16,070 --&gt; 00:02:21,370
intorno al dispositivo.
Per esempio, il mio dispositivo ha un 
accelerometro a tre assi

34
00:02:21,370 --&gt; 00:02:27,280
che misura le forze esercitate 
sul dispositivo.

35
00:02:27,280 --&gt; 00:02:29,840
Per esempio, quando lo scuoto.

36
00:02:29,840 --&gt; 00:02:32,770
Ha anche un sensore di campo magnetico a 3 assi.

37
00:02:32,770 --&gt; 00:02:35,500
Che può essere utilizzato per misurare 
sia la posizione

38
00:02:35,500 --&gt; 00:02:40,580
o l'orientamento rispetto al 
campo magnetico terrestre.

39
00:02:40,580 --&gt; 00:02:41,120
E lo vedremo 

40
00:02:41,120 --&gt; 00:02:44,260
in azione più tardi, in una delle 
applicazioni di esempio.

41
00:02:45,620 --&gt; 00:02:50,270
Infine, il mio dispositivo ha un barometro 
che misura la pressione atmosferica.

42
00:02:53,140 --&gt; 00:02:55,810
Affinché un'applicazione possa 
usare un sensore,

43
00:02:55,810 --&gt; 00:02:58,950
deve prima ottenere un riferimento al
SensorManager.

44
00:03:00,100 --&gt; 00:03:03,509
Il SensorManager è il servizio 
di sistema che gestisce i sensori.

45
00:03:04,510 --&gt; 00:03:10,000
L'applicazione ottiene un riferimento al SensorManager 
 chiamando il metodo getSystemService

46
00:03:10,000 --&gt; 00:03:17,280
passando il valore
Context.SENSOR_SERVICE.

47
00:03:17,280 --&gt; 00:03:18,290
Per accedere

48
00:03:18,290 --&gt; 00:03:24,210
ad uno specifico sensore, le applicazioni utilizzano 
il metodo getDefaultSensor del SensorManager

49
00:03:24,210 --&gt; 00:03:29,560
passando una costante corrispondente
al sensore desiderato.

50
00:03:32,200 --&gt; 00:03:36,955
Alcune di queste costanti per i tipo sensore
includono  

51
00:03:36,955 --&gt; 00:03:41,390
Sensor.TYPE_ACCELEROMETER
per l'accelerometro.

52
00:03:41,390 --&gt; 00:03:48,484
Sensor.TYPE_MAGNETIC_FIELD
per il sensore di campo magnetico.

53
00:03:48,484 --&gt; 00:03:53,345
O Sensor.TYPE_PRESSURE
per il barometro.

54
00:03:53,345 --&gt; 00:03:55,263
[ ]

55
00:03:55,263 --&gt; 00:03:58,863
Se un'applicazione vuole ricevere 
informazioni da un sensore

56
00:03:58,863 --&gt; 00:04:03,270
allora dovrà implementare
un SensorEventListener.

57
00:04:04,350 --&gt; 00:04:07,630
Questa interfaccia definisce 
i metodi di callback che

58
00:04:07,630 --&gt; 00:04:11,590
vengono invocati quando cambia 
la precisione di un sensore

59
00:04:11,590 --&gt; 00:04:14,150
e quando il sensore acquisisce 
una nuova lettura.

60
00:04:16,360 --&gt; 00:04:23,110
Quando la precisione di un sensore cambia, Android
chiama il metodo onAccuracyChanged

61
00:04:23,110 --&gt; 00:04:25,600
passandogli come parametri 
il sensore che è cambiato

62
00:04:27,360 --&gt; 00:04:29,470
e la nuova precisione.

63
00:04:31,200 --&gt; 00:04:36,220
Quando un sensore ha una nuova lettura, 
viene chiamato il metodo onSensorChanged

64
00:04:36,220 --&gt; 00:04:41,310
passandogli il SensorEvent
corrispondente alla nuova lettura.

65
00:04:43,480 --&gt; 00:04:46,760
Prima che l'applicazione possa ricevere
eventi dai sensori tuttavia,

66
00:04:46,760 --&gt; 00:04:51,260
sarà necessario registrare un
SensorEventListener.

67
00:04:51,260 --&gt; 00:04:55,580
E una volta che si è finito con il sensore,
si dovrà anche annullare la registrazione

68
00:04:55,580 --&gt; 00:05:00,450
del listener del sensore, in modo di evitare
di sprecare energia della batteria.

69
00:05:02,470 --&gt; 00:05:04,660
Per registrare un SensorEventListener per un

70
00:05:04,660 --&gt; 00:05:09,150
dato sensore si chiama il metodo 
registerListener.

71
00:05:09,150 --&gt; 00:05:15,220
Passando come parametro il SensorEventListener 
che verrà richiamato per il sensore

72
00:05:15,220 --&gt; 00:05:21,300
che si vuole ascoltare e la frequenza 
con cui si vuole leggere il sensore.

73
00:05:23,600 --&gt; 00:05:26,610
Per annullare la registrazione di un listener 
per tutti i sensori per cui

74
00:05:26,610 --&gt; 00:05:32,650
è stato registrato è possibile, ad esempio,
chiamare il metodo unregisterListener

75
00:05:32,650 --&gt; 00:05:37,000
passando il sensorEventListener, e
passando una maschera di bit

76
00:05:37,000 --&gt; 00:05:39,740
che indica i sensori che non si desidera
più ascoltare.

77
00:05:43,070 --&gt; 00:05:49,220
Letture dei sensori, sono presentate, per esempio
dalla classe sensorEvent.

78
00:05:49,220 --&gt; 00:05:53,040
I dati di questa classe, saranno naturalmente
dipendenti dallo specifico

79
00:05:53,040 --&gt; 00:05:55,550
tipo di sensore, che ha generato la lettura

80
00:05:55,550 --&gt; 00:05:59,740
ma includerà il tipo di sensore,

81
00:05:59,740 --&gt; 00:06:04,120
l'orario, la precisione della lettura, e

82
00:06:04,120 --&gt; 00:06:07,050
i dati della misura associati a tale
nuova lettura.

83
00:06:08,680 --&gt; 00:06:11,010
Al fine di dare un senso ai dati, 
avrete bisogno di

84
00:06:11,010 --&gt; 00:06:15,830
sapere come le misure devono essere
interpretate per ogni specifico sensore.

85
00:06:16,840 --&gt; 00:06:21,990
Per esempio, molti sensori utilizzano 
un sistema di coordinate tridimensionale.

86
00:06:21,990 --&gt; 00:06:26,875
Quando l'orientamento di default è verticale
e il dispositivo è posizionato orizzontalmente

87
00:06:26,875 --&gt; 00:06:32,070
a faccia in su sopra un tavolo, gli assi delle 
coordinate sono come è mostrato qui.

88
00:06:34,050 --&gt; 00:06:34,170


89
00:06:34,170 --&gt; 00:06:40,490
L'asse X va da destra a sinistra.
L'asse Y dall'alto verso il basso.

90
00:06:40,490 --&gt; 00:06:43,710
E l'asse Z.
va da sotto a sopra.

91
00:06:45,940 --&gt; 00:06:48,430
E non dimenticate che il sistema di coordinate

92
00:06:48,430 --&gt; 00:06:53,450
è orientato rispetto all'orientamento 
predefinito del dispositivo.

93
00:06:53,450 --&gt; 00:06:56,256
E questo non cambia anche se il
dispositivo cambia il suo orientamento attuale.

94
00:06:56,256 --&gt; 00:07:02,560
Per esempio, anche se il dispositivo

95
00:07:02,560 --&gt; 00:07:05,530
si sposta dalla modalità verticale 
a quella orizzontale

96
00:07:06,780 --&gt; 00:07:09,210
il sistema di coordinate non cambia.

97
00:07:11,810 --&gt; 00:07:18,070
La nostra prima applicazione di esempio di questa lezione
si chiama Sensor Raw Accelerometer.

98
00:07:18,070 --&gt; 00:07:21,920
Questa applicazione visualizza semplicemente 
i valori grezzi

99
00:07:21,920 --&gt; 00:07:26,030
che riceve dall'accelerometro
 del dispositivo.

100
00:07:26,030 --&gt; 00:07:29,010
Vediamolo in azione. 

101
00:07:31,170 --&gt; 00:07:32,860
ecco il mio dispositivo.

102
00:07:34,570 --&gt; 00:07:39,540
Ora, facciamo partire 
Sensor Raw Accelerometer.

103
00:07:39,540 --&gt; 00:07:45,410
Come potete vedere, questa applicazione mostra
tre TextViews..

104
00:07:45,410 --&gt; 00:07:50,940
Con un numero dentro.
E questi numeri corrispondono a valori

105
00:07:50,940 --&gt; 00:07:56,090
di X, Y e Z  che vengono letti 
dall'accelerometro del dispositivo

106
00:07:56,090 --&gt; 00:07:57,760
Come potete vedere

107
00:07:57,760 --&gt; 00:08:02,820
la forza più grande è ora
esercitata sull'asse Y.

108
00:08:04,420 --&gt; 00:08:09,390
Mentre io sto facendo questa dimostrazione, 
ma ovviamente non riuscendo

109
00:08:09,390 --&gt; 00:08:13,150
a tenere il dispositivo perfettamente 
dritto e perpendicolare

110
00:08:13,150 --&gt; 00:08:18,160
ma naturalmente, la mia mano trema un po', e così
i numeri &quot;ballano&quot; un po'.

111
00:08:19,680 --&gt; 00:08:23,698
Io ora ruoto il dispositivo 
in senso orario di 90 gradi.

112
00:08:23,698 --&gt; 00:08:29,440
Intorno all'asse Z.
E vedrete che ora la forza più grande

113
00:08:29,440 --&gt; 00:08:34,740
viene esercitata sull'asse X.

114
00:08:34,740 --&gt; 00:08:40,260
Facciamo ruotare il dispositivo di altri 90
gradi, e ora si vede di nuovo,

115
00:08:40,260 --&gt; 00:08:44,720
che la forza più grande viene 
esercitata sull'asse Y.

116
00:08:44,720 --&gt; 00:08:49,550
Ma questa volta la forza è negativa, e
questo perché l'asse Y

117
00:08:49,550 --&gt; 00:08:51,090
ora è a testa in giù.

118
00:08:52,750 --&gt; 00:08:56,440
E, infine, ruoto il dispositivo
di altri 90 gradi, 

119
00:08:56,440 --&gt; 00:08:59,250
e di nuovo si vedrà che 
la forza maggiore

120
00:08:59,250 --&gt; 00:09:02,340
è esercitata sull'asse X, e

121
00:09:02,340 --&gt; 00:09:05,610
che tale forza sta agendo
in direzione negativa

122
00:09:07,260 --&gt; 00:09:09,710
Diamo un'occhiata al codice sorgente 
di questa applicazione

123
00:09:12,840 --&gt; 00:09:18,320
Ecco Sensor Raw Accelerometer
aperto nell'IDE.

124
00:09:18,320 --&gt; 00:09:20,910
Ora, apriamo l'attività principale.

125
00:09:23,270 --&gt; 00:09:28,360
Si noti che questa classe implementa l'interfaccia
eventListener del sensore.

126
00:09:28,360 --&gt; 00:09:31,650
Così possiamo ricevere chiamate 
dal gestore del sensore.

127
00:09:33,560 --&gt; 00:09:37,960
Ora, in OnCreate dell'applicazione si ottiene 
un riferimento al gestore del sensore.

128
00:09:40,080 --&gt; 00:09:42,435
Successivamente, ottiene un riferimento al dispositivo di

129
00:09:42,435 --&gt; 00:09:49,060
accelerometro chiamando 
SensorManager.getDefaultSensor.

130
00:09:49,060 --&gt; 00:09:53,110
passando la costante del tipo che corrisponde

131
00:09:53,110 --&gt; 00:09:54,266
all'accelerometro.

132
00:09:54,266 --&gt; 00:10:00,503
Nel metodo onResume(), l'applicazione registra
questa classe come un listener(ascoltatore)

133
00:10:00,503 --&gt; 00:10:06,440
per l'evento accelerometro, chiamando il metodo
registerListener.

134
00:10:06,440 --&gt; 00:10:16,680
L'ultimo parametro
SensorManager.SENSOR_DELAY_UI

135
00:10:16,680 --&gt; 00:10:21,220
corrisponde ad una indice di frequenza 
di lettura relativamente basso

136
00:10:23,430 --&gt; 00:10:26,999
Successivamente, nel metodo OnPause annulla 
la registrazione di questa classe

137
00:10:26,999 --&gt; 00:10:30,040
come listener per tutti i sensori

138
00:10:30,040 --&gt; 00:10:31,210
per cui può essere in ascolto.

139
00:10:33,130 --&gt; 00:10:37,624
Scendendo, veniamo ora al metodo
onSensorChanged.

140
00:10:39,390 --&gt; 00:10:44,130
Questo metodo prima controlla che questo
 evento sia una lettura accelerometro.

141
00:10:45,380 --&gt; 00:10:49,100
Poi, verifica che sia passata una certa quantità di tempo

142
00:10:49,100 --&gt; 00:10:53,510
da quando è stata visualizzata l'ultima lettura.
E se è così

143
00:10:53,510 --&gt; 00:10:57,670
il codice registra i valori x, y e z 
dell'accelerometro

144
00:10:57,670 --&gt; 00:11:02,060
e quindi visualizza tali valori
sullo schermo.
</pre>

<!-- 
NewPP limit report
Preprocessor node count: 11/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->


</div><div class="printfooter">
Retrieved from "<a href="https://share.coursera.org/wiki/index.php?title=Android-001:Subtitles:Lecture79:it&amp;oldid=23587">https://share.coursera.org/wiki/index.php?title=Android-001:Subtitles:Lecture79:it&amp;oldid=23587</a>"</div>
					<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/index.php/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="/wiki/index.php/Category:Android:Subtitles" title="Category:Android:Subtitles">Android:Subtitles</a></li></ul></div></div>					<!-- end content -->
									</div>
			</div>