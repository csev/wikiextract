<div id="content">
				<a id="top"></a>
	        		        	<h1 id="firstHeading" class="firstHeading">Android-001:Subtitles:Lecture69:it</h1>
				<div id="bodyContent">
		            <h3 id="siteSub">From Coursera</h3>
		            <div id="contentSub"></div>
		            		            		            					<!-- start content -->
					<div lang="en" dir="ltr" class="mw-content-ltr"><p></p>
<h3> <span class="mw-headline" id="Touch_and_Gestures_-_Part_2_-_Italian_subtitles">Touch and Gestures - Part 2 - Italian subtitles</span></h3>
<ul>
<li><p><a href="/wiki/index.php/Android-001:Subtitles:Lecture67:it" title="Android-001:Subtitles:Lecture67:it">&lt;&lt; prev</a> | <a href="/wiki/index.php?title=Android-001:Subtitles:Lecture69:en&amp;action=edit&amp;redlink=1" class="new" title="Android-001:Subtitles:Lecture69:en (page does not exist)">en</a> <a href="/wiki/index.php?title=Android-001:Subtitles:Lecture69:es&amp;action=edit&amp;redlink=1" class="new" title="Android-001:Subtitles:Lecture69:es (page does not exist)">es</a> <strong class="selflink">it</strong> <a href="/wiki/index.php?title=Android-001:Subtitles:Lecture69:zh-tw&amp;action=edit&amp;redlink=1" class="new" title="Android-001:Subtitles:Lecture69:zh-tw (page does not exist)">zh-tw</a> <a href="/wiki/index.php?title=Android-001:Subtitles:Lecture69:pt&amp;action=edit&amp;redlink=1" class="new" title="Android-001:Subtitles:Lecture69:pt (page does not exist)">pt</a> | <a href="/wiki/index.php/Android-001:Subtitles:Lecture71:it" title="Android-001:Subtitles:Lecture71:it">next &gt;&gt;</a></p></li>
<li><p><a rel="nofollow" class="external text" href="https://www.dropbox.com/s/mfkca7gsoz7wsq7/6%20-%205%20-%20Touch%20and%20Gestures%20-%20Part%202%20%2811-46%29.srt">Direct download</a></p></li>
</ul>
<pre>
1
00:00:00,000 --&gt; 00:00:09,653
[BLANK_AUDIO]

2
00:00:09,653 --&gt; 00:00:12,228
Hi I'm Adam Porter and this is

3
00:00:12,228 --&gt; 00:00:18,830
Programming Mobile Applications for
Android Handheld Systems.

4
00:00:18,830 --&gt; 00:00:23,100
Android fornisce una classe chiamata
Gesture Detector, che

5
00:00:23,100 --&gt; 00:00:27,320
puo essere utilizzata dalle applicazioni 
per riconoscere le gesture.

6
00:00:28,400 --&gt; 00:00:35,220
Questa classe puo riconoscere le gesture, 
come un singolo tap o un doppio tap,

7
00:00:35,220 --&gt; 00:00:38,320
che consiste essenzialmente in due
singoli tap in rapida successione.

8
00:00:38,320 --&gt; 00:00:39,510
E un fling

9
00:00:39,510 --&gt; 00:00:42,200
che consiste in un tocco
seguito da un trascinamento

10
00:00:42,200 --&gt; 00:00:45,490
e da un rilascio, tutto molto 
velocemente.

11
00:00:47,620 --&gt; 00:00:52,240
Per usare un Gesture detector, l'activity
dovra creare un'istanza della classe

12
00:00:52,240 --&gt; 00:00:57,235
GestureDetector e dovra' dargli un oggetto 
che implementa l'interfaccia

13
00:00:57,235 --&gt; 00:01:02,390
GestureDetector.OnGestureListener

14
00:01:03,460 --&gt; 00:01:08,830
Poi l'activity avra bisogno di 
sovrascrivere il suo metodo onTouchEvent

15
00:01:08,830 --&gt; 00:01:13,730
che e' il metodo che viene chiamato
quando l'activity riceve un touch event.

16
00:01:13,730 --&gt; 00:01:16,030
Questo metodo deleghera' poi
la chiamata

17
00:01:16,030 --&gt; 00:01:21,450
a gestureDetectors.onGestureListener

18
00:01:24,100 --&gt; 00:01:26,810
Guardiamo un'app di esempio
che usa

19
00:01:26,810 --&gt; 00:01:30,240
un gesture detector per riconoscere
un fling.

20
00:01:31,260 --&gt; 00:01:33,030
Questa app e' chiamata

21
00:01:33,030 --&gt; 00:01:37,760
TouchGestureViewFlipper e quando
viene lanciata

22
00:01:37,760 --&gt; 00:01:41,630
presenta una TextView che mostra
un numero

23
00:01:41,630 --&gt; 00:01:45,560
Se l'utente effettua un fling da
destra verso sinistra, allora

24
00:01:45,560 --&gt; 00:01:48,880
la textView scorrer? verso sinistra

25
00:01:48,880 --&gt; 00:01:50,300
E mentre

26
00:01:50,300 --&gt; 00:01:55,290
lo fa, una nuova textView, mostrera'
un nnuovo numero

27
00:01:55,290 --&gt; 00:02:00,330
che scorrera dietro dalla destra.
Vediamo l'app in azione.

28
00:02:02,880 --&gt; 00:02:03,710
Qui c'e' il dispositivo.

29
00:02:05,230 --&gt; 00:02:09,410
Ora eseguiremo una gesture

30
00:02:11,020 --&gt; 00:02:16,890
appena lanciamo l'app, il display
mostra il numero zero.

31
00:02:16,890 --&gt; 00:02:21,790
Ora, eseguo un fling che consiste
nel premere e tener premuto sul display

32
00:02:21,790 --&gt; 00:02:28,270
Poi, molto velocemente, fare uno swipe 
verso sinistra per poi

33
00:02:28,270 --&gt; 00:02:30,410
togliere il dito dallo schermo

34
00:02:30,410 --&gt; 00:02:33,880
Vedremo l'animazione che ho 
appena descritto

35
00:02:33,880 --&gt; 00:02:34,750
Seguitela

36
00:02:37,040 --&gt; 00:02:43,190
Potete vedere la TextView
con il numero 0 uscire dal display

37
00:02:43,190 --&gt; 00:02:46,680
verso sinistra, e la nuova TextView,
che visualizza

38
00:02:46,680 --&gt; 00:02:50,640
il numero 1, entrare dalla destra

39
00:02:50,640 --&gt; 00:02:55,050
Ripeter? queste operazioni
piu volte

40
00:02:59,060 --&gt; 00:03:04,840
notate come la gesture funzioni solo se
&quot;swappo&quot; da destra verso sinistra.

41
00:03:04,840 --&gt; 00:03:08,560
Se provo a farla nell'altra direzione
non succede niente

42
00:03:12,480 --&gt; 00:03:14,860
Guardiamo il codice sorgente

43
00:03:14,860 --&gt; 00:03:22,359
C'e' l'applicazione aperta nell'IDE.
Apriamo l'activity principale

44
00:03:23,740 --&gt; 00:03:26,230
Prima di tutto, l'applicazione usa

45
00:03:26,230 --&gt; 00:03:30,320
la classe ViewFlipper per gestire le
animazioni.

46
00:03:30,320 --&gt; 00:03:33,530
Non la approfondiremo, ma sentitevi liberi

47
00:03:33,530 --&gt; 00:03:36,200
di studiare il codice, non appena finiremo
la lezione.

48
00:03:37,680 --&gt; 00:03:42,350
Per il momento, focalizziamoci su come
questa app rilevi la gesture &quot;fling&quot;.

49
00:03:43,810 --&gt; 00:03:49,860
Nel metodo onCreate(), potete vedere 
che il codice crea un nuovo gestureDetector

50
00:03:49,860 --&gt; 00:03:52,000
E nel costruttore di questo
oggetto, il

51
00:03:52,000 --&gt; 00:03:56,700
codice passa nella new,
SimpleOnGestureListener

52
00:03:57,860 --&gt; 00:04:01,280
Questo oggetto definisce un
metodo onFling()

53
00:04:02,430 --&gt; 00:04:08,260
Quando un GestureDetector rileva un
fling, questo metodo viene invocato.

54
00:04:08,260 --&gt; 00:04:09,530
ritorneremo

55
00:04:09,530 --&gt; 00:04:12,550
a questo metodo tra poco.

56
00:04:12,550 --&gt; 00:04:17,890
Ora, diamo un'occhiata a onTouch 
per questa activity

57
00:04:17,890 --&gt; 00:04:21,430
Questo metodo viene chiamato quando
succede un touch event

58
00:04:21,430 --&gt; 00:04:24,260
E nessuna View nell'activity
lo gestisce.

59
00:04:25,580 --&gt; 00:04:27,520
Quando viene invocato questo
metodo,

60
00:04:27,520 --&gt; 00:04:30,840
esso delega la chiamata,
al GestureDetector,

61
00:04:33,840 --&gt; 00:04:40,090
se il gesture detector eventualmente
stabilisce di aver riconosciuto un fling

62
00:04:40,090 --&gt; 00:04:44,200
Il metodo oFling() appena visto sara'
invocato.

63
00:04:44,200 --&gt; 00:04:48,070
Esso riceve un parametro.

64
00:04:48,070 --&gt; 00:04:51,890
In questo caso e' chiamato
velocityX, e dice quanto

65
00:04:51,890 --&gt; 00:04:56,390
e' veloce, e in che direzione la
gesture e' stata eseguita.

66
00:04:59,220 --&gt; 00:05:04,310
In questo esempio, se lo swipe
viene fatto da destra verso sinistra,

67
00:05:04,310 --&gt; 00:05:07,200
ad una velocita di piu di 10 pixel
per secondo, allora

68
00:05:07,200 --&gt; 00:05:11,560
il codice invoca un metodo chiamato
switchLayoutStateTo()

69
00:05:11,560 --&gt; 00:05:15,850
che causa l'avvio dell'animazione 
della TextView.

70
00:05:17,480 --&gt; 00:05:20,700
Se la velocita non risponde alla
condizione,

71
00:05:20,700 --&gt; 00:05:24,260
per esempio, risulta molto
lenta

72
00:05:24,260 --&gt; 00:05:27,470
o se la direzione e' sbagliata,
come da sinistra verso destra,

73
00:05:27,470 --&gt; 00:05:31,540
invece che da dx verso sx, allora
la gesture viene ignorata.

74
00:05:34,390 --&gt; 00:05:38,170
Per riconoscere gesture piu complesse,
si puo usare l'applicazione

75
00:05:38,170 --&gt; 00:05:44,520
Gesture Builder per creare e poi 
salvare gesture custom.

76
00:05:44,520 --&gt; 00:05:47,050
Questa applicazione viene fornita
in bundle con l'SDK

77
00:05:48,640 --&gt; 00:05:53,840
A runtime, si puo usare la classe
GestureLibraries per caricare le

78
00:05:53,840 --&gt; 00:05:59,179
gesture custom per riconoscere quando
un utente ne effettua una di queste.

79
00:06:00,990 --&gt; 00:06:07,350
Per fare cio, occorre includere
un gestureOverlayView nell'app.

80
00:06:07,350 --&gt; 00:06:12,180
And this view essentially intercepts user
gestures.

81
00:06:12,180 --&gt; 00:06:17,700
E poi, essa invochera il tuo application 
code per gestire queste gesture.

82
00:06:19,950 --&gt; 00:06:22,990
Qui c'e' uno screenshot del gesture builder
application.

83
00:06:22,990 --&gt; 00:06:28,020
come potete vedere ho creato quattro 
gesture custom

84
00:06:28,020 --&gt; 00:06:32,750
Next e' uno swipe orizzontale da
sinistr a destra

85
00:06:32,750 --&gt; 00:06:38,810
No somiglia a un fiocco, ad
una X

86
00:06:38,810 --&gt; 00:06:44,810
Prev e' uno swipe orizzontale da destra
a sinistra, e Yes,

87
00:06:44,810 --&gt; 00:06:45,980
che somiglia ad un check (spunta)

88
00:06:48,200 --&gt; 00:06:53,440
Nell'emulatore, GestureBuilder salva
le tue gesture custom in un file

89
00:06:53,440 --&gt; 00:06:58,292
chiamato /mnt/sdcard/gestures.

90
00:06:59,660 --&gt; 00:07:04,005
Per usare queste gesture hai bisogno di
copiare questo file nella cartella

91
00:07:04,005 --&gt; 00:07:09,010
/res/raw della tua app.

92
00:07:09,010 --&gt; 00:07:13,260
Diamo uno sguardo all'app TouchGestures
Questa applicazione

93
00:07:13,260 --&gt; 00:07:15,200
mostra una piccola view con uno

94
00:07:15,200 --&gt; 00:07:19,770
sfondo &quot;candidato&quot; per essere
lo sfondo dell'app.

95
00:07:19,770 --&gt; 00:07:22,760
Il colore di sfondo per tutta 
l'applicazione

96
00:07:22,760 --&gt; 00:07:26,110
e' inizialmente settato a grigio,
e l'utente

97
00:07:26,110 --&gt; 00:07:28,260
puo usare queste quattro gesture

98
00:07:28,260 --&gt; 00:07:32,630
che vi ho appena mostrato per
interagire con l'app

99
00:07:32,630 --&gt; 00:07:34,220
Per esempo, se l'utente esegue

100
00:07:34,220 --&gt; 00:07:38,000
la gesture Next, lo sfondo cambiera colore.

101
00:07:38,000 --&gt; 00:07:38,590
Se l'utente

102
00:07:38,590 --&gt; 00:07:43,960
esegue la gesture Prev, 
il colore di sfodo tornera come prima

103
00:07:43,960 --&gt; 00:07:47,400
Se l'utente esegue la gesture Yes,
l'app

104
00:07:47,400 --&gt; 00:07:50,750
setta lo sfondo come il colore corrente.

105
00:07:51,860 --&gt; 00:07:54,090
E se l'utente esegue la gesture
No,

106
00:07:54,090 --&gt; 00:07:57,740
il colore di sfondo e' resettato a grigio

107
00:07:58,805 --&gt; 00:08:02,290
Lanciamo l'app.
Questo e' il device

108
00:08:04,020 --&gt; 00:08:04,215
Ora

109
00:08:04,215 --&gt; 00:08:06,920
Lanciamo l'app

110
00:08:06,920 --&gt; 00:08:12,800
Quando viene avviata, lo sfondo
dell'app e' grigio

111
00:08:12,800 --&gt; 00:08:16,230
Ma c'e' un box colorato nel mezzo

112
00:08:16,230 --&gt; 00:08:19,400
se faccio uno swipe da sinistra
a destra

113
00:08:19,400 --&gt; 00:08:23,190
il colore del box cambia

114
00:08:23,190 --&gt; 00:08:25,810
se lo rifaccio, il colore cambia
ancora

115
00:08:26,860 --&gt; 00:08:29,920
posso ritornare al colore 
precedente facendo

116
00:08:29,920 --&gt; 00:08:32,950
uno swipe nell'altra direzione, da
destra a sinistra.

117
00:08:34,290 --&gt; 00:08:38,840
Se decido che mi piace il colore
corrente, possono fare la gesture Yes

118
00:08:40,450 --&gt; 00:08:40,980
Come qui

119
00:08:42,680 --&gt; 00:08:48,080
Potete vedere che lo sfondo dell'app 
e' cambiato nel colore scelto

120
00:08:48,080 --&gt; 00:08:53,680
ma se cambio idea possono eseguire
la gesture No, come qui.

121
00:08:54,990 --&gt; 00:09:00,450
Potete vedere che l'app torna ad
essere grigia come lo era inizialmente.

122
00:09:00,450 --&gt; 00:09:03,600
Il box al centro riappare

123
00:09:04,660 --&gt; 00:09:08,240
e posso cosi scegliere un nuovo
colore candidato

124
00:09:08,240 --&gt; 00:09:08,840
Diamo

125
00:09:10,940 --&gt; 00:09:13,680
uno sguardo al codice sorgente

126
00:09:16,160 --&gt; 00:09:21,230
Qui c'e' l'app aperta nell'IDE.
Apriamo l'activity principale.

127
00:09:22,660 --&gt; 00:09:26,790
Potete notare che questa activity implementa 
l'interfaccia onGesturePerformedListener()

128
00:09:26,790 --&gt; 00:09:33,320
cio vuol dire che fornisce un metodo 
gesturePerformed()

129
00:09:34,690 --&gt; 00:09:37,140
Nell'onCreate(), il codice ottiene
una referenza

130
00:09:37,140 --&gt; 00:09:42,230
al FrameLayout, che e' memorizzato
in una variabile chiamata mFrame.

131
00:09:42,230 --&gt; 00:09:45,140
E qua e' dove il colore candidato appare.

132
00:09:46,490 --&gt; 00:09:48,830
Il codice ottiene una referenza ad un
RelativeLayout

133
00:09:48,830 --&gt; 00:09:53,490
che e' memorizzata in una variabile 
chiamata mLayout.

134
00:09:53,490 --&gt; 00:09:56,270
E qui viene definito il layout
dell'app intera.

135
00:09:57,950 --&gt; 00:10:03,640
Qui c'e' il codice che legge le gesture
dalla cartella res/raw

136
00:10:03,640 --&gt; 00:10:07,400
usando il metodo fromRawResources()

137
00:10:07,400 --&gt; 00:10:08,570
della GestureLibraries.

138
00:10:11,230 --&gt; 00:10:15,970
Questo metodo ritorna un oggetto
GestureLibrary, e il codice poi

139
00:10:15,970 --&gt; 00:10:20,010
chiama il metodo load() per la Gesture
Library.

140
00:10:21,210 --&gt; 00:10:25,670
Dopodiche, il codice effettua un findViewById
per trovare l'overlayView

141
00:10:25,670 --&gt; 00:10:30,970
per poi aggiungere l'activity corrente
come listener

142
00:10:30,970 --&gt; 00:10:35,940
per le gesture che sono intercettate
dall'overlayView.

143
00:10:37,940 --&gt; 00:10:40,020
Quando il gesture overlayView
individua una

144
00:10:40,020 --&gt; 00:10:44,990
gesture, chiama il metodo
onGesturePerformed(), mostrati qui.

145
00:10:47,130 --&gt; 00:10:52,220
E questo metodo prima chiama il metodo
recognize(), che analizza la gesture

146
00:10:52,220 --&gt; 00:10:57,820
individuata, e poi da' un punteggio ad
ogni custom gesture in base

147
00:10:57,820 --&gt; 00:11:03,240
a quanto il gesto e' simile alle
gesture custom registrate nel file gesture

148
00:11:04,350 --&gt; 00:11:07,160
Poi il codice ottiene la stima piu
alta in classifica.

149
00:11:09,380 --&gt; 00:11:13,798
E se questa stima ha un alto
punteggio,

150
00:11:13,798 --&gt; 00:11:19,066
il codice esegue l'azione
associata a questa gesture.

151
00:11:19,066 --&gt; 00:11:23,280
Per esempio, se la gesture era una
gesture Yes, allora

152
00:11:23,280 --&gt; 00:11:28,796
il codice settava il colore di sfondo
come quello del colore candidato.

153
00:11:28,796 --&gt; 00:11:32,683
[BLANK_AUDIO]

154
00:11:32,683 --&gt; 00:11:37,220
Questo e' tutto per questa
lezione sul touch e sulle gesture.

155
00:11:37,220 --&gt; 00:11:40,790
Unitevi a me la prossima volta
quando parleremo di multimedia.

156
00:11:40,790 --&gt; 00:11:40,990
DENGHIU VERI MACH.
</pre>

<!-- 
NewPP limit report
Preprocessor node count: 11/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->


</div><div class="printfooter">
Retrieved from "<a href="https://share.coursera.org/wiki/index.php?title=Android-001:Subtitles:Lecture69:it&amp;oldid=23571">https://share.coursera.org/wiki/index.php?title=Android-001:Subtitles:Lecture69:it&amp;oldid=23571</a>"</div>
					<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/index.php/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="/wiki/index.php/Category:Android:Subtitles" title="Category:Android:Subtitles">Android:Subtitles</a></li></ul></div></div>					<!-- end content -->
									</div>
			</div>