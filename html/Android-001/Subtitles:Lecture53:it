<div id="content">
				<a id="top"></a>
	        		        	<h1 id="firstHeading" class="firstHeading">Android-001:Subtitles:Lecture53:it</h1>
				<div id="bodyContent">
		            <h3 id="siteSub">From Coursera</h3>
		            <div id="contentSub"></div>
		            		            		            					<!-- start content -->
					<div lang="en" dir="ltr" class="mw-content-ltr"><p></p>
<h3> <span class="mw-headline" id="Networking_-_Part_1_-_Italian_subtitles">Networking - Part 1 - Italian subtitles</span></h3>
<ul>
<li><p><a href="/wiki/index.php/Android-001:Subtitles:Lecture51:it" title="Android-001:Subtitles:Lecture51:it">&lt;&lt; prev</a> | <a href="/wiki/index.php?title=Android-001:Subtitles:Lecture53:en&amp;action=edit&amp;redlink=1" class="new" title="Android-001:Subtitles:Lecture53:en (page does not exist)">en</a> <a href="/wiki/index.php?title=Android-001:Subtitles:Lecture53:es&amp;action=edit&amp;redlink=1" class="new" title="Android-001:Subtitles:Lecture53:es (page does not exist)">es</a> <strong class="selflink">it</strong> <a href="/wiki/index.php?title=Android-001:Subtitles:Lecture53:zh-tw&amp;action=edit&amp;redlink=1" class="new" title="Android-001:Subtitles:Lecture53:zh-tw (page does not exist)">zh-tw</a> <a href="/wiki/index.php?title=Android-001:Subtitles:Lecture53:pt&amp;action=edit&amp;redlink=1" class="new" title="Android-001:Subtitles:Lecture53:pt (page does not exist)">pt</a> | <a href="/wiki/index.php/Android-001:Subtitles:Lecture55:it" title="Android-001:Subtitles:Lecture55:it">next &gt;&gt;</a></p></li>
<li><p><a rel="nofollow" class="external text" href="https://www.dropbox.com/s/wpwt640i3i7dc6k/5%20-%208%20-%20Networking%20-%20Part%201%20%2813-40%29.srt">Direct download</a></p></li>
</ul>
<pre>
1
00:00:08,476 --&gt; 00:00:13,432
Ciao, sono Adam Porter, e questo è
&quot;Programming

2
00:00:13,432 --&gt; 00:00:19,007
Mobile Applications, for Android Handheld
Systems&quot;.

3
00:00:19,007 --&gt; 00:00:24,501
Una delle caratteristiche distintive dei
sistemi mobile moderni è che essi possono

4
00:00:24,501 --&gt; 00:00:29,770
tenerci collegati in rete senza tenerci
legati a una singola locazione.

5
00:00:31,150 --&gt; 00:00:34,120
In questa lezione, esploreremo il
software e

6
00:00:34,120 --&gt; 00:00:39,410
le pratiche di programmazione che servono per
collegare le applicazioni alla rete.

7
00:00:40,830 --&gt; 00:00:44,930
Quindi inizierò questa lezione discutendo
del networking in generale.

8
00:00:44,930 --&gt; 00:00:51,899
Tale discussione si concentrerà sul
collegamento delle app a Internet usando

9
00:00:51,899 --&gt; 00:00:59,040
l'HyperText Transfer Protocol o HTTP,
precisamente tramite richieste HTTP GET.

10
00:01:00,520 --&gt; 00:01:03,460
Dopo di che, vi presenterò diverse classi che

11
00:01:03,460 --&gt; 00:01:06,410
Android offre per supportare questo tipo di
networking.

12
00:01:06,410 --&gt; 00:01:11,220
E, infine, discuterò di come le applicazioni
possono elaborare i

13
00:01:11,220 --&gt; 00:01:16,280
dati ricevuti in risposta a queste
richieste HTTP GET.

14
00:01:16,280 --&gt; 00:01:21,080
In particolare, parlerò di due popolari
linguaggi di formattazione dei dati.

15
00:01:21,080 --&gt; 00:01:26,620
Uno, il JavaScript Object Notation Language,
o JSON

16
00:01:26,620 --&gt; 00:01:31,910
e due, l'Extensible Markup Language,
o XML.

17
00:01:31,910 --&gt; 00:01:35,270
E parlerò di come si analizzano

18
00:01:35,270 --&gt; 00:01:40,030
queste risposte HTTP quando sono
formattate in uno di questi linguaggi.

19
00:01:41,570 --&gt; 00:01:44,930
Dunque, i dispositivi palmari ci hanno dato
la mobilità.

20
00:01:44,930 --&gt; 00:01:50,830
Ci si poteva spostare da un luogo all'altro,
ed eseguire comunque computazioni utili.

21
00:01:50,830 --&gt; 00:01:51,590
Tuttavia,

22
00:01:51,590 --&gt; 00:01:55,390
le loro capacità di networking erano
primitive per gli standard odierni.

23
00:01:56,410 --&gt; 00:02:01,090
Ora, andando avanti, i dispositivi di oggi
combinano potenti processori

24
00:02:01,090 --&gt; 00:02:06,100
con connessioni di rete veloci su WiFi
e reti cellulari.

25
00:02:07,220 --&gt; 00:02:11,800
Le applicazioni portatili quindi vorranno
spesso far uso

26
00:02:11,800 --&gt; 00:02:16,820
di queste funzionalità di rete per accedere
e fornire dati e

27
00:02:16,820 --&gt; 00:02:21,880
servizi. Ora, per aiutarvi a fare questo,
Android include

28
00:02:21,880 --&gt; 00:02:27,610
una varietà di classi di supporto al
netwoking, tra cui le classi Socket e URL,

29
00:02:27,610 --&gt; 00:02:33,500
nei package java.net.
Le classi HttpRequest

30
00:02:33,500 --&gt; 00:02:38,868
e HttpResponse, nei package
org.apache.

31
00:02:38,868 --&gt; 00:02:44,450
E le classi URI, AndroidHttpClient,

32
00:02:44,450 --&gt; 00:02:48,320
e AudioStream, nei package android.net.

33
00:02:49,770 --&gt; 00:02:52,890
In questa lezione guarderemo
molte di queste classi,

34
00:02:52,890 --&gt; 00:02:59,210
usando ciascuna di esse per implementare
la stessa applicazione di esempio.

35
00:02:59,210 --&gt; 00:03:03,180
E quest'applicazione interagisce con un
servizio internet per ottenere

36
00:03:03,180 --&gt; 00:03:05,840
informazioni sui terremoti che si sono

37
00:03:05,840 --&gt; 00:03:09,900
verificati in una particolare regione
geografica.

38
00:03:09,900 --&gt; 00:03:14,510
E come vedrete, che i dati vengono restituiti
in vari formati.

39
00:03:14,510 --&gt; 00:03:19,170
Ora inizialmente ci limiteremo a visualizzare
il testo così come viene scaricato.

40
00:03:19,170 --&gt; 00:03:21,410
Più avanti nella lezione, vi mostrerò come

41
00:03:21,410 --&gt; 00:03:27,090
processare quei dati per estrarre solo le
informazioni che volete.

42
00:03:27,090 --&gt; 00:03:29,180
Oh, e un'altra cosa.

43
00:03:29,180 --&gt; 00:03:30,950
Come si vedrà tra un momento, poiché

44
00:03:30,950 --&gt; 00:03:35,220
questi dati includono informazioni
geografiche, sarebbero molto

45
00:03:35,220 --&gt; 00:03:39,430
adatti ad essere mostrati su una mappa,
piuttosto che come testo.

46
00:03:39,430 --&gt; 00:03:43,590
Ora, non lo faremo in questa lezione, ma
ricordatelo, perché

47
00:03:43,590 --&gt; 00:03:48,120
ci ritorneremo quando arriveremo alla
lezione su mappe e posizione.

48
00:03:49,530 --&gt; 00:03:54,670
Dunque, per far funzionare
quest'applicazione, il codice deve creare una

49
00:03:54,670 --&gt; 00:04:00,130
richiesta HTTP, inviarla a un server,
recuperare i risultati,

50
00:04:00,130 --&gt; 00:04:04,730
e quindi visualizzare tali risultati.
Android fornisce molte classi per

51
00:04:04,730 --&gt; 00:04:11,315
aiutare con questo. Tre di cui parleremo ora
sono la classe Socket,

52
00:04:11,315 --&gt; 00:04:18,440
la classe HttpUrlConnection e la classe
AndroidHttpClient.

53
00:04:18,440 --&gt; 00:04:20,886
Quindi ecco il mio dispositivo.

54
00:04:20,886 --&gt; 00:04:27,600
E ora lancerò l'applicazione
NetworkingSockets.

55
00:04:27,600 --&gt; 00:04:28,100
Come

56
00:04:30,530 --&gt; 00:04:35,840
potete vedere, quest'applicazione all'inizio
visualizza un solo pulsante etichettato

57
00:04:35,840 --&gt; 00:04:40,670
&quot;Load Data&quot; (Carica i Dati).
Quando premo il pulsante, l'applicazione

58
00:04:40,670 --&gt; 00:04:46,190
emette una richiesta HTTP GET a un server
esterno.

59
00:04:46,190 --&gt; 00:04:48,700
E quel server risponderà con del

60
00:04:48,700 --&gt; 00:04:52,950
testo complesso che contiene i dati
dei terremoti richiesti.

61
00:04:54,340 --&gt; 00:04:55,570
Ok.

62
00:04:55,570 --&gt; 00:05:02,440
Quindi ora premo il pulsante &quot;Load Data&quot; e
si possono vedere i dati richiesti.

63
00:05:03,800 --&gt; 00:05:08,400
Diamo un'occhiata al codice sorgente per
vedere cosa fa per ottenere i dati.

64
00:05:08,400 --&gt; 00:05:10,860
Ora qui ho aperto l'applicazione
nell'IDE.

65
00:05:13,550 --&gt; 00:05:16,490
Ora aprirò l'Activity principale di questa
applicazione.

66
00:05:18,770 --&gt; 00:05:21,760
E qui sto mostrando il listener del tasto
&quot;Load Data&quot;.

67
00:05:23,950 --&gt; 00:05:30,784
Quando si preme questo pulsante,
l'applicazione crea, e quindi esegue,

68
00:05:30,784 --&gt; 00:05:36,753
un AsyncTask chiamato HttpGetTask.
Diamo un'occhiata a quella classe.

69
00:05:36,753 --&gt; 00:05:41,735
La classe HttpGetTask dichiara in
primo luogo alcune variabili,

70
00:05:41,735 --&gt; 00:05:46,030
vengono utilizzate nella creazione di una
richiesta HTTP GET.

71
00:05:48,190 --&gt; 00:05:50,790
Quando viene chiamato il metodo execute, sul

72
00:05:50,790 --&gt; 00:05:55,460
HttpGetTask, viene chiamato il metodo
doInBackground.

73
00:05:57,270 --&gt; 00:06:00,760
E questo metodo inizia con la
creazione di un nuovo Socket,

74
00:06:00,760 --&gt; 00:06:08,040
che verrà connesso al computer host,
api.geonames.org

75
00:06:08,040 --&gt; 00:06:13,251
sulla porta porta HTTP standard 80.
Successivamente, il codice

76
00:06:13,251 --&gt; 00:06:19,070
ottiene l'OutputStream del Socket, e quindi
scrive l'HTTP_GET_COMMAND.

77
00:06:20,380 --&gt; 00:06:24,940
E questa stringa sarà inviata al computer
host, che la interpreta

78
00:06:24,940 --&gt; 00:06:28,910
come una HTTPGetRequest, e quindi risponde

79
00:06:28,910 --&gt; 00:06:32,500
inviando i dati di risposta appropriati.

80
00:06:33,780 --&gt; 00:06:39,040
Quindi questo codice continua ottenendo
l'InsputStream del Socket e

81
00:06:39,040 --&gt; 00:06:43,750
passandolo a un metodo chiamato readStream.

82
00:06:43,750 --&gt; 00:06:48,430
Il metodo readStream infine legge i
dati di risposta dall'InputStream del

83
00:06:48,430 --&gt; 00:06:52,830
Socket. E quindi resituisce la risposta come

84
00:06:52,830 --&gt; 00:06:57,572
una singola stringa.
E questa stringa viene passata al

85
00:06:57,572 --&gt; 00:07:04,100
metodo onPostExecute che viene eseguito
sul thread principale e che

86
00:07:04,100 --&gt; 00:07:06,640
visualizza la risposta nella TextView.

87
00:07:07,640 --&gt; 00:07:12,470
Se torniamo all'applicazione,
si noterà che il testo di risposta

88
00:07:12,470 --&gt; 00:07:18,970
include non solo i dati dei terremoti, ma
anche gli header della risposta HTTP.

89
00:07:18,970 --&gt; 00:07:22,990
Ora, di norma, non vorrei mostrare questo
testo qui.

90
00:07:22,990 --&gt; 00:07:25,780
Voglio solamente mostrare i dati dei
terremoti.

91
00:07:25,780 --&gt; 00:07:29,760
Quindi avrei dovuto analizzare la risposta ed

92
00:07:29,760 --&gt; 00:07:31,950
estrarre solo i dati che volevo.

93
00:07:33,730 --&gt; 00:07:37,240
Inoltre, potreste aver notato che
non ho scritto alcun

94
00:07:37,240 --&gt; 00:07:41,450
codice per la gestione di errori di cui si ha
bisogno per rendere quest'applicazione robusta.

95
00:07:42,850 --&gt; 00:07:47,490
E questi punti catturano abbastanza bene gli
svantaggi nell'usare i Socket.

96
00:07:47,490 --&gt; 00:07:50,700
Il livello è molto basso, puoi scrivere
qualsiasi cosa tu voglia sul

97
00:07:50,700 --&gt; 00:07:54,900
socket, ma in cambio hai bisogno di gestire
tutti i

98
00:07:54,900 --&gt; 00:07:59,320
dettagli del fare le richieste HTTP, tutta
la gestione degli

99
00:07:59,320 --&gt; 00:08:03,630
errori, e tutto il processing delle risposte
HTTP.

100
00:08:07,260 --&gt; 00:08:14,100
La prossima implementazione che vedremo usa
la classe HttpUrlConnection.

101
00:08:14,100 --&gt; 00:08:17,950
Questa classe fornisce un'interfaccia
di più alto livello, che gestisce più

102
00:08:17,950 --&gt; 00:08:22,670
dettagli del networking rispetto alla classe
Socket.

103
00:08:22,670 --&gt; 00:08:25,320
Ma come vedremo tra un momento, ha anche una
API

104
00:08:25,320 --&gt; 00:08:32,180
meno flessibili della nostra ultima
opzione, la classe AndroidHttpClient.

105
00:08:32,180 --&gt; 00:08:36,580
Ora, detto questo, voglio anche sottolineare
che il team

106
00:08:36,580 --&gt; 00:08:42,020
Android non sta più lavorando attivamente
sulla classe AndroidHttpClient.

107
00:08:42,020 --&gt; 00:08:47,230
E sta ponendo i suoi sforzi nel
miglioramento della classe che vedremo ora.

108
00:08:47,230 --&gt; 00:08:50,130
Quindi guardiamo l'applicazione di esempio

109
00:08:50,130 --&gt; 00:08:55,810
implementata stavolta con la classe
HttpUrlConnection.

110
00:08:55,810 --&gt; 00:08:56,310
Quindi

111
00:08:58,200 --&gt; 00:08:59,150
ecco il mio dispositivo.

112
00:09:01,520 --&gt; 00:09:05,100
E ora lancio l'applicazione NetworkingURL.

113
00:09:08,470 --&gt; 00:09:11,110
Come prima, quest'applicazione inizialmente
mostra

114
00:09:11,110 --&gt; 00:09:13,760
un singolo pulsante etichettato &quot;Load Data&quot;.

115
00:09:15,280 --&gt; 00:09:20,870
E come prima, quando premo su quel pulsante
l'applicazione emette una richiesta

116
00:09:20,870 --&gt; 00:09:25,450
HTTP GET a un server esterno, e tale server

117
00:09:25,450 --&gt; 00:09:31,440
risponderà con del testo complesso,
contenente i dati richiesti sui terremoti.

118
00:09:31,440 --&gt; 00:09:33,280
Ok, quindi ora premo il

119
00:09:33,280 --&gt; 00:09:34,390
pulsante &quot;Load Data&quot;.

120
00:09:35,690 --&gt; 00:09:39,580
Si possono vedere i dati richiesti
apparire in una TextView.

121
00:09:40,620 --&gt; 00:09:45,590
Si noti, tuttavia, che stavolta gli header
della risposta HTTP sono stati rimossi.

122
00:09:47,540 --&gt; 00:09:49,950
Diamo un'occhiata al codice sorgente
e vediamo come funziona.

123
00:09:52,390 --&gt; 00:09:55,120
Ora, qui ho l'applicazione aperta nell'IDE.

124
00:09:56,140 --&gt; 00:09:59,280
Ora apro la MainActivity di
quest'applicazione.

125
00:10:00,920 --&gt; 00:10:04,150
E qui sto mostrando il listener del Button
&quot;Load Data&quot;.

126
00:10:05,600 --&gt; 00:10:10,320
Come prima, quando si preme questo tasto,
l'applicazione crea e quindi

127
00:10:10,320 --&gt; 00:10:17,390
esegue un AsyncTask chiamato HttpGetTask.
Guardiamo quella classe.

128
00:10:19,950 --&gt; 00:10:24,390
Quando il metodo execute viene chiamato su
HttpGetTask, viene invocato

129
00:10:24,390 --&gt; 00:10:29,490
il metodo doInBackground. Tale metodo inizia
creando un nuovo oggetto URL

130
00:10:29,490 --&gt; 00:10:35,800
e passando la stringa URL per il servizio
desiderato come parametro.

131
00:10:37,710 --&gt; 00:10:40,580
Il codice chiama quindi il metodo
openConnection

132
00:10:40,580 --&gt; 00:10:46,950
sull'oggetto URL, che restituisce una
HttpUrlConnection.

133
00:10:46,950 --&gt; 00:10:51,951
Quest'oggetto viene poi memorizzato in una
variabile chiamata httpURLConnection.

134
00:10:53,570 --&gt; 00:10:59,710
Il codice prosegue ottenendo l'InputStream
della HttpUrlConnection

135
00:10:59,710 --&gt; 00:11:02,250
e passandola al metodo readStream.

136
00:11:03,570 --&gt; 00:11:07,700
E come prima, il metodo readStream
legge i dati di risposta

137
00:11:07,700 --&gt; 00:11:12,140
dal flusso di input del Socket, e quindi
restituisce la risposta,

138
00:11:12,140 --&gt; 00:11:18,010
come una singola stringa.
Questa volta, però, la HttpUrlConnection

139
00:11:18,010 --&gt; 00:11:24,550
rimuove gli header della risposta HTTP e
gestisce il controllo degli errori per te.

140
00:11:26,040 --&gt; 00:11:29,792
Ora questa stringa viene quindi passata al
metodo

141
00:11:29,792 --&gt; 00:11:33,470
onPostExecute, che mostra la risposta in una
TextView.

142
00:11:36,040 --&gt; 00:11:42,760
La terza classe è AndroidHttpClient. Questa
classe è un'implementazione del

143
00:11:42,760 --&gt; 00:11:50,180
DefaultHttpClient del progetto Apache e
permette una grande personalizzazione.

144
00:11:50,180 --&gt; 00:11:56,230
In particolare, la classe divide la
transazione HTTP in un

145
00:11:56,230 --&gt; 00:12:01,650
oggetto richiesta e in un oggetto risposta.
Quindi si possono creare sottoclassi

146
00:12:01,650 --&gt; 00:12:06,580
che personalizzano la gestione delle
richieste e delle loro risposte.

147
00:12:06,580 --&gt; 00:12:09,870
Ora conoscete già l'aspetto
dell'applicazione,

148
00:12:09,870 --&gt; 00:12:13,580
quindi saltiamo direttamente al codice ed
esaminiamo l'implementazione.

149
00:12:16,380 --&gt; 00:12:22,500
Ora, qui ho aperto l'applicazione
NetworkingAndroidHttpClient nell'IDE.

150
00:12:23,960 --&gt; 00:12:27,290
Ora apro la MainActivity di
ques'applicazione.

151
00:12:27,290 --&gt; 00:12:31,790
E andiamo direttamente alla classe
HttpGetTask.

152
00:12:33,400 --&gt; 00:12:36,097
Tale classe inizia creando un nuoco

153
00:12:36,097 --&gt; 00:12:41,830
oggetto AndroidHttpClient chiamando il metodo
newInstance della classe.

154
00:12:43,600 --&gt; 00:12:48,640
Ora, quando viene chiamato il metodo
doInBackground, il codice crea

155
00:12:48,640 --&gt; 00:12:53,570
un oggetto HttpGet, passando la stringa URL
per quella richiesta.

156
00:12:54,620 --&gt; 00:12:58,230
Quindi, crea un oggetto ResponseHandler.

157
00:12:58,230 --&gt; 00:13:05,000
Quest'oggetto è responsabile della gestione
della risposta alla richiesta HttpGet.

158
00:13:05,000 --&gt; 00:13:09,090
In questo caso, il ResponseHandler è del tipo

159
00:13:09,090 --&gt; 00:13:14,390
BasicResponseHandler, che restituirà il
corpo della risposta.

160
00:13:14,390 --&gt; 00:13:18,520
Vedremo un ResponseHandler più complesso più
avanti in questa lezione.

161
00:13:20,220 --&gt; 00:13:22,120
E, infine, la richiesta e il

162
00:13:22,120 --&gt; 00:13:26,570
ResponseHandler vengono passati al metodo
execute,

163
00:13:26,570 --&gt; 00:13:29,060
che invia la richiesta e ottiene la

164
00:13:29,060 --&gt; 00:13:32,670
risposta, passandola attraverso il
ResponseHandler.

165
00:13:32,670 --&gt; 00:13:34,250
E il

166
00:13:34,250 --&gt; 00:13:40,010
risultato di tutto questo viene poi passato
ad onPostExecute,

167
00:13:40,010 --&gt; 00:13:42,276
che mostra la risposta in un campo di testo.
</pre>

<!-- 
NewPP limit report
Preprocessor node count: 11/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->


</div><div class="printfooter">
Retrieved from "<a href="https://share.coursera.org/wiki/index.php?title=Android-001:Subtitles:Lecture53:it&amp;oldid=23149">https://share.coursera.org/wiki/index.php?title=Android-001:Subtitles:Lecture53:it&amp;oldid=23149</a>"</div>
					<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/index.php/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="/wiki/index.php/Category:Android:Subtitles" title="Category:Android:Subtitles">Android:Subtitles</a></li></ul></div></div>					<!-- end content -->
									</div>
			</div>