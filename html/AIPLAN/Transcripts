<div id="content">
				<a id="top"></a>
	        		        	<h1 id="firstHeading" class="firstHeading">AIPLAN:Transcripts</h1>
				<div id="bodyContent">
		            <h3 id="siteSub">From Coursera</h3>
		            <div id="contentSub"></div>
		            		            		            					<!-- start content -->
					<div lang="en" dir="ltr" class="mw-content-ltr"><p></p>
<ul>
<li><a href="/wiki/index.php/AIPLAN:Main" title="AIPLAN:Main"> AI Planning: Main WIKI page</a></li>
</ul>
<p>Artificial Intelligence Planning - Transcripts of the Video Lectures - English (En)</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Week_1"><span class="tocnumber">1</span> <span class="toctext">Week 1</span></a>
<ul>
<li class="toclevel-2"><a href="#What_is_planning.3F"><span class="tocnumber">1.1</span> <span class="toctext">What is planning?</span></a></li>
<li class="toclevel-2"><a href="#Conceptual_Model_for_Planning"><span class="tocnumber">1.2</span> <span class="toctext">Conceptual Model for Planning</span></a></li>
<li class="toclevel-2"><a href="#Planning_and_Search"><span class="tocnumber">1.3</span> <span class="toctext">Planning and Search</span></a>
<ul>
<li class="toclevel-3"><a href="#a_Planning_and_Search"><span class="tocnumber">1.3.1</span> <span class="toctext">a Planning and Search</span></a></li>
<li class="toclevel-3"><a href="#b_Planning_and_Search"><span class="tocnumber">1.3.2</span> <span class="toctext">b Planning and Search</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Example_Problems"><span class="tocnumber">1.4</span> <span class="toctext">Example Problems</span></a></li>
<li class="toclevel-2"><a href="#Context_-_Practical_Systems"><span class="tocnumber">1.5</span> <span class="toctext">Context - Practical Systems</span></a></li>
<li class="toclevel-2"><a href="#Context_-_Tasking.2C_Execution.2C_Agents_and_Plans"><span class="tocnumber">1.6</span> <span class="toctext">Context - Tasking, Execution, Agents and Plans</span></a></li>
<li class="toclevel-2"><a href="#Context_-_Example_Planners"><span class="tocnumber">1.7</span> <span class="toctext">Context - Example Planners</span></a></li>
<li class="toclevel-2"><a href="#Context_-_Planning.2B.2B"><span class="tocnumber">1.8</span> <span class="toctext">Context - Planning++</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Week_2"><span class="tocnumber">2</span> <span class="toctext">Week 2</span></a>
<ul>
<li class="toclevel-2"><a href="#Heuristic_Search_Strategies"><span class="tocnumber">2.1</span> <span class="toctext">Heuristic Search Strategies</span></a></li>
<li class="toclevel-2"><a href="#A.2A_Tree_Search"><span class="tocnumber">2.2</span> <span class="toctext">A* Tree Search</span></a></li>
<li class="toclevel-2"><a href="#Properties_of_A.2A"><span class="tocnumber">2.3</span> <span class="toctext">Properties of A*</span></a></li>
<li class="toclevel-2"><a href="#A.2A_Graph_Search"><span class="tocnumber">2.4</span> <span class="toctext">A* Graph Search</span></a>
<ul>
<li class="toclevel-3"><a href="#a_A.2A_Graph_Search"><span class="tocnumber">2.4.1</span> <span class="toctext">a A* Graph Search</span></a></li>
<li class="toclevel-3"><a href="#b_A.2A_Graph_Search"><span class="tocnumber">2.4.2</span> <span class="toctext">b A* Graph Search</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Good_Heuristics"><span class="tocnumber">2.5</span> <span class="toctext">Good Heuristics</span></a></li>
<li class="toclevel-2"><a href="#Structured_States"><span class="tocnumber">2.6</span> <span class="toctext">Structured States</span></a>
<ul>
<li class="toclevel-3"><a href="#a_Structured_States"><span class="tocnumber">2.6.1</span> <span class="toctext">a Structured States</span></a></li>
<li class="toclevel-3"><a href="#b_Structured_States"><span class="tocnumber">2.6.2</span> <span class="toctext">b Structured States</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Structured_Operators"><span class="tocnumber">2.7</span> <span class="toctext">Structured Operators</span></a>
<ul>
<li class="toclevel-3"><a href="#a_Structured_Operators"><span class="tocnumber">2.7.1</span> <span class="toctext">a Structured Operators</span></a></li>
<li class="toclevel-3"><a href="#b_Structured_Operators"><span class="tocnumber">2.7.2</span> <span class="toctext">b Structured Operators</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Domains_and_Problems"><span class="tocnumber">2.8</span> <span class="toctext">Domains and Problems</span></a>
<ul>
<li class="toclevel-3"><a href="#a_Domains_and_Problems"><span class="tocnumber">2.8.1</span> <span class="toctext">a Domains and Problems</span></a></li>
<li class="toclevel-3"><a href="#b_Domains_and_Problems"><span class="tocnumber">2.8.2</span> <span class="toctext">b Domains and Problems</span></a></li>
<li class="toclevel-3"><a href="#c_Domains_and_Problems"><span class="tocnumber">2.8.3</span> <span class="toctext">c Domains and Problems</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Forward_Search"><span class="tocnumber">2.9</span> <span class="toctext">Forward Search</span></a>
<ul>
<li class="toclevel-3"><a href="#a_Forward_Search"><span class="tocnumber">2.9.1</span> <span class="toctext">a Forward Search</span></a></li>
<li class="toclevel-3"><a href="#b_Forward_Search"><span class="tocnumber">2.9.2</span> <span class="toctext">b Forward Search</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Backward_Search"><span class="tocnumber">2.10</span> <span class="toctext">Backward Search</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Week_3"><span class="tocnumber">3</span> <span class="toctext">Week 3</span></a></li>
<li class="toclevel-1"><a href="#Week_4"><span class="tocnumber">4</span> <span class="toctext">Week 4</span></a></li>
<li class="toclevel-1"><a href="#Week_5"><span class="tocnumber">5</span> <span class="toctext">Week 5</span></a></li>
<li class="toclevel-1"><a href="#Features"><span class="tocnumber">6</span> <span class="toctext">Features</span></a>
<ul>
<li class="toclevel-2"><a href="#Feature_-_AI_Planning_for_Robots"><span class="tocnumber">6.1</span> <span class="toctext">Feature - AI Planning for Robots</span></a></li>
<li class="toclevel-2"><a href="#Feature_-_Story_of_A.2A_and_STRIPS_by_Nils_Nilsson"><span class="tocnumber">6.2</span> <span class="toctext">Feature - Story of A* and STRIPS by Nils Nilsson</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Additional_Stuff"><span class="tocnumber">7</span> <span class="toctext">Additional Stuff</span></a>
<ul>
<li class="toclevel-2"><a href="#O-Plan_Unix_Systems_Admin_Demo"><span class="tocnumber">7.1</span> <span class="toctext">O-Plan Unix Systems Admin Demo</span></a></li>
<li class="toclevel-2"><a href="#I-X_CoSAR-TS_Demo"><span class="tocnumber">7.2</span> <span class="toctext">I-X CoSAR-TS Demo</span></a></li>
<li class="toclevel-2"><a href="#I-X_I-Globe_Demo"><span class="tocnumber">7.3</span> <span class="toctext">I-X I-Globe Demo</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Week_1">Week 1</span></h1>
<p><strong>Course Welcome</strong></p>
<p>Welcome to the course on AI planning.</p>
<p>Planning is one of the most important aspects of intelligent behaviour. The ability to identify and select appropriate activity, and to project forward the consequences of executing that activity, is fundamental to humans and intelligent robots alike.</p>
<p>The planning course lasts five weeks. In the first week of this course, we will formally define the problem solved by planning algorithms and talk about the context in which planning is used. After that in week two, we will describe some basic AI techniques used for problem solving in general, and planning problems in particular. This will leave you with a good understanding of the STRIPS planning system.</p>
<p>In week three, we will look at different, a different approach to the same problem, namely, plan space search. In addition, we will cover hierarchical planning, which addresses a similar problem and has been used in many real world applications. Week four gets us closer to the state-of-the-art in planning research, introducing some of the techniques used in the fastest planners available today. Finally, in week five, we will talk more about application areas in which they AI planning has been used, and some more advanced topics.</p>
<p>The course is going to make use of lectures on video, supplementary material on a wiki, and we'll give you some links to some AI planners to try, along with relevant online resources, and some recommended quite short readings. There'll be a number of quizzes and online assessments to monitor your progress.</p>
<p>We're going to encourage you to use the course social platform, which includes the discussion forums in the wiki. There's going to be a course Twitter tag and there's also a virtual world meeting space for you to try. Full details of all aspects of the social platform are on the course website.</p>
<p>We hope you will enjoy the course and will learn something useful.</p>
<h2> <span class="mw-headline" id="What_is_planning.3F">What is planning?</span></h2>
<p>This is the first segment of the artificial intelligence planning course. In this segment I will give you an introduction and overview to the problem we are addressing in the field of A.I. planning. This will include some examples and introduction to the basic techniques we will be using to solve planning problems.</p>
<p>So the first question I have to answer is, what is planning? And more specifically, what do we mean by planning in the context of artificial intelligence? I will answer this question by informally describing the planning problem that is the problem we are trying to solve in this field. I will then argue why this problem is important for artificial intelligence as a whole, and then continue to describe some techniques that will be used to solve this problem.</p>
<p>So let us start by looking at human planning and acting. Humans rarely plan before acting in everyday situations. Ask yourself, when was the last time I sat down and made a plan before acting? Chances are this will have been some time ago. This is because humans act without prior explicit planning quite often.</p>
<p>There's a number of situations where this is the case and here are some examples. When the purpose of my action is immediate, I don't need to make an explicit plan. For example, to record this lecture, I needed to switch on this computer. I know how to do this, so I just did it. I didn't need to make an explicit plan. The purpose of the action was immediate.</p>
<p>When performing well-trained behaviours, I also don't need to do explicit planning. For me, this would be driving a car. I know how to drive a car. I've done this many times, so I don't need to make a plan before I switch gears or before I turn the steering wheel. It's a well-trained behaviour, I don't need to plan.</p>
<p>When the course of action can be freely adapted, I also don't need to plan. This would be when I go shopping in the supermarket. I don't need to plan in which order I go through the different aisles, because I can always adapt my acting to what I've missed in previous aisles and just go there again. So the, the course of action can be freely adapted, means I don't need to plan.</p>
<p>A number of situations make it possible to plan, though, and here are some examples where planning is necessary, that is explicit planning. So, when I'm addressing a new situation, something that I haven't done before or haven't done often, then I need to do explicit planning.</p>
<p>An example of this would be moving a house. Everybody who has done a big move with furniture will know what this means. You need to organize a van. You need to organize people. You need to have an explicit plan in place before you can successfully move from one place to another.</p>
<p>Another situation is when the task you're trying to achieve is very complex. So, for example, when I was planning this course, I was doing explicit planning. This is quite a complex task, it involve ten hours of lecturing and many other things, so explicit planning was necessary. </p>
<p>Another type of situation where acting happens only after planning is when the environment imposes a high risk or a high cost. So if I'm the manager of a nuclear power station, I will do a lot of planning before I act, because it's very important what I do and the potential damage I can do with wrong action is high. So, I will do explicit planning to counteract that.</p>
<p>Also, when I'm collaborating with others, explicit planning can be extremely helpful. So, think of people who are trying to build a house. That's the people who are trying to put up the walls, trying to put in the plumbing, and of, the electricians. They all need to coordinate their activity and that means they all need to have an explicit plan for when they do what and in which order.</p>
<p>So the main lesson here is that people only plan when it's strictly necessary. We don't do planning when we don't have to. We only plan when we feel there's a benefit to it. And this is because planning is a complicated and time-consuming process.</p>
<p>There is a basic trade-off here. If we plan, we normally come up with a course of action that leads to better results, but there is a cost. So, if there is no benefit to be had from planning, we're often better off not planning. That is, often we seek only solutions or plans that are good enough for what we are trying to achieve, not optimal plans. So people only plan when it's strictly necessary.</p>
<p>Here is the definition for what we mean by artificial intelligence planning. Let me read this out for you first.</p>
<p>Planning is an explicit deliberation process that chooses and organizes actions by anticipating their outcomes and that aims at achieving some pre-stated objectives.</p>
<p>So I will try to take this apart for you now.</p>
<p>What this says is, planning is an explicit deliberation process. What this means is, to plan, we need to think. It's a mental process where we think about the actions that we are trying to do. </p>
<p>It also needs to be explicit thinking, which means, it's conscious. It's not a subconscious process that's going on, we are aware that we are doing this planning so we are thinking about planning. </p>
<p>In this thought process, we choose and organize actions. So, choosing means, we have some options available, things that we may be able to do. And we choose some of these actions, and we discard others, as part of the planning process.</p>
<p>We also organize these actions into a structure. That is, we could choose which actions to do before which other action, which actions to do in parallel, what the outcomes of each action will be, etcetera. So we organize them into some structure.</p>
<p>And, the way we do this is by anticipating the outcomes of the different actions that we have available as options. So we think about, what will the world be like if we do this action? And the result is either what we want or don't want and that's what the next point is.</p>
<p>The process aims at achieving some pre-stated objectives. So there are things that we want to have true in the world, these are our objectives, and by anticipating the outcomes, we can compare the world states as they will be when we execute an action to the ones in which the objectives we try to achieve are satisfied.</p>
<p>So that is what we mean by planning. Planning is an explicit deliberation process that chooses and organizes actions by anticipating their outcomes and that aims at achieving some pre-stated objectives.</p>
<p>Artificial intelligence planning now is the computational study of this deliberation process. So what we're interested in is the thinking about plans, the reasoning about actions that takes place when we are planning and we are trying to build a computational model of this process.</p>
<p>Now that I've defined what we mean by planning, I want to explain to you why it is so important to study planning in artificial intelligence.</p>
<p>The goal of artificial intelligence is really twofold, there's a scientific goal and an engineering goal. The scientific goal of A.I. is to understand intelligence, and the key observation here is, that planning is an important aspect of intelligent behaviour. So, if we observe some intelligent behaviour, we assume that there is an underlying plan and we assume that this plan is the result of some planning. So, to understand intelligence, we need to understand planning, which is part of intelligence. In that sense, understanding planning directly contributes to the scientific goal of A.I..</p>
<p>The other goal of A.I. is the engineering goal, which is to build intelligent entities, that is we want to build robots or other entities that exhibit intelligent behaviour. And if this is to be intelligent to us, this needs to involve actions that are carefully chosen and organized as we do in planning. So what we do in planning is we build models of how this planning works and these models are software models, so we can build them into our intelligent entities as components. So planning directly also contributes to the engineering goal of A.I. And just as a side remark, the robot you see here is the Shakey robot that was built in the late 60s and that was one of the first robots that used an actual planner to come up with its actions. </p>
<p>There are really two different types of planning, domain-specific and domain-independent planning. In domain-specific planning, we use specific representations and techniques that are adapted to each problem we are trying to solve. There are a number of important examples for this type of planning, domain-specific planning, for example, path and motion planning. If we are trying to navigate a robot through a two-dimensional or three-dimensional space, we need to come up with a path through that space, that gets the robot from one location to another. And to do so, a number of algorithms have been developed to, to make sure that the robot doesn't bump into other objects or will fit through narrow passages. All these algorithms are highly specific and very efficient.</p>
<p>Another example is perception planning. If we try to understand a given situation a robot may have to wander around in a scene and observe different aspects of different angles to understand what is going on. And again, there are highly specific algorithms that have been developed for this type of problem.</p>
<p>Manipulation planning is another such problem where we are trying to, for example, assemble an object from different parts and that needs to happen in a specific order for it to work.</p>
<p>Also, natural language generation uses highly specific algorithms for planning, namely the planning of utterances that lead to communicating, as given subject.</p>
<p>The point is in all these domains, we have specific algorithms that we use to efficiently solve a specific problem.</p>
<p>On the other hand, there's domain-independent planning. And there, we use generic representations and techniques to solve the generic planning problem. The advantage of this is that it saves effort, so we don't need to reinvent the same techniques for different problems all the time. We can always reuse the same planning algorithms.</p>
<p>The disadvantage is that, this means planning from first principles and is often relatively slow, but it also leads to a general understanding of planning and as I've just explained, that's the scientific goal of artificial intelligence.</p>
<p>The important lesson here is that domain-independent planning complements domain-specific planning. Domain-specific planning is good for specific problems where highly efficient solutions are required. Domain-independent planning is good if we need to plan from first principles for the type of situation I've explained earlier, situations we have never seen before for example. So the two types of planning complement each other.</p>
<p>But in this course, we will focus on techniques for domain-independent planning. So here's a little quiz to test your understanding so far. The following five statements are either true or false. Please tick the box for the statements that are true.</p>
<p>[inline quiz]</p>
<p>The first statement, people only plan when they have to because the benefit of an optimal plan does not justify the effort of planning is true.</p>
<p>The second statement for humans planning as a subconscious process, which is why computational planning so hard is false. The reason is that planning is not a subconscious process. We have defined planning as the explicit deliberation process, so it needs to be conscious.</p>
<p>Third statement, planning involves a mental simulation of actions to foresee future world states and compare them to goals, that statement is true.</p>
<p>The fourth statement, in artificial intelligence, planning is concerned with the search for computationally optimal plans, that statement is false. We're not only after optimal plans, we also want to sometimes find out whether a plan exists at all, whether it's optimal or not.</p>
<p>Finally, domain-specific planning is used when efficiency is vital, whereas domain-independent planning is good for planning from first principles. That statement is true again.</p>
<h2> <span class="mw-headline" id="Conceptual_Model_for_Planning">Conceptual Model for Planning</span></h2>
<p>You should now understand what we mean by planning in AI.</p>
<p>Next, we will formalise this understanding of planning by means of a conceptual model for planning.</p>
<p>This conceptual model will be a state-transition system.</p>
<p>Before I introduce the conceptual model that underlies planning, I want to talk to you about conceptual models in general and why they are a good idea.</p>
<p>So, what is a conceptual model?</p>
<p>A conceptual model is a theoretical device for describing the elements of a problem.</p>
<p>What this means is it helps us to formalize the problem we are trying to solve.</p>
<p>This is good for a number of things.</p>
<p>For example, we can explain the basic concepts with this model so it helps us to define what the objects are that we are manipulating during problem solving.</p>
<p>It also helps us to clarify some assumptions.</p>
<p>What constraints are imposed by this model is clarified by writing down such a model.</p>
<p>We can also use it to analyze requirements, so we can look at the representations we need to develop to represent the objects that we're manipulating during problem solving.</p>
<p>Also, we can prove semantic properties with a theoretical device like this.</p>
<p>The most important properties for algortithms we're interested in our soundness and completeness and they require a semantic foundation which is given by a conceptual model.</p>
<p>What a conceptional model isn't good for, is developing efficient algorithms and other computational concerns.</p>
<p>So, we cannot immediately derive planners from the conceptual model.</p>
<p>But the conceptual model we are using and planning is called a state-transition system.</p>
<p>Formally, a state-transition system is defined as a 4-tuple consisting of four components, S, A, E, and gamma.</p>
<p>I will now explain these components in turn.</p>
<p>The first component, S, is a finite or recursively innumerable set of states.</p>
<p>So, these are all the possible states the world can be in.</p>
<p>The set can be finite or recursively innumerable, which means infinite.</p>
<p>But in most of the examples we'll be looking at, we have only finite sets of states so don't worry about the second part for now.</p>
<p>The second component is a set of actions.</p>
<p>Actions are the things an agent can do to change the state of the world.</p>
<p>The third component is a set of events.</p>
<p>Events can happen in the world and are not under the control of an agent, but events, too, can change the state of the world.</p>
<p>The fourth and most complex component of a state-transition system is the state-transition function, gamma.</p>
<p>Gamma takes two things.</p>
<p>It takes a state, a state of the world as input, and it takes an action or event.</p>
<p>So, this second component is the union of all the actions and events and one of those is the second argument to the state-transition function.</p>
<p>The result of applying the state-transition functions then, is another set of states.</p>
<p>So, this notation here, 2 to the s, just denotes the power set of all possible states.</p>
<p>Which means an element of the set is, itself, a set.</p>
<p>A set of world states.</p>
<p>So, the state-transition function takes a state, an action or event and gives us all the possible states that may be the result of applying this action, or this event happening.</p>
<p>We can now use this definition to define some other concepts formally.</p>
<p>For example, applicability, we can say that an action A is applicable in a state S, if gamma of S and A is not empty so if there is at least one state that is the result of applying this action in the given state.</p>
<p>And when we apply an action A in a state S, this will take our state-transition system to a new state S prime.</p>
<p>And S prime must be an element of gamma of S and A.</p>
<p>Another way to look at a state-transition system is to view it as a graph.</p>
<p>Suppose we are given a state-transition system S, A, E, and gamma, then we can define a directed labeled graph G, that consists of nodes NG and edges EG.</p>
<p>The nodes of this graph are simply the world states that are possible in this state-transition system.</p>
<p>NG is equal to S.</p>
<p>And the edges in this graph correspond directly to state transitions defined by the state-transition function.</p>
<p>So, we have an arc from a node, s, to another node, s prime.</p>
<p>So, this is and edge in this graph and that is labeled with label u, which is either an action or an event, if and only if.</p>
<p>The state s prime is the result of applying u in s.</p>
<p>u can be action or event so we have a transition from here to here with label u.</p>
<p>So, a state-transition graph consists of nodes that correspond to world states and edges that correspond to state transitions.</p>
<p>Let me illustrate a state-transition system with a very old problem that has been used many times in AI, the missionaries and cannibals problem.</p>
<p>In this problem we have a river.</p>
<p>And on one side of the river we have three missionaries and three cannibals initially.</p>
<p>The missionaries are black triangles and the cannibals are red circles here.</p>
<p>There is also a boat available and in this boat, can be up to two people.</p>
<p>And they can use this boat to cross the river.</p>
<p>Now, the problem is, if the cannibals ever outnumber the missionaries on either of the banks of the river, then the missionaries will get eaten by the cannibals.</p>
<p>And we don't want that.</p>
<p>So, you can see in the initial state, there's an equal number of missionaries and cannibals on one side and no missionaries or cannibals on the other side, so there's no problem.</p>
<p>The planning problem now is to come up with a sequence of actions that carries all the missionaries and cannibals safely across the river, to the other side.</p>
<p>This system can be described by a state-transition system.</p>
<p>And if you're not familiar with this type of system, I would advise you to now try to define this as a state-transition system.</p>
<p>Specifically, you are trying to see what are the world states that are possible here, what are the actions and what are the events that can happen in this problem.</p>
<p>The state-transition function is best defined as a graph.</p>
<p>And, if you've sit down for about half an hour, I'm pretty sure you can come up, come up with a graph that describes the whole state-transition graph for this problem.</p>
<p>So, if you want to do this little exercise, you need to pause the video now.</p>
<p>So, here is my version of the state-transition graph for the missionaries and cannibals problem.</p>
<p>To define this as a state-transition system, we have to define the four components.</p>
<p>The first component is the set of states S.</p>
<p>And that can be defined as the different world states we see here.</p>
<p>And these are all the squares, rectangle that are drawn here.</p>
<p>there are sixteen different world states and they are denoted by these rectangles.</p>
<p>So, this is the initial state, as we've seen in the previous slide, where all the missionaries and cannibals are on the left-hand side of the river.</p>
<p>And over here on the right, we have the gold state.</p>
<p>And in this gold state, all the missionaries and cannibals are on the right-hand side of the river.</p>
<p>And the second component of a state-transition systems are the actions that are possible.</p>
<p>In this case, there are five different actions.</p>
<p>And I've denoted them here with the labels that occur on the different state transitions.</p>
<p>So, there's two types of actions, namely, actions with one person in the boat, and actions with two people in the boat.</p>
<p>The actions with one person in the boat are the ones where we have one missionary or one cannibal in the boat, or we can have two people in the boat.</p>
<p>This can be two missionaries, two cannibals or one missionary and one cannibal.</p>
<p>It's denoted here by 1m1c.</p>
<p>So, these are the five possible actions that we have to to do something in this system.</p>
<p>I don't need to denote where the boat is.</p>
<p>Because the boat can only cross from one side of the river to the other.</p>
<p>The set of events is empty for the state-transition system.</p>
<p>And finally, the state-transition function is defined by all the arcs that make up the, the lines between the different state here.</p>
<p>Note in this specific problem, all the arcs are bidirectional.</p>
<p>Which means, with the same action, we can go to one state and then back to the original state.</p>
<p>So, this is one arc here, and this is one, this is one.</p>
<p>And all these arcs together make define the state-transition function.</p>
<p>And that concludes the definition of the state-transition system.</p>
<p>A state-transition system is useful because it describes all the possible ways in which our system may evolve as a result of applying actions or events happening.</p>
<p>But what we want to do is solve planning problems and the solution to a planning problem is a plan.</p>
<p>And by a plan, we mean a structure that gives appropriate actions that we can apply in the initial state of our problem such that it gets us to a different state in which our objective that we're trying to achieve, as part of the planning problem, will be achieved.</p>
<p>A simple example of such a structure would be to have a sequential list of actions that we need to perform in order.</p>
<p>A more complex structure could be a function that maps states to actions so that when we are in a given state, we can use that function to decide what action to apply.</p>
<p>A plan implicitly describes a path through, through our state-transition graph.</p>
<p>So, when we execute a plan, we expect to end up in a state in which our objective is satisfied.</p>
<p>There are different types of objectives that can be defined for planning, and I will give you some examples now.</p>
<p>The simplest way to define an objective is simply to have a gold state.</p>
<p>This can be an individual gold state that is named, we've seen this in the missionaries and cannibals problem, or it can be a set of gold states that means one of those states is one that we want to reach.</p>
<p>An objective can also include some constrains on itermediate state through which we're passing on the way to the goal, for example, we can have states that we don't want to go through that we need to avoid as part of the objective.</p>
<p>A more complex objective could also come with a utility function for each state and tells us that we have to maximize the utility on our way to the goal.</p>
<p>As you can see, an objective can be quite complex.</p>
<p>A completely different view of an objective would be to not try achieve something but to perform a given task.</p>
<p>So, a good example of this is when you are going on a holiday.</p>
<p>You're not really trying to change the state of the world.</p>
<p>You want to end up back in the same state where you started.</p>
<p>But you want to do something in the time where you go on holiday.</p>
<p>And that's a task that needs to be performed.</p>
<p>Probably, the most common reason for solving planning problems is that we want to execute the resulting plans.</p>
<p>And here is the model for how planned execution might actually work.</p>
<p>So, we have a planner that is given a description of the state-transition system that tells the planner how the world may evolve.</p>
<p>We're also giving this planner the initial state.</p>
<p>That is, the state in which the world is in and some objectives that tell the planner where we want to be.</p>
<p>The planner then solves this planning problem and generates a plan which is passed to the controller for execution.</p>
<p>The controller takes this plan and executes the actions in this plan.</p>
<p>So, it has to extract the next action to be executed and passes this to the system.</p>
<p>The execution of the action then changes the state of the actual system that we're trying to manipulate.</p>
<p>For example, the real world.</p>
<p>And hopefully, our system is consistent with the description of the system that was given to the planner to generate the plan that we're now executing.</p>
<p>But the system is not only changed by the actions we are taking that are controlled by the controller, it is also changing because of events that are happening.</p>
<p>For the controller to take appropriate actions, it usually needs to know what state the system is actually in and to do so it has observations which are going from the system to the controller.</p>
<p>We model observations through the observation function eta which maps a state to set up observations that can be made in the state.</p>
<p>Quite often, the world is not fully observable, and in this case, the set of observation does not allow us to immediately infer which state we are in.</p>
<p>So, a given set of observation makes it possible that we are in a number of states, and this is what is called the belief state of the controller.</p>
<p>Now, the model we've just seen is not very realistic, because the real world on which we are executing our plans is often different from the description of the state-transition system that we are giving to our planner.</p>
<p>So, those two are not identical.</p>
<p>The reason is that this description we're giving to the planner is an abstraction.</p>
<p>It leaves out many details about the real world which make planning possible.</p>
<p>And then, when we execute the plan, things may go wrong because the two models are not the same.</p>
<p>A more realistic model is called dynamic planning, in which planning and execution are actually interleaved.</p>
<p>What is different in this model is that the controller has to do something called plan supervision and that means, it has to detect when observations differ from expected results.</p>
<p>So, it expects the world to be in a certain state as a result of an action, but it can observe that it isn't.</p>
<p>What it can do, in this case, is plan revision.</p>
<p>That is, we take the existing plan and try to change it in some way to take into account the new state.</p>
<p>This can be done by the controller for very simple cases or it has to be done by the planner for more complex cases.</p>
<p>In this case, the controller has to pass an execution status back to the planner, so that the planner can generate a new plan that is passed to the controller.</p>
<p>And that takes into account the change that has happened.</p>
<p>In the worst case, the planner will have to re-plan that is, it will have to create a completely new plan from scratch for the given problem.</p>
<p>Dynamic planning then, closes the loop between the planner and execution by passing back the execution status to the planner for replanning or plan repair.</p>
<h2> <span class="mw-headline" id="Planning_and_Search">Planning and Search</span></h2>
<h3> <span class="mw-headline" id="a_Planning_and_Search">a Planning and Search</span></h3>
<p>We have now seen a conceptual model for planning, namely, the state transition system.</p>
<p>This helped us formulize the problem we are trying to solve in planning.</p>
<p>A technique that is used almost everywhere in planning, and in many other areas of AI is called search.</p>
<p>And this is what we will be looking at next.</p>
<p>Before we go in to the details of search algorithms, I briefly want to talk about the types of problems we will see on this course.</p>
<p>Namely, toy problems versus real-world problems.</p>
<p>Toy problems are characterized by a description that is concise and exact.</p>
<p>The description being concise allows me to describe the problem in one slide quickly.</p>
<p>The description being exact means there shouldn't be too much ambiguity about what the problem is trying to do.</p>
<p>Toy problems are often used for illustration purposes, for example, on this course.</p>
<p>They are also used to compare the performance of different search algorithms.</p>
<p>Toy problems have two interesting properties.</p>
<p>Namely they are rich and simple.</p>
<p>By rich, we mean they're anything but trivial to solve.</p>
<p>And by simple, I mean, they can be described easily and precisely.</p>
<p>Real-world problems tend to be very different.</p>
<p>To begin with, there is no single agreed-upon description for most real-world problems.</p>
<p>That means if we were to use real-world problems in this course, I would spend a lot of time describing what the actual problems is and describing the details that need to be addressed in each problem.</p>
<p>However, toy problems are good as mental exercises.</p>
<p>But real-world problems, people care about the solutions of those.</p>
<p>The missionaries and cannibals problem we have seen earlier clearly falls into the category of toy problems.</p>
<p>Now, before we go into search algorithms, we need to characterize what constitutes a search problem, and here are the four components that characterize a search problem.</p>
<p>The first component is the initial state.</p>
<p>This is simply the state of the world from which we start our search.</p>
<p>In the missionaries and cannibals problem, this was the state where all the missionaries and all the cannibals and the boat were on the left-hand side of the river.</p>
<p>Next, we need a set of possible actions.</p>
<p>Not every action will be applicable in every state, so we will also need to define the applicability conditions for actions in states.</p>
<p>We can define the actions through a successor function.</p>
<p>A successor function maps a state into a set of pairs of actions and state.</p>
<p>So, for each state of the world, the successor function maps it to all those actions that are applicable, together with the states that result from the action being applied in the original state, and leading us to this new state.</p>
<p>Together, the successor function and the initial state span a state space which corresponds roughly to the states transition graph we have seen earlier.</p>
<p>The state space is a directed graph with states as nodes and actions as labels on arcs.</p>
<p>The third component of a search problem is the goal.</p>
<p>This can be either an individual state, in which case, we have just one unique goal state, or in general, we can have a function that tests whether a given state is a goal state or not, which allows us to have many different goal states.</p>
<p>A solution to a search problem is simply a path in the state space from the initial state to a gold state.</p>
<p>The final component of a search problem is the path cost function.</p>
<p>This simply assigns a cost value to each possible path in the state space.</p>
<p>we use this when we're doing optimal search.</p>
<p>When we're looking for an optimal path, we're looking for the path with the lowest cost.</p>
<p>A simplification that is often used in planning is that each action has a fixed cost and that the cost of a path is simply, the sum of the step cost, the cost of each action.</p>
<p>Now, you will have noticed that there are some similarities between what we've just defined and stay transition systems, and the next quiz will give you little time to think about those similarities and differences.</p>
<p>Going back to the missionaries and cannibals example, let's try to define this as a search problem.</p>
<p>So, we need to define the four components, which were the initial state which was given to us as part of the problem.</p>
<p>And the third component was the goal state which was also given to us as part of the problem.</p>
<p>Then, the fourth component is the path cost function.</p>
<p>And there, we simply assume that every step has the same cost.</p>
<p>So, the only thing that is slightly more complex is the successor function.</p>
<p>And we can define this as a table as shown here.</p>
<p>So, what this table does is simply enumerate all the mappings of states to set of action state pairs.</p>
<p>What we have on the left-hand side is a state.</p>
<p>So, this is the initial state as defined in the problem.</p>
<p>And I'll decipher this for you quickly.</p>
<p>This has two components.</p>
<p>It says, what's on the left-hand side and what's on the right-hand side.</p>
<p>On the left-hand side, we have the three missionaries, we have the three cannibals, and the boat.</p>
<p>And on the right-hand side, we have no missionaries and no cannibals initially.</p>
<p>So, that is the initial state.</p>
<p>We describe everything that's on each side of the river.</p>
<p>This is mapped to three pairs.</p>
<p>One, two, three.</p>
<p>each of which consists of an action and another state.</p>
<p>So, let's look at the first one.</p>
<p>In the first case, we ship two cannibals across the river.</p>
<p>And this gives us, on the left-hand side, three missionaries, one cannibal, because we ship two cannibals across.</p>
<p>On the right-hand side, zero missionaries, and two cannibals, plus the boat, which is also now on the right-hand side.</p>
<p>Altogether, we see there are three different pairs here because, there are three applicable actions in the initial state.</p>
<p>In the next row, we have a different state.</p>
<p>And we, again, define what can be done in this state, these are the two actions, and the resulting states that we get if we apply these actions.</p>
<p>This is actually, the same state that we've looked at just now.</p>
<p>This state here became the state there.</p>
<p>So, we need to do this for the whole set of states that are available for the whole states base.</p>
<p>Which means we need to go through a whole list of states and define where we can go from these states.</p>
<p>And if we had completed this table, we had defined the whole state-transition function and this concludes the definition of the surge problem.</p>
<p>In contrast to this toy problem, we will now look at a real-world problem, namely, touring in Romania.</p>
<p>What you see here is a rough map of the country with some of its major cities.</p>
<p>To define touring Romania as a search problem, we again have to define the four components of a search problem.</p>
<p>So, let's start with the initial state.</p>
<p>Suppose we are in the city of Arad, that's where we start our tour of Romania.</p>
<p>The next thing we need to define are the possible actions that we can take in this problem.</p>
<p>Since we are looking at a map, it suggests that we can drive from one city to another.</p>
<p>But presumably, when you're touring a country, that's not all you want to do.</p>
<p>You probably also want to do some sight seeing, or you need a hotel, so you need to check into that hotel, you need to book a hotel.</p>
<p>there are many different types of actions that you want to do when you tour a country and you can see, this is a real world problem.</p>
<p>We already have the first problem, deciding what the possible actions are.</p>
<p>The same applies for the goal.</p>
<p>When you're going on holiday somewhere, to tour a country or a region, what is your actual goal?</p>
<p>Well, presumably, you want to end up in the same state that you started off, namely, at home.</p>
<p>So, that can't really be the goal.</p>
<p>You want to have something else that you need to describe as your goal, something that happens along the way.</p>
<p>But it's very hard to describe because this is a real-world problem.</p>
<p>What is the little bit easier is probably the cost that is associated with each action and that will mostly be time and money.</p>
<p>As a side remark, the touring in Romania problem is taken from a famous AI textbook, by Russell and Norvig.</p>
<p>And if you want to learn more about search, I recommend that you have a look at this book.</p>
<p>The reference to this book will be given on the course website.</p>
<p>So, what you have just seen is that problem formulation is itself a complex problem.</p>
<p>And its the problem of defining the four components of a search problem.</p>
<p>In problem formulation, we have to decide what actions we want to consider and what states we want to consider in the world.</p>
<p>Probably the most difficult decision there is, at what level of abstraction are we looking at the world?</p>
<p>What detail do we want to take into account and what detail do we want to omit?</p>
<p>So, looking at the touring Romania examples, we could define actions that describe how we drive a car that, say, we have to turn a steering wheel by one degree left or right and we have to move our foot from one pedal to the other.</p>
<p>But this would probably give us too much irrelevant detail and there's a lot of uncertainty involved in that, too.</p>
<p>So, we probably don't want to go to that lower level of detail.</p>
<p>Also, if we try to solve our problem at that level of detail, we would come up with a solution plan that has many, many steps.</p>
<p>If we define the problem at a higher level of abstraction, say, we consider actions that drive us immediately to another big city.</p>
<p>Then, we have the problem that we need to decide how to execute such an action when we come to plan execution.</p>
<p>Also, if this is the level of abstraction we consider driving to another city, we can't really talk about things we do in between, between two cities.</p>
<p>So, deciding at what level of abstraction we model our actions and states is probably the most important decision in problem formulation.</p>
<p>But to help us with problem formulation, there are number of assumptions that search engines and planners often make and if we take those in to account during problem formulation, we may have a much easier task.</p>
<p>The first assumption is that we have a finite number of world states.</p>
<p>This implies that we cannot have continuous variables in those states, as this would automatically give us an infinite number of states.</p>
<p>Then, we will assume that the world is fully observable.</p>
<p>Which means everything that is relevant to us in the state of the world can be seen and will be known to the algorithm to our planner that we're using.</p>
<p>The next assumption is that the actions that were using are deterministic, which means each action has one well-defined outcome.</p>
<p>There's no uncertainty which state we'll be in after we apply an action.</p>
<p>The final assumption is that the world is static.</p>
<p>Which means, there are no events so nothing happens that we don't do.</p>
<p>Only the actions that we do modify the state of the world.</p>
<p>So, these are assumptions about the environment, but we will also make some other assumptions that are useful for planning.</p>
<p>The first one is that we have restricted goals.</p>
<p>And that means that our goals are either given to us as a single state that we want to be in or a set of states that are all gold states.</p>
<p>The second assumption is that the solution we are looking for is a sequential plan, so a solution is a linear list of actions.</p>
<p>There's no parallel activity in our plan.</p>
<p>We shall also not consider time explicitly but only implicit, which means activities will not have a duration for the time being.</p>
<p>And the final assumption is that we're doing offline planning, that is, the state transition system which underlies our planning process is not changing while we're doing the planning.</p>
<p>Okay, time for another quick quiz to give you time to think about this.</p>
<h3> <span class="mw-headline" id="b_Planning_and_Search">b Planning and Search</span></h3>
<p>So, now we have seen what search problems look like, we can turn towards search algorithms.</p>
<p>But before we describe the algorithm, I need to describe the data structure that we manipulate during the search.</p>
<p>And this is called a search node.</p>
<p>A search node is really a bookkeeping structure that encapsulates a state.</p>
<p>Note that I say search tree here because we will be using the search graph as a search tree.</p>
<p>This is simply to make the algorithms slightly easier to explain.</p>
<p>but there is a simple extension that you can come up with that turns this back into a graph search algorithm.</p>
<p>So, here is the data structure we're looking at.</p>
<p>Each search node consists of five things.</p>
<p>The first thing is the state, the state that is encapsulated in the search node.</p>
<p>So a state corresponds to a configuration of our world, and a node is a place in our search tree.</p>
<p>Note that two search nodes may contain the same state.</p>
<p>The next component of a search node, is the parent node, that we store in each node.</p>
<p>That is the immediate predecessor in the search tree, the parent in the tree.</p>
<p>The only node that doesn't have a parent is, of course, the root node in a tree.</p>
<p>Then we have to store an action in a search node.</p>
<p>That is the action that gets us from the parent node to this node.</p>
<p>Or, more precisely.</p>
<p>From the parents nodes state to this state.</p>
<p>Then we also want to store the path cost, in a search node.</p>
<p>That is the total cost of the path leading to this node in the tree.</p>
<p>And finally, we can store the depth in the tree as part of the node, which allows us to do for example, a simple cutoff, if we go too deep in the search tree.</p>
<p>So these are the five components, that make up a search node.</p>
<p>The state.</p>
<p>The parent node.</p>
<p>The action.</p>
<p>The path cost, and the depth.</p>
<p>So now, we get to the first algorithm that you will see in this course.</p>
<p>This is the general tree search algorithm.</p>
<p>The algorithm is implemented as a function tree search, that takes a search problem as input, and a search strategy.</p>
<p>I will get to the search strategy in a minute.</p>
<p>The search problem is simply what we've seen before, the thing that consists of four components.</p>
<p>The initial state, the successor function, the goal, and the path cost function.</p>
<p>The algorithm starts by creating a new search node.</p>
<p>So that's the structure we've seen in the previous slide, from the initial state of our search problem.</p>
<p>And this is stored in a set of nodes.</p>
<p>These are set braces.</p>
<p>and the set is called the fringe.</p>
<p>It is often also called the set of open nodes, as opposed to the set of closed nodes.</p>
<p>What this means is, these are all the nodes in our search tree that we have not yet explored.</p>
<p>And initially, we have not explored the initial state, and that's the only state we know about initially.</p>
<p>So what we do then is we go through a potentially infinite loop.</p>
<p>And the first thing we do in this loop, is, we test whether there are still nodes in our fringe that we can examine.</p>
<p>If there are no more nodes on the fringe, that means we've explored the whole graph, and we haven't come across a node that is a goal node.</p>
<p>So, in that case, we can return failure.</p>
<p>There is no solution to the search problem if we have explored all the nodes in the graph, and have not come across a goal node.</p>
<p>But initially, there will, of course, be at least one node, namely the node we created from the initial state.</p>
<p>So what we do in the next step, then, is we, we take our set of fringe nodes, and we select one node from the fringe, and we use the strategy to decide which node we will select first.</p>
<p>So this node is the next one we will explore in our search.</p>
<p>And by explore, I mean two things.</p>
<p>The first thing is, we apply the goal test to the state that corresponds to this node.</p>
<p>If this node is a goal node, that means we found a solution to our planning problem, to our search problem.</p>
<p>And we can stop the search here.</p>
<p>Note that this catches the case where out initial state was actually a goal state, because the first thing we do is we apply the goal test before we do anything else to this node.</p>
<p>If the gold task test has succeeded, we can simply return the path to this node, as this must be a solution to our search problem.</p>
<p>If our current node we are looking at is not a goal node, then what we have to do is we generate all the successors and we use the function expand here to do this.</p>
<p>So what we do is, we take the problem, and we take the node, and we apply the successor function that is defined as part of the problem to this node which gives us a set of actions and new states.</p>
<p>And each of these states can be turned into a new node.</p>
<p>Together with the action that led to that state.</p>
<p>And we expand the fringe so we add these new nodes to the fringe.</p>
<p>And this gives us our new fringe.</p>
<p>And, at that point, we go back to the beginning of the loop, and start again.</p>
<p>We look at the fringe, whether it's empty.</p>
<p>If it's not empty, we select a node from the fringe.</p>
<p>So this will be now a, a node at depth one.</p>
<p>Then we apply the goal test to that node.</p>
<p>If it's not a solution, then we have to do the same for that node, expand it, generate its successors, and so on, until we finally come to the point where either we've explored the whole graph, which means the fringe is empty, or we come to the point where a node is a goal node and passes the goal test and in that case our search is done.</p>
<p>Now there are a few subtleties, with this algorithm that I briefly want to go into.</p>
<p>The first one is that a tree corresponding to a finite search graph may be infinite.</p>
<p>Look at this very simple tree.</p>
<p>We have two nodes here.</p>
<p>And we can go from one to the other.</p>
<p>And then we can go back.</p>
<p>If neither of those two nodes is a goal node, that would give us an infinite loop.</p>
<p>We can always start here.</p>
<p>Then we add its successor to the fringe, which is this node.</p>
<p>Then we have only one node on the fringe.</p>
<p>But then we go back to this node, add this to the fringe.</p>
<p>We go here and here.</p>
<p>And our search tree will be infinite.</p>
<p>So, that means that this loop here.</p>
<p>May never terminate even if the search graph is finite.</p>
<p>And the second subtlety has to do with the strategy and that's what we will look at next.</p>
<p>The search control strategy is an effective method for scheduling the application of the successor function.</p>
<p>We have seen this in the algorithm.</p>
<p>The strategy tells us which node from the fringe we will select next to apply the successive function to, and generates its successors.</p>
<p>Now, the first thing to note here is that it's got to be an effective method.</p>
<p>So what we mean by that here is that the strategy must not take up too much time to decide which node from the fringe to expand next.</p>
<p>Ideally, it would take constant time.</p>
<p>What the strategy then does is determine the order in which we expand nodes, or the order in which we explore nodes in our tree, the order in which we go through our tree to look for a gold state.</p>
<p>Our aim, of course, is to produce a gold state as quickly as possible, so we want to descend down our tree to a gold state that is relatively close, and we come across that quite quickly.</p>
<p>So a perfect strategy would know where that gold state is an r tree.</p>
<p>But then, if we knew where the gold state is, we wouldn't have to search for it in the first place.</p>
<p>In general, a strategy that produces a gold state quicker than another is considered a better strategy.</p>
<p>And the way we have described the previous algorithm in the previous slide, with the strategy as an argument to the node selection.</p>
<p>This makes it a deterministic algorithm, as long as the strategy is deterministic.</p>
<p>Otherwise, without the strategy, you can read this as a non-deterministic algorithm.</p>
<p>The way a strategy can be implemented is by keeping the fringe nodes in a specific data structure.</p>
<p>A queue could be either a last in first out queue, or a first in first out queue, and that results in different search algorithms.</p>
<p>For example, the LIFO queue, is effectively a stack, which means our search proceeds by always exploring the node that has, that has been last been added to the queue, which means it does a depth first search.</p>
<p>It goes deeper into the tree before it examines the neighbors of a given node.</p>
<p>Feefo would give you a breadth first search by going to one level of the tree before it goes to the next.</p>
<p>But there are many, many more ways you can think of how to search and we will look at something called a heuristic in the next week.</p>
<p>just another example, you could also take an alphabetical ordering of the nodes, if you can't find some ordering relation between the nodes.</p>
<p>Another thing that is quite important is that in many search problems the complete tree is far too large to fit into a computer's memory, even with the kind of memory we have today.</p>
<p>So the search strategy determines which part of the search tree will be explored and will be in memory, and therefore it may determine whether we are successful at all.</p>
<p>Because if the search tree is too large for memory, we may not come across a goal node at all.</p>
<p>Now for those of you who are not familiar with search I recommend that you either go to the Russel and Norvik textbook that is mentioned on the website and have a look at the corresponding chapters or you should go through the programming exercise and implement the missionaries and cannibals problem as a search problem.</p>
<p>You can use either of those two queueing strategies mentioned there.</p>
<p>Lost and first out, or first and first out, and just see what happens when you apply these two strategies.</p>
<p>Also, a hint regarding repeated states.</p>
<p>To turn the tree search into a graph search, you have to remember all the nodes you've seen so far.</p>
<p>And the most effective way to do this is to add them to a hash table.</p>
<p>And before you add a note to the fringe again you check whether it is already in that hash table.</p>
<p>You should be able to do this in the programming language of your choice.</p>
<p>the missionaries and cannibals search space, as you have seen is very small, so the search should be instantaneous whatever you use.</p>
<p>So, have fun with that.</p>
<h2> <span class="mw-headline" id="Example_Problems">Example Problems</span></h2>
<p>We have now seen how planning problems can be formulated as search problems.</p>
<p>And we have also seen a basic algorithm that can be used to solve search problems.</p>
<p>We have also already seen some examples of search problems such as the missionaries and cannibals problem.</p>
<p>Now we shall look at some more example problems.</p>
<p>The first problem we will look at is a toy problem.</p>
<p>And it's a problem that has been around for a long time.</p>
<p>The sliding tile puzzle or sliding block puzzle looks essentially like this.</p>
<p>What we have is a grid.</p>
<p>Here, it's a three by three grid.</p>
<p>And in this grid, we have eight tiles.</p>
<p>That is, one square remains empty.</p>
<p>We can then shift the tiles in the grid.</p>
<p>But, of course, we can only shift them into the empty slot.</p>
<p>Leaving another slot empty as a result.</p>
<p>The tiles themselves are numbered one through eight, and our task is to bring them into the right order, and the right order is showing here on the right, and this could be some initial state from which we start.</p>
<p>So to formulate this as a search problem, we have to ask, what is the initial state?</p>
<p>And the initial state for this problem could be any configuration of the tiles.</p>
<p>So not just this one here shown on the left, but really any configuration you can think of.</p>
<p>The goal state is usually fixed depending on where you look there are different varieties of what the goal state should be like.</p>
<p>This is just one possible state that you see on the right where the tiles are in the correct order.</p>
<p>Sometimes, you'll see the middle square should be empty, sometimes it's another square that should be empty.</p>
<p>But there's usually one fixed goal state that much be reached in this puzzle.</p>
<p>The actions that are possible, and I've already told you this.</p>
<p>Are to move, a tile that is next to the empty space into the empty space.</p>
<p>So I could either move the eight here or the four up.</p>
<p>Or the six into the empty space.</p>
<p>In this case, for this puzzle there would be three possible actions in this state.</p>
<p>For the path cost, we simply assume that moving a tile has a unit cost, so all actions have equal cost.</p>
<p>So, that's it.</p>
<p>That's the definition of the eight puzzle.</p>
<p>There are also larger versions of this puzzle on a four by four grid, with fifteen tiles, known as the fifteen puzzle.</p>
<p>Or on a five by five grid with 24 tiles, known as the 24 puzzle, and so on.</p>
<p>The next problem is also a toy problem.</p>
<p>And it's known as the N queens problem in general, but we will look at the eight queens problem here.</p>
<p>And the problem, is to find a configuration for eight queens on an eight by eight chess board, such that none of the queens attacks any of the others.</p>
<p>For those of you who don't know chess, a queen is simply a chess piece that can be somewhere on the board.</p>
<p>And it can move along any diagonal, any column, or any row.</p>
<p>So, if we look, for example, at this queen here.</p>
<p>It can move anywhere along this diagonal, or this diagonal.</p>
<p>Or it can move anywhere in its row, or anywhere in this column.</p>
<p>So you can see, this queen attacks none of the other queens, and is attacked by none of the other queens.</p>
<p>If we look at this queen, however, we can see that if we move all the way along the diagonal.</p>
<p>This queen is attacked by this queen.</p>
<p>So this configuration shown here is not a solution to the problem.</p>
<p>Now you may wonder how this can be seen as a planning problem because what we're looking for is a configuration, so a static state.</p>
<p>And the answer is that we can look at this as a problem of reasoning about action.</p>
<p>When we look at this here, it says we have to place the queens on the chess board.</p>
<p>And we place the queens, one after another.</p>
<p>So the initial state is the empty chess board.</p>
<p>The actions we have available are placing queens onto the board.</p>
<p>And the goal state is any state where the queens don't attack each other.</p>
<p>Again we can assume a unit cost for the actions, so all actions are equally expensive.</p>
<p>And I'll give you a hint how this can be formulated a little more efficiently because, if we allow a queen to be placed on any board position, we have 64 different positions.</p>
<p>And this would create a pretty big search tree.</p>
<p>So what we can do is we say that the first action can only place a queen in the first column.</p>
<p>So we can only place a queen here.</p>
<p>The second action in our plan must place a queen in the second column.</p>
<p>And so on.</p>
<p>So our plan will definitely be eight steps long and we only have eight possibilities for each step in the plan.</p>
<p>So this defines the N queen's problem as a general search problem, or as a planning problem.</p>
<p>The next problem is more like a real world problem, and it is the dockworker robots problem that is also used in the book this, course is based on, so you will see this problem occur again and again.</p>
<p>The aim with this problem is to have one example that we can use to illustrate many of the techniques and algorithms that will be introduced in this course.</p>
<p>The advantage of this problem is that it is not trivial to solve, but it also can be described fairly quickly.</p>
<p>the informal description of this problem is this, we have a harbor in which we have several locations which may be docks or other places.</p>
<p>at these docks there may be ships, and we have storage areas for containers that need to be moved around at the docks or loaded onto ships.</p>
<p>We also have parking areas for trucks that can carry containers.</p>
<p>And they will be robots, in our cases, or trains that arrive with the containers.</p>
<p>There will also be cranes to move the different containers around.</p>
<p>They can load containers on to ships or robots or they can unload them from ships and robots.</p>
<p>And what we will be interested in is generating plans for the cranes and the robots that achieve certain configuration of containers that we give as goal states.</p>
<p>Now there are some people who say that block stacking or container stacking, which is essentially the same thing, is not a real-world problem.</p>
<p>So this is why I've included this picture here, so this proves that it is a real-world problem.</p>
<p>Now let's look at the state of the world in the dock worker robot example.</p>
<p>What we have in each state are locations and in this example there are two locations L1 and L2 and these locations are connected by paths along which the robot for example can move.</p>
<p>So these two locations are adjacent because they are connected by a path.</p>
<p>At each location we have cranes which can be used to move the containers around.</p>
<p>They can move the containers between the different piles that are available.</p>
<p>And here at this location L2, we see there are two piles, P2 and Q2.</p>
<p>In this case they are both empty.</p>
<p>There's no containers on these piles.</p>
<p>But at the bottom of every pile we will always have a pallet onto which we can stack the container.</p>
<p>So the pallet tells us where the bottom of the pile is.</p>
<p>A pile itself is an abstract object.</p>
<p>It doesn't necessarily need to have anything in it.</p>
<p>An empty pile isn't really something we can touch.</p>
<p>But it can have containers in it.</p>
<p>And containers are, of course, what we have the most of in most states.</p>
<p>So here in this example, we have six different containers.</p>
<p>They're called CA, CB, CC, CD, CE, and CF.</p>
<p>And they can be stacked on top of each other in a pile, as I've already explained.</p>
<p>There's no limit to how high a pile can be, despite the fact that it looks in this picture like the crane can only reach so high, but we will consider arbitrarily high stacks of containers.</p>
<p>Finally, what we have in these states are robots.</p>
<p>This is one robot here, though so there's only one robot.</p>
<p>That is an object that can be loaded with a container by the crane.</p>
<p>And then once it has a container on it, it can move to a different location.</p>
<p>It, of course, can also move, when it's empty, to a different location.</p>
<p>But there can only be one container on a robot at one time.</p>
<p>Also, at each location, we can only have one robot at a time.</p>
<p>We consider a location occupied when a robot is there.</p>
<p>So, I think that's pretty much all you need to know about the world states and the dock worker robot example.</p>
<p>But just to clarify this, not all states will have two locations, and six containers, and one robot.</p>
<p>We will consider a different world with many different numbers of robots, containers, or locations and cranes and they will give us more complexity to the problem.</p>
<p>You can probably guess what the different action types in this domain are, but here they are just to make sure that we are all on the same page and understand what they are.</p>
<p>The first action.</p>
<p>Is the move action and the move action moves a robot, that's the first argument in this action, from one location, the second argument, to some adjacent and unoccupied other location, L prime.</p>
<p>So as result of this action, the robot will be now in a different location.</p>
<p>That other location must be unoccupied and it must be adjacent, which means there must be a path that connects the two locations, L and L prime.</p>
<p>That was the only action that is to be done by the robot.</p>
<p>The other actions are all done by the crane.</p>
<p>So, the first one of those actions is to take action and we can take a container C, with an empty crane K, from the top of a pile.</p>
<p>And they must all be located at the same location L.</p>
<p>So this action as a result will have the crane holding the container and all these objects must have been at the same location obviously.</p>
<p>The river's action is to put down the container C that is held by the crane on top of a pile.</p>
<p>And they must again all be located at the same location L.</p>
<p>Two more actions, again, both to be done by the crane.</p>
<p>The one is loading a container.</p>
<p>But this will involve a robot, too.</p>
<p>So what we do is we load a container C, that is held by the crane K onto an unloaded robot R.</p>
<p>So the robot must not already have a container on it.</p>
<p>And, again, this must all be at the same location.</p>
<p>And the reverse action is to unload the container from.</p>
<p>The robot.</p>
<p>That's the robot.</p>
<p>And, again, the crane must be empty so that we can do this, and all of the objects must be at the same location.</p>
<p>So, these are the five action types that are available in the doc worker robot domain.</p>
<p>Notice that I said action types, because there can be many instances of these actions, depending on how I instantiate these parameters.</p>
<p>So if there's only one robot, then this robot may be the only one that can move, but it can move between different locations, and these are all different actions.</p>
<p>We will specify all this more formally when we have introduced an action description language, and that will be next week.</p>
<p>And here is a very simple example of what the state transition system that corresponds to the dark work or robot problem could look like.</p>
<p>You can see this is a very simple problem, because a large state space wouldn't fit onto one slide, so I had to reduce everything to one robot, one crane, one container, and two locations, which gives us six possible world states, and they're named here S0, S1, S2, S3, and so on, S4, S5.</p>
<p>The objects you see in these states are exactly the things I have just talked about.</p>
<p>So we have a robot here.</p>
<p>We have a crane.</p>
<p>And we have a container, a palette, and the two locations I just talked about.</p>
<p>And the actions are in principals.</p>
<p>Also, those I've just mentioned.</p>
<p>And they give us the state transitions.</p>
<p>And we've labeled them here, the state transitions.</p>
<p>So the take action gets us from state s zero to state s1.</p>
<p>And so on, put action would get us back to that state, we have move one action which moves the robot to location one and we have a move two action which moves the robot to location two.</p>
<p>As you can see from the state transitions, the system is static.</p>
<p>Which means there are no events happening.</p>
<p>All the actions are under our control.</p>
<p>Also, the system is deterministic.</p>
<p>Which means, every action leads to exactly one other state.</p>
<p>So there are no two transitions from one state that lead to different states given the same action.</p>
<p>If we do move one in this state, we always get to this state.</p>
<p>There's no other option.</p>
<p>This is a deterministic state transition system.</p>
<p>Like I said before you will see a lot more about the dock worker robot problem so I will stop here.</p>
<p>So this concludes this first segment of the course.</p>
<p>And here is a quick summary of what we've learned so far.</p>
<p>The first question we've looked at is'What is planning?'.</p>
<p>And more specifically'what is planning in AI?'.</p>
<p>And the answer we have come up with is that planning is an explicit deliberation process that chooses and organizes actions by anticipating their outcomes.</p>
<p>Planning in AI is the computational study of this deliberation process.</p>
<p>Next, we have looked at a conceptual model for planning, which helps us define the semantics of planning problems.</p>
<p>To this end, we have defined the state transition system, which consists of four things.</p>
<p>A set of states, a set of actions, and a set of events were the first three components.</p>
<p>And the most complex one is the state transition function, which maps a given state and an action or event, to another set of states.</p>
<p>Then we have looked at the connection between planning and search.</p>
<p>We have seen that planning problems can be phrased as search problems.</p>
<p>Search problems can be defined by an initial state, a set of actions that are possible in different states, a set of goal states, and a path cost functions that tells us how much the individual actions cost.</p>
<p>And finally, we've seen a number of example problems that can all be phrased as search problems.</p>
<h2> <span class="mw-headline" id="Context_-_Practical_Systems">Context - Practical Systems</span></h2>
<p>This section of the course will look at the very wide range of research and development areas that have been explored in AI Planning.</p>
<p>It'll put AI Planning techniques in the context of domain modeling and plan representation.</p>
<p>Consider engagement with users, task assigners, and decision makers, who must select between plan options.</p>
<p>And would include the important aspect of plan execution for practical systems.</p>
<p>The course logo shows a number of applications of practical AI planners over the years.</p>
<p>The Nonlin planner was used in the mid 1970s to generate project plans for electricity to [INAUDIBLE] overhaul.</p>
<p>The project plans in this case were prepared well in advance, because it's costly to have these machines out for any length of time.</p>
<p>But while the repair's taking place typically problems are found, extra maintenance operations need to be injected.</p>
<p>So the plans had to be adjusted as you went along.</p>
<p>And Nonlin was able to do that.</p>
<p>In the late 1970's, Steve Vere at NASA's jet propulsion laboratory created the divisor planner, which was used to generate action sequences for the Voyager spacecraft.</p>
<p>Though it wasn't used for uploading live action sequences to Voyager.</p>
<p>Deviser was based on the Nonlin design.</p>
<p>But added the ability to represent time windows on the activities.</p>
<p>Which is important for this kind of robotic application.</p>
<p>Nonli'ns hierarchical task network approach was also used in some of the earlier research on the robots in Japan.</p>
<p>Assembly, integration and tests of the payload bay for the European Ariane rockets was carried out using a planner based on the O-Plan design.</p>
<p>O-Plan has also been used in a wide range of applications in emergency response and search and rescue.</p>
<p>Edinburg  AI planners have also been used in applications as diverse as help desks, tanker delivery, and many others.</p>
<p>Even the earliest AI planners were used in realistic and practical applications.</p>
<p>The STRIPS planner from the early 1970s was used to control the spShakey robot.</p>
<p>And, as you can see from this table, there's a range of planners over the decades which have been applied to a wide range of application areas.</p>
<p>And we're going to cover some of those in a later module of this course.</p>
<p>As part of this cause, we're going to encorage you to look at a number of readings.</p>
<p>In particular, there's two reviews of AI planning, which we hope you'll find useful.</p>
<p>One is from the 1990's, so it's quite dated, but it does include a lot of the work on those early planners and some of the formative techniques as used in them and that you'll learn about in this course.</p>
<p>And that's the Hendler, Tate in Drummond paper in AI magazine, on AI planning, systems and techniques.</p>
<p>Is also a review, a decade later, by Wilkins and desJardins, on a call for knowledge-based planning, where techniques of knowledge-based systems, and planning were being brought together.</p>
<p>Full details of these readings and the locations where you can find the PDF copies of them will be available in the cource wiki.</p>
<p>Then there's a number of readings, some of them very short readings.</p>
<p>on specific planners and their applications.</p>
<p>And we hope you might dip into these during the course.</p>
<p>If you've got time to read just a couple of these, these are the ones we'd suggest.</p>
<p>The initial review of AI Planners to 1990.</p>
<p>And a very short paper on O-Plan one of the Edinburgh planners, which looks at a wide range of techniques and applications that were in use in that, in that system.</p>
<p>There's a diagram in the 1990 review paper which tries to trace some of the historical connections between the different planners.</p>
<p>The techniques they drew on and how they build on one another.</p>
<p>It's worth looking at that in detail.</p>
<p>Perhaps you could pause the video at this point and take a good look at some of the techniques and areas in there.</p>
<p>There's an online version of this diagram also available at high resolution if you can't see it in the video that you're using.</p>
<h2> <span class="mw-headline" id="Context_-_Tasking.2C_Execution.2C_Agents_and_Plans">Context - Tasking, Execution, Agents and Plans</span></h2>
<p>Planning usually occurs in a human context where tasks or objectives are assigned, where plan execution must take place.</p>
<p>We introduced earlier a model for planning and showed some simplifications to it.</p>
<p>We explained that a richer model is needed for realistic planning in dynamic situations.</p>
<p>In such a context, we've got to observe the performance of activity in the world, and try to observe and interpret the effects of our executed activities there.</p>
<p>This can allow for possible plan revision and replanning where that's necessary.</p>
<p>O-Plan for example, could be configured with three separate planning agents.</p>
<p>Which represented reasons about plans at different levels.</p>
<p>The first was concerned with the human level of task description, setting objectives, giving guidance, or overall constraints.</p>
<p>A second level is a more technical planning level which could propose options to meet the state's objectives, and allow for choices between those options.</p>
<p>And a third level supported plan execution and monitoring.</p>
<p>And could facilitate local planned repair where that was feasible.</p>
<p>However, note that in each case here, each agent has a similar structure which is supported by the open planning architecture, in which the O-Plan planner was built.</p>
<p>For example, the multi-agent planning architecture platform is the basis for the SRI International Side Planner.</p>
<p>The Open Planning Architecture is the basis for O-Plan designed to handle multiple plan roles and levels as you just seen.</p>
<p>And the I-X platform is intended to port multiple types of command, sense-making, analysis in planning for instances to build the I-plan  planner, as well as decision making, execution, and communication between agents even in mixed agent frameworks.</p>
<p>Several practical AI planning systems have been used in emergency response applications.</p>
<p>Often working in the context of a wide range of other agents and services.</p>
<p>They're often in an environment where communication and collaboration is taking place with some sort of infrastructural layer.</p>
<p>And then the core might concer, be concerned with command and control-type issues in search-and-rescue or emergency response situations, but also dealing with people in the field.</p>
<p>And so they are also manipulated the plans that they're given and adjusting them to a local situation.</p>
<p>We may also be including the people who are in trouble or are isolated or being rescued as part of the framework of collaboration and communication that's taken place.</p>
<p>And again, they have to deal with elements of the plan that are coming from these different levels and different centers.</p>
<p>And we perhaps have to deal upwards with decision making authorities by giving briefings of the options that we're generating, explaining those, and looking for decisions on, on which ones are going to be executed and handled.</p>
<p>We'll show you a couple of examples of I-X multiagent applications.</p>
<p>This is an I-X process panel which sports a search and rescue coordinator and the communications with various other agencies and services in a coalition peace keeping operations.</p>
<p>The second application called I-Globe handles the tasking and coordination of mobile ground and air vehicles in a disaster response scenario.</p>
<p>Often, planning is just a small part of a wider collaboration and communication situation involved in a realistic application.</p>
<p>The I-Plan planner here sits in the lower right, and it's quite a simple tool.</p>
<p>But it operates in a much broader context of planned communication, messaging, map views, sense making, and so on.</p>
<p>A paper written in 2001, was part of a special issue in Mayhem Magazine on Robocop, explored emergency response as a grand challenge for multiagent and intelligent systems.</p>
<p>It explored the very many areas involved in effective emergency response, which could be supported by intelligence systems.</p>
<p>These included dealing with the environment.</p>
<p>Supporting the people and organizations involved, and of course, using intelligence systems to assist in the emergency itself.</p>
<p>The key element of this support in both planning and activity management and the sharing of plan related information between agents.</p>
<p>Plenty used for communication and collaboration between agents and systems.</p>
<p>So upon representation itself, is an important area of research.</p>
<p>Plenty used in many areas beyond activity planning.</p>
<p>Such as in, situation understanding summarization, natural language interpretation, and generation and so on.</p>
<p>Plents provide nontological informal representation call for a wide range of practical applications and uses.</p>
<p>A good representation of plans can be used as a target for knowledge acquisition, for user communication, for system manipulation, and as a basis for formal analysis.</p>
<p>AI planning work has influenced standard related process and plan representations used by many industries and fields.</p>
<p>For example, in the MIT process handbook, its process interchange format or PIF.</p>
<p>In the NIST, the National Institute of Standards and Technology in America,</p>
<p>the Process Specification Language, PSL.</p>
<p>And the DARPA, Shared Planning and Activity Representation SPAR.</p>
<p>And has even become the basis for an ISO standard.</p>
<h2> <span class="mw-headline" id="Context_-_Example_Planners">Context - Example Planners</span></h2>
<p>We're now going to look at a couple practical planners in operation.</p>
<p>You'll find some excellent online resources for some of the well-known planners listed in our table.</p>
<p>The course readings have also been designed to introduce some of these and we provide screen captures of a number of our own Edinburgh planners in operation.</p>
<p>Nonlin was created in the mid-1970s, and as mentioned earlier was applied in a project using mixture of A.I.</p>
<p>and Operation Research, O.R.</p>
<p>methods, to create project plans for electricity turbine overhaul.</p>
<p>It allowed for user-driven modifications to the plans as maintenance inspection took place and plans up to be updated.</p>
<p>Nonlin brought together range of A.I.</p>
<p>planning techniques, which were novel at the time.</p>
<p>In this slide, I'm using the terminology now commonly applied to these techniques.</p>
<p>Nonlin was a hierarchical task network planner.</p>
<p>It could generate plans in which the activities were not fully ordered.</p>
<p>It had been common up until that time for A.I.</p>
<p>planners to generate plans which were fully linear in order.</p>
<p>Nonlin searches in the space of planned descriptions rather than in the application state base, a subject which we're going to cover in the later module.</p>
<p>Nonlin uses the goal structure of the plan in considering the different alternatives.</p>
<p>So it always looks at different approaches based on that plan rationale.</p>
<p>Nonlin as a mechanism for answering the question of whether a proposition has a certain truth value at a certain point in the plan.</p>
<p>We call that the QA module, question answering module, is more often, nowadays, called the Modal Truth Criterion that use condition types to limit search.</p>
<p>It allowed for multiple contributors to condition achievement in order to achieve plan robustness.</p>
<p>It included compute conditions for links to external databases and systems because it was built as a practical planning system.</p>
<p>These are similar to attach procedures in some other planners.</p>
<p>And as mentioned earlier, is a mixture of A.I.</p>
<p>and operational research methods, so OR algorithms were used for time and resource constrained reasoning.</p>
<p>Nonlin has been used as a basis for textbook descriptions of hierarchical task network planning.</p>
<p>O-Plan followed on from Nonlin and used some of the same techniques.</p>
<p>It included domain knowledge elicitation and modeling tools and supported a rich plan representation.</p>
<p>It also was a hierarchical task network planner and had detailed constraint management.</p>
<p>It allowed for plugging constraint managers, so that that that aspect could be extended.</p>
<p>Gold structure-based planned monitoring during execution was supported and it supported dynamic domains in which new objectives or tasks could arise while planning an execution was taking place.</p>
<p>Plan repair when time was available or when the situation demanded rapid response was supported.</p>
<p>Interfaces for users with different roles were provided in order that several different users could be refining the plan simultaneously and sharing information about the plan between them.</p>
<p>And explicit management of the planning and execution workflow was supported, so the planner itself could be used in, in these aspects.</p>
<p>There is a simple example of O-Plan acting as a Unix system administrator's aid.</p>
<p>The aim is to create a shell script that reliably removes a volume group.</p>
<p>This is an application which a lot of people have found difficult and can lead to loss of files.</p>
<p>Once the current mapping between logical volumes and physical volumes are, are given by the drop-down numeric boxes, you can just hit the plan button and the planner goes off, and produces the plan, and it prints it out as the script ready to cut, and paste, and use.</p>
<p>Here's a more comprehensive example of O-Plan running on a military operations in urban terrain and where task description planning and execution workflow are all able to be supported with multiple users acting over the internet and all sharing a common plan.</p>
<p>so typically, there will be a task assigner who will set up the problem.</p>
<p>It would go in and define this with simple web form with drop-down lists of the kind of tasks that can be carried out.</p>
<p>And then, a planner can be called to generate specific operations and, and make suggestions of how to respond to the particular emergency, the particular disaster that's occurring.</p>
<p>And the idea is, that between the planner and the task assigner, they can talk and look at these options, refine them, throw away some replan when things are being added, and so on.</p>
<p>And all this is occurring through these user interfaces talking to the planner behind the scenes.</p>
<p>O-Plan was used as the basis for Optimum-AIV, a planner for assembly, integration, and verification of the payload bay of Europe's Ariane rocket launcher.</p>
<p>It was originally designed as plan ERS-1 for assembly integration test of the European Space Agency's ERS-1 spacecraft shown here, on the left.</p>
<p>Optimum-AIV also used the rich plan representation, hierarchical test network planning, detailed constraint management, plan and user rationale recorded.</p>
<p>It could handle issues arising during planned execution and deal with it, these through plan repair using test failure recovery plans.</p>
<p>It was integrated with European Space Agency's Artemis Project Management System.</p>
<p>Let me draw your attention to a number of features which are typical of practical A.I.</p>
<p>planners.</p>
<p>Often, these are based on hierarchical task network planning at an outer layer.</p>
<p>They often also allow for partial order of the resulting plans rather than insisting the plans are fully ordered.</p>
<p>They often include a rich domain model that can manage many types of constraints and include links to simulations, analyses to refine then restrict the plans.</p>
<p>These planners often allow for integration with other systems, user interfaces, databases, spreadsheets, project management, corporate systems of various kinds.</p>
<p>And this is very typical of practical planners and often, much of the effort that goes into a practical planning application can go into this kind of integration.</p>
<h2> <span class="mw-headline" id="Context_-_Planning.2B.2B">Context - Planning++</span></h2>
<p>We'll take a look at the very wide range of planning research areas and techniques.</p>
<p>There's been quite a lot of work in domain modeling, domain description, and domain analysis, prior to using these descriptions, these domain descriptions in planners themselves.</p>
<p>Then of course the core work in AI planning is being in the search methods, and algorithms for creating plans, searching for plans.</p>
<p>People have looked up plan analysis because if you can constrain the types of plan you're interested in through analysis, that can limit the search spaces involved.</p>
<p>It could be useful to pause here and to read through this list of areas and techniques.</p>
<p>How many have you already heard of?</p>
<p>Check out or ask about any acronym you don't know.</p>
<p>Continue on when you're ready.</p>
<p>Then people concerned with realistic and practical planning problems have often had to deal with the hue of repairing plans when things go wrong or when the circumstances change.</p>
<p>A number of people have looked at planned generalization, the reuse of generalized plan fragments.</p>
<p>The sport of the user involved in planning via a suitable user interface is, advice interfaces and the ability to generate plans in a mixed issued fashion between the automated system and the human are important.</p>
<p>In recent years, planners have been made available as web services in order that they can be used as a component of larger scale systems.</p>
<p>And plans can be used in a range of other areas, such as natural language generation, dialogue management, the sharing of plans between humans and so on.</p>
<p>Pause again, to look at the research areas and techniques listed.</p>
<p>So as you can see here, we're dealing with the whole life-cycle plans, right through from, creating domain models, to making use of those plans in productive situations.</p>
<p>The problem is that we need to make sense of all of this.</p>
<p>We need to find a way of fitting in the very many techniques that are available now and that will become available through further research and development.</p>
<p>What's needed is more collaborative planning framework.</p>
<p>At the alta level, we've got to be able to relate to the humans involved in the planning process, where they can present their objectives, their issues, they can make sense of the situation.</p>
<p>They can give multiple options and advice.</p>
<p>They can argue about those options, discuss them, outline plans, and so on.</p>
<p>Then we want detailed planners, search engines, constraints, all that analyzers and simulators, that can act within that outdoor frame, and work in an understandable way, and use it to provide feasibility checks, detailed constraints, and guidance.</p>
<p>Want to be able to share processes and information about process products between humans and systems, and want to look at the current status, the context we're in, the environment we're in, you know, to be sensitive to that.</p>
<p>We need a link between informal and unstructured planning and more structured planning and methods for optimization.</p>
<p>And that's what we've been trying to do with our I-X I plan work, just as an example of how some of this integration is going on in practical A I planning systems.</p>
<p>First of all, we base it on an underlying, intelligible, easily communicated, easily extended, conceptual model for objectives, processes, procedures and plans.</p>
<p>Just based on four components, a set of issues to be addressed, a set of nodes, which are activities to be included in the plan, a set of constraints which have got to be respected and a set of annotations on the entities that are involved there.</p>
<p>We call that model I-N-C-A</p>
<p>Then we want to communicate the dynamic status and presence of the agents involved.</p>
<p>The collaborative processes that process products, and what they, what they're able to do in terms of their capabilities.</p>
<p>Want to be sensitive to the current context so the presentation of options for action are those which are suitable for the context we're in.</p>
<p>And we want to do intelligent activity planning, execution and monitoring repair, and plan repair, and we do that via the iPlan planner and what we call the I-X process panels, which are the user interface element in the I-X technology.</p>
<p>So I-Xs aim is a planning workflow and task messaging catch all.</p>
<p>We designed it in order that it can deal with the wide range of problems that can be addressed in planning and activity management.</p>
<p>It's meant to be able to take any requirement to handle an issue, perform an activity, respect a constraint, or note an annotation.</p>
<p>So that's the underlying computational model of the I-X platform.</p>
<p>They can deal with these by a manual activity, so you can basically, just take items off, for instance, on checklist.</p>
<p>That's a perfectly good way of representing the fact that you've performed an activity in some systems.</p>
<p>But also, by inbuilt internal capabilities in the system, by external capabilities you know about, or by rerouting or delegating to other panels and agents, which is where communication and collaboration and the models of those, those other agents comes in.</p>
<p>And all we can plan next year to compensate to these capabilities and we can use the planner inside the system itself, to plan that kind of work flow.</p>
<p>And then the system receives reports and interprets them to understand the current state it's in, and to be able to start to handle that situation and help the user control the situation.</p>
<p>And the idea is it can cope with just partial knowledge of the process and organization involved, and be able to fit in to an environment where it isn't the only agent that's working on plans and processes within an organization.</p>
<p>I-x, as we've said before, has been applied to emerge in serious bonds, and we've used this kind of process panel or user interface that's what the task.</p>
<p>But it's in a context where there is a lot of verbal tools.</p>
<p>The main editors, links to mapping tools, the planner itself can have a pop up window, its like you look at the options its generating and guide them and give them advice and so on and you can link to messaging and communication tools to the systems.</p>
<p>So that concludes this series of presentations on AI planning and context.</p>
<p>We've been looking at the context of practical systems, and we've shown you some practical planners in use.</p>
<p>We've looked at the context of task assignment, and execution, the fact that we're often working with multiple agents, multiple systems and multiple services, and we've looked at the context of planned representation itself, where rich plan representations can be used for many kinds of communication and collaboration in activity and, and planning situations.</p>
<p>And finally, we looked at Planning++, to try to make sense of the wide range of techniques being developed in this field, and looked at a model for bringing some of these techniques together in a productive way.</p>
<h1> <span class="mw-headline" id="Week_2">Week 2</span></h1>
<p><strong>Introduction</strong></p>
<p>Welcome to week 2 of the AI planning course.</p>
<p>We've already learned a lot of things in week 1.</p>
<p>For example I've introduced to you the basic planning problem which is the problem we are addressing in this course.</p>
<p>I've also told you about a technique that is used in many places in AI but specifically it's very important to planning and that technique is search.</p>
<p>Then we've met some of our friends the duck worker robots an example we will be using throughout the course.</p>
<p>This was followed by my colleague Austin Tate telling you about practical planners and applications where these are used.</p>
<p>But planning is not just about finding plans there is also a context to planning and this is for example what happens before a planning mainly the assignment of tasks to Planners.</p>
<p>And after planning, the plan execution which is very important.</p>
<p>Then, we've also seen that there is a range of techniques that are used in planners today.</p>
<p>That was pretty much what we've learned in Week 1.</p>
<p>And now I want to talk a little bit about the website.</p>
<p>I've already seen a lot of you have used the social platform that comes with this course, which you can see here.</p>
<p>And I would like to encourage you to use the discussion forums.</p>
<p>To bring up any questions, any issues, that you have with the course material and hopefully some of the the community that uses this forum will answer those questions for you or we, the instructors, can help as well.</p>
<p>In this week's first segment we'll be looking at informed search or more specifically the A&#42; search algorithm.</p>
<p>A&#42; is a search algorithm just like the ones we've seen last week.</p>
<p>It takes an implicit graph and searches it in its basic form as a tree.</p>
<p>Shown here is the search tree generated by the A&#42; algorithm for the touring Romania problem where the task is to get from Arad to Bucharest.</p>
<p>What is new here, is that the algorithm uses a number to guide its search, and this number expresses how far from the search node the algorithm thinks the current node is.</p>
<p>This is called a heuristic.</p>
<p>And this heuristic is used to compute some evaluation function that tells the algorithm which node to expand next.</p>
<p>In this graph, we see the numbers here which are the value of this evaluation function.</p>
<p>So, what this algorithm does is use an informed search strategy, as opposed to the uninformed search strategies we've seen so far.</p>
<p>And probably the best known informed search strategy in the A&#42;t algorithm which is what we will see in the first segment this week.</p>
<p>In this week's second segment we will be seeing our first planning algorithm which is the forward state space.</p>
<p>Search/g algorithm.</p>
<p>This uses the search technology we've seen in the previous segment.</p>
<p>As you will see in detail, this algorithm is actually very simple.</p>
<p>It takes a planning problem as input, which is these three components you see here.</p>
<p>And then starts a loop where it starts from the initial state and builds up a plan starting from an empty plan.</p>
<p>That will satisfy the goal.</p>
<p>The first thing it does is the goal test, which is just what we've seen in our search algorithm.</p>
<p>So this is the goal test here.</p>
<p>And then generates all the applicable actions in the current state.</p>
<p>If there are none, then of course we have failed.</p>
<p>Otherwise it just chooses one of the applicable actions.</p>
<p>That is our new action that we apply in our state.</p>
<p>Then we go to a new state by going forward from our current state.</p>
<p>And extend our plan with this current action.</p>
<p>And we go through this loop, until we have reached a goal state.</p>
<p>And therefore we have found a plan that achieves our goal.</p>
<p>But before we get to this algorithm, we will see a formal definition of what constitutes a planning problem.</p>
<p>And most importantly we will see the scripts representation for operators, which is the set O here, which describes an operator as something consisting of preconditions and effects.</p>
<p>That's what we will look at later this week.</p>
<p>So now it's time to get into the material for week 2.</p>
<p>Week 1 was fairly lightweight, and you've seen an informal introduction to planning.</p>
<p>In Week 2, we will see the material a lot more technical.</p>
<p>We will introduce algorithms, and you will have something to implement, if you want.</p>
<h2> <span class="mw-headline" id="Heuristic_Search_Strategies">Heuristic Search Strategies</span></h2>
<p>Previously we have seen how the general tree search algorithm uses a strategy to determine which node on the fringe to explore next.</p>
<p>An example of such a strategy was a first in first out queue.</p>
<p>We call this an uninformed source strategy because it does not use any information about the state itself, it only uses information about when the state was queued but nothing that is internal to the state.</p>
<p>We will now look at heuristic search strategies which use information about the state on the fringe to determine which note to explore next.</p>
<p>Information about a state that can be used in a search strategy can be encoded using a heuristic function.</p>
<p>In general, a heuristic function H, maps a node in the search space to a real number, R.</p>
<p>Or sometimes, you also find it maps it to a natural number.</p>
<p>What a heuristic function encodes is the estimated cost of the cheapest path from the given node to a goal node.</p>
<p>So the heuristic function tells us how close is the nearest goal node.</p>
<p>Obviously if the node N given to the heuristic function is a goal node, then the value must be zero.</p>
<p>That is, we are already had a goal node so that nearest goal node is in distance zero.</p>
<p>As you can see, a heuristic function encodes problem specific knowledge in a problem independent way.</p>
<p>For each problem we are looking at, we can define a different heuristic function.</p>
<p>Which is why the heuristic function is problem specific.</p>
<p>But whatever search space we're looking at, whatever problem we're looking at, the heuristic function will always give us a numeric value for each state.</p>
<p>And the fact that it is a number is problem independent.</p>
<p>A perfect heuristic function would always give us the correct distance to the goal node.</p>
<p>But if we had such a function the search wouldn't be very hard in fact it would be trivial.</p>
<p>Unfortunately perfect heuristic functions are very hard to find for most of the problems we'll be looking at.</p>
<p>Best-First search is an instance of the general tree search algorithm, where we use the knowledge provided by the heuristic function to decide which of the nodes on the fringe looks best for expansion.</p>
<p>In fact, Best-First search is a whole group of algorithms, as we can use the heuristic in various ways to decide which node looks best.</p>
<p>And Best-first search can be used as a tree search or graph search or algorithm, depending on whether we use the test for repeated nodes, or not.</p>
<p>In Best-First search, we use the strategy, that uses an evaluation function F, to decide which node in the state space to explore next.</p>
<p>and again, the evaluation function maps a node in the states space, to real number R.</p>
<p>In general we will choose that node from the fringe which has the lowest value F.</p>
<p>So the evaluation function determines the search strategy in Best-First search.</p>
<p>Again, if we had a perfect evaluation function we could use the search to lead us straight to the goal node.</p>
<p>Note that the evaluate function is not problem specific.</p>
<p>It is specific to the algorithm.</p>
<p>But the evaluation function may use the heuristic function, which is problem specific.</p>
<p>What we mean by best in Best-First search is simply defined by the evaluation function.</p>
<p>The node that is best has the lowest F value.</p>
<p>Now, a quick word about the implementation.</p>
<p>There are really two operations that we need to support, when we look at our fringe.</p>
<p>When we generate the successors of a node, we need to add those to the fringe.</p>
<p>And when we select a node from the fringe for expansion, we need to select the node with the lowest F value.</p>
<p>Since we will do both of these operations quite often during the search it is important that these are cheap operations.</p>
<p>The good way to implement this is by means of a priority queue.</p>
<p>A priority queue maintains all the nodes in the fringe, in ascending order of their F values.</p>
<p>A priority queue can be implemented as a binary tree, which means O adding a node and retreading the node with a lowest F value has a algorithmic time complexity.</p>
<p>The simplest Best-First search algorithm is probably Greedy Best-First Search.</p>
<p>This algorithm simply uses the heuristic function defined for the problem as the evaluation function used by the algorithm.</p>
<p>Remember that the heuristic function is problem specific and encodes the distance to the nearest goal node.</p>
<p>Whereas the evaluation function is not problem specific and is used by the algorithm to determine which node to expand next.</p>
<p>So the meaning of these two functions is really completely different.</p>
<p>But Greedy Best-First search simply equates the two and uses the heuristic function to give us a search strategy immediately.</p>
<p>The result is an algorithm that always expands the node that is closest to the goal node next.</p>
<p>The algorithm is called greedy because it always tries to take the largest chunk out of the remaining distance to the nearest goal node.</p>
<p>It tries to get to the goal node in as few steps as possible, but since the number of steps isn't necessarily the cost of a path, this is not necessarily the optimal strategy.</p>
<p>In fact, Greedy Best-First search often gives us solutions that are far longer than the optimal path, and also far more costly.</p>
<p>So let's look at our touring Romania problem to see how Greedy Best-First search works.</p>
<p>To remind you, the initial state was that we are in Arad.</p>
<p>Now suppose our goal state is to be in Bucharest, the capital.</p>
<p>The actions we have available are to drive along the arcs shown in this graph.</p>
<p>And each arc has an associated cost, and that is shown as a number next to the arc.</p>
<p>So from Arad, I could drive to these three towns and the costs would be respectively this, this.</p>
<p>And this number.</p>
<p>What we also need for greedy best first search is a heuristic.</p>
<p>And that's what we've got here.</p>
<p>The heuristic needs to estimate the distance to the nearest goal node.</p>
<p>And our goal node is to be in Bucharest.</p>
<p>So we only have one goal node.</p>
<p>And on a map, we can use the straight line distance to estimate the distance to the, to a different point on the map.</p>
<p>So we will use the Euclidean distance between two points on a two dimensional map.</p>
<p>The table you are looking at simply gives us the values of our heuristic function for different nodes N.</p>
<p>So, if the node N is Arad, the distance would be 366 rounded.</p>
<p>and so on.</p>
<p>For each city in our map, we have a straight line distance in this table.</p>
<p>And this is the value we will use as our heuristic value.</p>
<p>As is to be expected, the heuristic value for the goal note is zero.</p>
<p>Another feature of this heuristic is that it always underestimates the distance to the goal.</p>
<p>Let's look at a simple example here.</p>
<p>For example, we have figure S.</p>
<p>Which, according to the heuristic, is 176 from the nearest goal node, Bucharest.</p>
<p>But, going back to the map.</p>
<p>You can see that from Arad, it really 211 from the goal node.</p>
<p>That is because roads don't tend to be straight lines.</p>
<p>In reality, it is probably something like this.</p>
<p>And that's a longer distance than what the heuristic gives us.</p>
<p>So the real distance is 211.</p>
<p>But, going to the next slide again.</p>
<p>The estimated distance according to the, the heuristic, is 176, which is lower.</p>
<p>Another important observation here is that the heuristic presents us with additional information to what we had in the original problem description given by the map.</p>
<p>There is no way you can compute the values in this table from the information given in the map.</p>
<p>And of course this table presents problem-specific information.</p>
<p>Now, let us have a look at greedy first search in action.</p>
<p>What we see here is the initial state of the algorithm.</p>
<p>All the nodes you see are the fringe nodes, and there's only one node, of course initially.</p>
<p>Fringe nodes are shown in blue here.</p>
<p>That's the legend.</p>
<p>And the node we select to expand next is shown in red.</p>
<p>So currently, there is no node selected.</p>
<p>Within each node, you see the name of the city, plus the heuristic value for that node.</p>
<p>Also, on the right hand side, you see information about the depth of the different nodes in the search tree.</p>
<p>So the first thing the algorithm does is select a node from the fringe.</p>
<p>And since there is only one node, this is the one that's going to be selected.</p>
<p>Then the algorithm performs the goal test on this node.</p>
<p>Which will fail in this case, because this is not goal node.The next step then is to generate the successors of this node.</p>
<p>So now, our initial state, Arad is no longer on the fringe.</p>
<p>But its three successors are now the new fringe.</p>
<p>This means we have to go through another iteration of our loop.</p>
<p>And the first step is to select a node from the fringe.</p>
<p>We do this according to the strategy.</p>
<p>Which tells us we've got to select the node with the lowest f value.</p>
<p>So here, we have three nodes.</p>
<p>And the lowest f value is this one.</p>
<p>So this is the one we will select next.</p>
<p>Again, there's no, it doesn't not pass the goal test, so we have to continue.</p>
<p>We generate the successors, and add these to the fringe.</p>
<p>You can see what we are doing here is tree search.</p>
<p>Because we've generated Arad again.</p>
<p>So this node is the original node.</p>
<p>And we could go back there immediately.</p>
<p>For most search problems, applying an action, and then the reverse action immediately afterwards is not a good idea.</p>
<p>But let's continue with the algorithm.</p>
<p>So the next thing we have to do is select another node.</p>
<p>And we select the node with the lowest f value.</p>
<p>And here, that is Fagaras.</p>
<p>Again this is not a goal node so we have to expand it and add its two successors to the fringe.</p>
<p>Now we select a node from the fringe and the node with the lowest F value is Bucharest and this time the goal test will toss so we finished with our search.</p>
<p>We can now extract the path to the goal node simply by going up from our goal node, the one that we found through the tree, to the initial state and this is our solution path.</p>
<p>That's it, that's how a greedy best first search works.</p>
<h2> <span class="mw-headline" id="A.2A_Tree_Search">A* Tree Search</span></h2>
<p>The problem with Greedy Best-First search is that it often finds sub optimal solutions, often very badly sub optimal solutions.</p>
<p>But the idea of using a juristic function, to determine the search strategy is a good one.</p>
<p>We will see this next when we define the A&#42; algorithm which always gives us optimal solutions.</p>
<p>A&#42; is probably, the best known algorithm in all of artificial intelligence and as far as I know it is described in every single AI textbook.</p>
<p>A&#42; is simply refinement of the best first search algorithm we have seen earlier.</p>
<p>The only difference to Greedy Best-First search is that it uses a different evaluation function.</p>
<p>So remember f, the evaluation function, tells us in which order we explore nodes on the fringe.</p>
<p>The heuristic h tells us the distance to the nearest goal node.</p>
<p>So far it is nothing new, what is new is this component g that we add to the uristic to get our evaluation function and this function g simply gives us the cost to reach the note end so that's the cost we already had to get from our initial state to this note end and to this we add a uristic which is the estimate to the nearest goal note from this note end.</p>
<p>So if we have an initial state I and we somehow to get our note N.</p>
<p>Then the distance between those two.</p>
<p>Is g of n.</p>
<p>Whereas from here, we somehow get to a goal node, and this is our nearest goal node g.</p>
<p>Then this distance is estimated by the heuristic function H, of N.</p>
<p>One way to look at this is that greedy best first search behaves a little bit like depth first search.</p>
<p>It tries to go deep into the search base, as quickly as it can to a goal node.</p>
<p>It always tries to eat at much as possible out of the distance to the goal.</p>
<p>By adding g to h, and using that as our evaluation function.</p>
<p>We sort of add a breadth first component to this depth first search.</p>
<p>In fact, the evaluation function we're using gives us the estimated cost of the cheapest solution through the node N.</p>
<p>Why is that?</p>
<p>Well, very simple.</p>
<p>The cheapest solution though N surely must consist of the path that goes from the initial state to N.</p>
<p>And the cost of that is given by G of N.</p>
<p>And it consists of the cost of getting from N to the goal Node.</p>
<p>And we can estimate that, using the function H, the uristic function.</p>
<p>So when we use this evaluation function to select the next node from the French we are selecting that node N.</p>
<p>Which looks to be on the cheapest path to A goal node.</p>
<p>And we can show that A&#42; search is optimal if our heuristic function is admissible.</p>
<p>And that means that it always underestimates the distance to the goal.</p>
<p>But I will get back to properties of A&#42; later.</p>
<p>So let's look at the same touring Romania example we've had before.</p>
<p>Our initial state is that we are in Irat, and we want to get to Bucharest.</p>
<p>Note that the number in brackets in each node is the F value, not the H value.</p>
<p>So this includes the G component.</p>
<p>The amount of path we've already covered.</p>
<p>For the initial node, G is zero, because we haven't gone anywhere yet.</p>
<p>So the initial, for the initial node, the, H value is equal to the F value.</p>
<p>So again, the first thing we do is select the node from the fringe.</p>
<p>And since there is only one node, we select that node.</p>
<p>And then we expand that node and add the successors to the fringe.</p>
<p>Whereas, a rod disappears from the fringe.</p>
<p>So if you go back you will see that the numbers and the different nodes are different from what we have seen previously.</p>
<p>Which is what I've just explained.</p>
<p>They contain the G component as well as the H component.</p>
<p>So again the algorithm proceeds by selecting the node from the fringe that has the lowest F value which is 393 in this example.</p>
<p>We continue by testing whether this is a goal state, which it is not so we have to expand it and generate its successors.</p>
<p>There are four successors again as before.</p>
<p>Arot is one of the successors so we're doing tree search.</p>
<p>But now, one big differences is that the number that we see with Arot is very different.</p>
<p>It's a much higher number because it includes the path that we've already gone through.</p>
<p>So this is not the same as for the initial state, because we've already gone through the loop through that other city, before we returned to Arot.</p>
<p>So we continue with our loop, and we have to select another note from the fringe.</p>
<p>Which will be the note with the lowest F value, in this case 413.</p>
<p>This is not a goal note, so we have to expand it.</p>
<p>And there are three more successors we add to the fringe.</p>
<p>Now something interesting has happened.</p>
<p>Previously this was our lowest value so we estimated that a path through this node could cost as little as 413.</p>
<p>We have expanded this node and seen that its best successor has a value of 417.</p>
<p>This is because the heuristic underestimates.</p>
<p>The distance to the goal, now we are closer to the goal the heuristic has become more accurate and we know the power is in fact a little more expensive.</p>
<p>What that also means is that there is a note higher up in the tree this one here that now has the lowest f value on the fringe so this is the one we will select next.</p>
<p>We will perform the goal test as before.</p>
<p>And since this is not a goal node, we have to expand this node.</p>
<p>Generating two more successors.</p>
<p>Including as you will see, one that is the goal node.</p>
<p>But, having generated to go on node does not mean that we are finished.</p>
<p>We will finish when we select to go on node, and try to perform to goal test on this node.</p>
<p>So let's select the next node from the fringe.</p>
<p>And the node with the lowest F value is now over here, with a value of 417.</p>
<p>That's the successor we previously ignored.</p>
<p>And since this is not a goal note we will proceed by expanding this note.</p>
<p>Generating three more successors and once again of, of those is the goal.</p>
<p>So our goal note appears twice on the fringe now but these have two different paths to the goal note.</p>
<p>Notice that the one further up is the one that Greedy Best-First search found earlier.</p>
<p>Now lets proceed with A&#42;.</p>
<p>A&#42; goes through the loop again and selects the note with the lowest f value, which in this case is the bookarest note at depth four.</p>
<p>It performs the goal test and finds indeed Bucharest is the goal node and hence we have found a path to the goal node and it is the optimal path.</p>
<p>We can go again back through the tree, tracing the way we came, to get the optimal path to this goal node.</p>
<p>So a star gave us an optimal path to the goal node, better than what Greedy Best-First search found.</p>
<p>However you can also see that this tree contains quite a few more nodes than the tree that was generated by Greedy Best-First search.</p>
<p>And that means A&#42; search is generally a little bit slower than Greedy Best-First search and unfortunately this is often the case.</p>
<p>The touring Romania example is not very interesting, because it is a relatively small search space.</p>
<p>So here's something that has a slightly bigger search space.</p>
<p>The 8 puzzle.</p>
<p>Again, to remind you, the 8 puzzle's character is by an initial state, there is one state that is given here, and one goal state, exactly, that is given here.</p>
<p>The actions for this puzzle were that we can move the tiles around the grid, and a good way to think about this is that we are moving the empty tile rather than the tiles themselves, which means there are, at most, four possible actions we can move the empty tile.</p>
<p>In the four different directions, which reduces the branching factor of the tree we are generating.</p>
<p>Also, it might be a good idea to test for reverse action, because undoing what we've just done immediately never leads to anything good in this search space.</p>
<p>Finally, we need to define the cost of the different actions, and we use a unit cost here.</p>
<p>Moving a tile is, same cost for every tile.</p>
<p>What is missing to apply best first search or Greedy Best-First search or a star search here is a heuristic function, and we will look at that next.</p>
<p>In fact I will give you two symbol heuristics for the eight puzzle.</p>
<p>The first one simply counts the number of misplaced tiles.</p>
<p>So we go through all the eight tiles in the puzzle, and check whether it is already at the right position.</p>
<p>If it is not, then we add one to our heuristic.</p>
<p>Because we know if it is not at the right position, we have to move the style at some point.</p>
<p>And since every action moves just one tile, that's a good heuristic to start with.</p>
<p>So let's look at this in this example.</p>
<p>This is our heuristic H1 number of misplaced tiles, well this is wrong, this is wrong, they're all wrong.</p>
<p>So we see that in this example the value of our heuristic is eight that means all eight tiles are in the wrong position.</p>
<p>The second heuristic H2, uses the manhattan block distance as an estimate to how far we need to go.</p>
<p>So again, we go through all the eight tiles in the puzzle, and compute the manhattan block distance, and add those distances together.</p>
<p>What I mean by Manhattan block distance is simply that all the moves we are allowed, are to go somewhere along the grid.</p>
<p>So there are only four possible ways in which one can move a tile.</p>
<p>So lets start with the first time, that's the number seven.</p>
<p>And the way, where we want the number seven to be is here so the Manhattan block distance is one, two, three.</p>
<p>And this is the first value we'll choose.</p>
<p>Then we have the two here.</p>
<p>And where should the two be?</p>
<p>The two should be here.</p>
<p>So the distance is one and so on.</p>
<p>If we continue like this for all eight tiles, we will see that the Manhattan block distance heuristic for this state is eighteen.</p>
<p>It is easy enough to see that both of these heuristics never overestimate the distance to the nearest goal.</p>
<p>It should also be easy to see that the second heuristic, H2, always gives us a much more accurate estimate of how far the goal node is away, but it is not a perfect heuristic.</p>
<p>The actual distance to the goal node from the state shown here is 26.</p>
<p>So if you feel like a little programming now why don't you go ahead and implement the eight puzzle using the a star algorithm and solve a few puzzles.</p>
<p>Use different heuristics.</p>
<p>Play around with it.</p>
<p>See what happens.</p>
<h2> <span class="mw-headline" id="Properties_of_A.2A">Properties of A*</span></h2>
<p>So now that you know how the A&#42; algorithm works, I want to go a bit in to the theory, and give you some properties of the algorithm.</p>
<p>These all rely on the fact that the heuristic use is admissible.</p>
<p>And we will talk about that first.</p>
<p>A heuristic is called admissible if it never overestimates the distance from a node to the nearest goal node.</p>
<p>So what this means is that the value of the function h(n) must always be less or equal than the actual distance to the nearest goal node.</p>
<p>The equality is actually quite important.</p>
<p>For example, the heuristic value of a goal node is equal to zero and therefore, it's equal to the actual distance to the goal node.</p>
<p>So any heuristic must have that property.</p>
<p>In other words, there's usually at least one node for which the equality holds namely, the goal node.</p>
<p>Unfortunately, this is often the only node for which this holds.</p>
<p>Otherwise, we would have a perfect heuristic, and that is too good to be true.</p>
<p>Admissible heuristics usually think the nearest goal node is closer than it actually is.</p>
<p>They tend to underestimate the distance to the goal.</p>
<p>An example of an admissible heuristics is one we have seen for the touring Romania problem, namely the straight line distance.</p>
<p>The shortest distance between two points on a map is usually the straight line.</p>
<p>Hence the straight line distance heuristic must underestimate the actual distance along a road.</p>
<p>Thus, it is an admissible heuristic.</p>
<p>For A&#42; search, here's what that means.</p>
<p>We set that the evaluation function f(n) represents the cost over the shortest path through node n to a goal node.</p>
<p>So if the uristic never overestimates the distance from n to the nearest goal node, then the evaluation function used by A&#42; never overestimates the true cost of a lu, solution through the node n.</p>
<p>This brings me to the most important property of A&#42; namely that it is optimal.</p>
<p>We can prove the following theory.</p>
<p>A&#42; using tree search is optimal if the heuristic h is admissible.</p>
<p>Just as a reminder, optimal here means that the algorithm is guaranteed to find the shortest path from the initial state to a goal node.</p>
<p>And this theorem tells us that if our heuristic is admissible, then A&#42; will return with an optimal path.</p>
<p>That is of course a very useful property for a search algorithm to have.</p>
<p>By the way a similar theorem can be shown for A&#42; using graph search but I won't go into this here now.</p>
<p>Another property of A&#42; is that it is complete which means that if there is a solution, A&#42; can find the solution.</p>
<p>This can be shown using something called contours.</p>
<p>And since this is quite an interesting concept, I want to introduce this here.</p>
<p>So contours are sets of states that can be reached within a certain cost.</p>
<p>This is a bit like a topographic map that you've all seen, I hope.</p>
<p>In a topographic map, you see lines indicating points of equal altitude.</p>
<p>Here the contour is a line indicating nodes of equal F value, and all the nodes within the contour belong to the set.</p>
<p>A prerequisite for being able to draw contours is that the f values along a path are non-decreasing.</p>
<p>So what this means is that as we move away from the initial state the f values are usually increasing.</p>
<p>Now the way A&#42; works fundamentally is that it starts from the initial state and then adds nodes according to these contours.</p>
<p>It always starts with a smaller set and then increases the F value as it goes along.</p>
<p>But it will always explore nodes with lower F values before it moves to a higher plateau, so to speak.</p>
<p>If our heuristic function always had the value zero, what A&#42; would do is essentially draw circles around the initial state.</p>
<p>If the heuristic always had the value zero, this would, of course, be uninformed search.</p>
<p>And, in fact, this algorithm has a name.</p>
<p>It's called uniform cost search, or Dijkstra's Algorithm.</p>
<p>But with the heuristic that provides some information what happens is that the contours become ellipses that are drawn towards a goal state, so they try to get closer to a goal state.</p>
<p>And the more accurate our heuristic is the more these ellipses stretch towards a goal.</p>
<p>A completeness of A&#42; simply follows from this, because as it explores more and more nodes the contours are growing and growing.</p>
<p>And eventually this must include a goal node.</p>
<p>This is true, because each contour can only contain a finite number of states.</p>
<p>And once these are all explored, A&#42; will go to the next higher altitude for bigger contour.</p>
<p>And here is what this looks like visually for our touring in Romania example.</p>
<p>We start off in Irat.</p>
<p>And the F value there was 366, so that's the smallest control from which we start that contains A node at all.</p>
<p>Then, A&#42; will continue to grow this contour.</p>
<p>Initially, as a small set, but then we have a slightly bigger set, that for example, has the value 400.</p>
<p>And as you can see this node here is almost on the edge.</p>
<p>And if you go back to the tree you will see it's F value is above 400, so it must be outside the set.</p>
<p>And so on.</p>
<p>So, A&#42; continues to grow this contour until it includes the Bucharest node.</p>
<p>In this example, you can see nicely how the ellipsis it draws stretch toward the goal node.</p>
<p>But you can also see it the other way around.</p>
<p>What this means is that A&#42; must explore all those nodes that are within a contour that has a value just less than the cost of the optimal path.</p>
<p>A&#42; needs to include all those nodes that are within this contour that almost leads to the goal node.</p>
<p>And often, that is still quite a large number.</p>
<p>So in this example, you see that most of the contours contain different nodes.</p>
<p>But think about the eight puzzle for a second, and what that looks like there.</p>
<p>In the eight puzzle the maximum goal distance you have is 31 steps.</p>
<p>Yet, you have just over 180,000 nodes.</p>
<p>So there must be many nodes that have the same F value.</p>
<p>Here is another property of A&#42; namely A&#42; is optimally efficient.</p>
<p>What this means is, that no other, optimal algorithm is guaranteed to expand fewer nodes than A&#42;.</p>
<p>This is of course true for a given specific heuristic function.</p>
<p>What this gives us is that, any other algorithm that guarantees us an optimal solution must expand at least as many nodes as A&#42; for a given heuristic function.</p>
<p>Of course, there can still be a more efficient way of finding a solution to a given problem namely if we have a different, more efficient heuristic.</p>
<p>But for a fixed juristic, A&#42; is optimally efficient.</p>
<p>Notice that efficiency here is counted in the number of nodes that are expanded, but of course that's not the only thing that makes an algorithm efficient.</p>
<p>For example, computing the juristic function has a computational cost but it does not count towards the number of nodes that we expand.</p>
<p>So A&#42; is only optimally efficient with respect to number of nodes it expands.</p>
<p>To be more specific, it's not only the number of nodes that any other algorithm must expand.</p>
<p>It is exactly those nodes.</p>
<p>Suppose there is another algorithm that is optimal, which means it returns an optimal path.</p>
<p>But it does not expand one of the nodes that is expanded by A&#42;.</p>
<p>What does this mean?</p>
<p>A&#42; expands all those nodes with an F value that is less than C* where C* is the value of the optimal power.</p>
<p>So, if another algorithm did not expand one of these nodes.</p>
<p>That means, in the search space of the algorithm, there's an unexplored node that has an F value of less than C*.</p>
<p>So that means the most promising path through that node that the algorithm ignores, looks better than the optimal path.</p>
<p>So if we don't explore that path, we can never find out that it actually turns out to be something worse in the end.</p>
<p>So in the end, A&#42; expands a minimal number of nodes that still guarantee an optimal solution.</p>
<h2> <span class="mw-headline" id="A.2A_Graph_Search">A* Graph Search</span></h2>
<h3> <span class="mw-headline" id="a_A.2A_Graph_Search">a A* Graph Search</span></h3>
<p>You have now seen the A&#42; algorithm for heuristic search and you should understand how it works.</p>
<p>A&#42; is a pretty good algorithm.</p>
<p>It always finds optimal solutions and it is optimally efficient.</p>
<p>So you may wonder, why would we ever need another search algorithm?</p>
<p>Well, there are a few more problems, and I will go into those next.</p>
<p>Some of these problems are related to the fact that we're usually searching a graph, not a tree, so we will look at a star as a graph search algorithm next.</p>
<p>And here is the pseudocode for the A&#42; tree and graph search algorithms.</p>
<p>The basic version of this algorithm is the tree search algorithm, and there is an extension that I've also included on this slide which consists of three additional lines of code, that performs the graph search.</p>
<p>And the three additional lines of code are, these.</p>
<p>Three lines here shown in gray.</p>
<p>But let's have a look at the tree search algorithm first.</p>
<p>So we define a function A&#42; tree search that takes two parameters.</p>
<p>The first is our search problem, and the second is the heuristic that we're using This may or may not be an admissible heuristic.</p>
<p>The first thing we do then, is initialize our set of fringe nodes.</p>
<p>And we initialize the fringe, from our initial state that was given in the problem.</p>
<p>And what we do is, we put this initial state.</p>
<p>Into a queue, into a priority queue that sorts the node by their f value.</p>
<p>That means we always have quick access to the node in that queue that has the lowest f value and that is how we initialize our fringe.</p>
<p>Then we go through the loop that does the note expansion and generates the search tree.</p>
<p>The first thing we do is we test whether the fringe is empty.</p>
<p>That would mean that there would be no more nodes to explore and that means we can return failure because it means we have generated the whole search tree and haven't come across a solution node, so there is no solution node.</p>
<p>So, we can return with failure.</p>
<p>[UNKNOWN].</p>
<p>But if there are nodes on the fringe, then we have to select one of these nodes, for expansion.</p>
<p>Note, that the select function here, does not take a second argument, as it did earlier, because our strategy here is fixed.</p>
<p>We select the node with the lowest f value.</p>
<p>Having said that I should point out that this selection is not quite deterministic as there may be many nodes with the same f value that are currently on the fringe.</p>
<p>So our node is only 1 of the nodes with the lowest f value.</p>
<p>And what we do next, is we perform our goal test.</p>
<p>The goal test on the state contained in that node.</p>
<p>And if this goal test succeeds, that means we have found a solution, and then we can simply return, the path, to this node in the search tree.</p>
<p>If our chosen node is not a goal node, then we have to add it's successors to the fringe and I've shown this here as a loop because we add each successor in turn, and we use the function expand to generate all the successors.</p>
<p>Of the selected node and our loop variable successor here is the next successor in that loop and then for the tree search version of this algorithm, we simply have to add that new successor to the fringe.</p>
<p>So, we extend our current fringe with the new successor and the place where we queue this new successor in our priority queue is of course the f value of that node.</p>
<p>And for those of you who have been wondering where we use the parameter h, that is the second parameter of this function, remember that f is defines as g + h, so that's where we use our heuristic function, and that is all the pseudocode we need for the tree search version of this algorithm.</p>
<p>Algorithm.</p>
<p>But the graph search version isn't much more complicated.</p>
<p>What we need to do in addition is first, we need to initialize the set of all nodes that we have seen so far.</p>
<p>And one way to do this is to initialize this as a hash table.</p>
<p>of nodes.</p>
<p>And intially this will contain only the inital state, that we can take from the fringe or from the problem.</p>
<p>Then the algorithm proceeds as before, going through the loop, trying to take a node off the fringe if there is one.</p>
<p>Performing the goal test on that node.</p>
<p>If it's a goal node then we've found the solution.</p>
<p>And if not we go to the loop where we expand the current node and generate it's successors, and that's where the algorithm for graph search differs.</p>
<p>Namely for each successor that we're generating we have to test whether this is a node that we've already seen and if we have already seen that node then we don't need to add it to our fringe, if we haven't seen the node then we continue as before we add it to the fringe as our new successor at its current f value and we also have to add it to the set of all the nodes we've seen before.</p>
<p>So that we don't explore this note again.</p>
<p>So this is a working version of the graph search algorithm.</p>
<p>However, there is one problem with it.</p>
<p>If the given heuristic is admissable, the graph search version, as shown here, no longer guarantees an optimal solution.</p>
<p>And the reason for this occurs here.</p>
<p>Namely if we generate the successors of a node, we may generate a new node that we have seen before.</p>
<p>But the second time we generate the node, we actually discover a shorter path than the first time we generated it.</p>
<p>So what we really want to do here is keep the node that has the shorter path and doesn't matter whether we discovered that first or later.</p>
<p>So what we could do is simply add a piece of code here that tests whether our new path is shorter than the old path.</p>
<p>But for many problems the heuristic that we'll be using is not admissible, and then A&#42; doesn't guarantee as an optimal path anyway.</p>
<p>So, we don't have to worry about this shortcut question necessarily.</p>
<p>And here is the first problem with A&#42; as it stands, and that is it still uses exponential space unless the euristics are perfect.</p>
<p>In fact, in the worst case, the time and space complexity of A&#42;, are both an O(b^l).</p>
<p>Where B is the branching factor, so that's the number of successes we have per node on average.</p>
<p>An L is the length of the path we're looking for.</p>
<p>b^l is exponential, which means we have exponential time and space complexity, And in reality, we will see that this is true most of the time the fringe grows exponentially.</p>
<p>Now let's look at this.</p>
<p>What does this really mean?</p>
<p>So exponential time complexity.</p>
<p>That means when the problem grows by one step, the size of the problem, the time it takes to solve this problem, doubles.</p>
<p>Or in general, it grows by a factor of B.</p>
<p>This may or may not be acceptable, depending on how much time you actually have.</p>
<p>When it grows into the region of years and centuries, this will no no, longer be acceptable, of course.</p>
<p>But quite often we have another hour we can give our.</p>
<p>But what about exponential space comlexity?</p>
<p>Well, what this means is that a star will eventually exhaust the computer's memory.</p>
<p>So first, it will eat up all the RAM, then it'll eat up all the virtual memory.</p>
<p>And eventually, it'll just have no more memory left.</p>
<p>And what happens then?</p>
<p>Well A&#42; simply fails.</p>
<p>The algorithm terminates because it's out of memory, and we don't even know whether there is a solution or not.</p>
<p>As an example, the 8 puzzle will still fit into memory, but the bigger version, on the 4 by 4 grid, the 15 puzzle, usually does not fit into memory.</p>
<h3> <span class="mw-headline" id="b_A.2A_Graph_Search">b A* Graph Search</span></h3>
<p>The fact that the 8 puzzle, the search space usually fits into memory means we can do some interesting analysis on this.</p>
<p>So here's the example we've seen earlier.</p>
<p>This is the same initial state we've seen before.</p>
<p>What we have for this initial state is that we can move in all 4 directions and so we have 4 successors for this state and they are shown here as the 4 successors of this node.</p>
<p>Note that all the arrows here are bi-directional because, in this search problem, as in many others, actions are reversible, which means I can always go back and forth between 1 state and 1 of its successors.</p>
<p>So there's already a little optimization potential for our search algorithm.</p>
<p>We can avoid reversible actions.</p>
<p>So, looking at the successes we have 3 possible actions here.</p>
<p>But of course, 1 of them would us get back to the initial state.</p>
<p>So, in fact, there's only 2 successes that we would generate here.</p>
<p>For this, again, we have 3 possible actions here.</p>
<p>3 possible actions.</p>
<p>And there, 3 possible actions.</p>
<p>Which means, for each of those.</p>
<p>Successors we generate 2 more successors as shown here.</p>
<p>So we look at 1 example here where we have moved the empty tile up and this gives us those 2 successors and in this case there are 2 actions here and 2 actions there which means for each of those as only 1.</p>
<p>Possible, real successor, but again note, it's a by directional arrow, so, we can go back and forth between these states.</p>
<p>And so on I can follow this path, and generate more successors.</p>
<p>You can see there, I've ignored some, that I didn't generate, or didn't look at in detail, and so on.</p>
<p>Here is where I'm simply running out of slide, otherwise I would have gone a little further.</p>
<p>And then you would see what I'm effectively doing here, is the moves I'm following are simply shifting the empty tile in this circle.</p>
<p>And, what this means is eventually, this path will lead up here again.</p>
<p>We're back at our initial space.</p>
<p>So, this shows that as a graph, and it's a graph that contains quite some long loops.</p>
<p>And as I said before we can actually create the whole search space and then analyze how deep the different solutions are.</p>
<p>And this is what this graph shows us.</p>
<p>We have here the depth of the different solution nodes, so what we did is we started a generation from the solution node and generated all the different nodes that are availible in the search space and these are the depth at which they are from the solutions.</p>
<p>And here we've the number of different states that are at that depth.</p>
<p>Altogether there's about 180,000 different states in the search space.</p>
<p>And we can see that most of the states are actually at around depth, what is this, 24.</p>
<p>So, as I have said before the number of states we generate in both tree and graph search grows exponentially.</p>
<p>So what we can expect is that this will initially more or less follow the states base here that we generate the No's as they are available.</p>
<p>But then, then for tree search this will continue to grow exponentially so this goes up here somewhere, and out of the slide.</p>
<p>But then we see for the worst case here, at depth 31, there's really only two different states.</p>
<p>And if we wanted to use tree search to search for those states, we would have to generate all those states up here where, in fact, there are only 2.</p>
<p>So what this would lead us to expect is that tree search is reasonably efficient up to about this depth here and then becomes incredibly inefficient and we should use graph search for these worst case scenarios.</p>
<p>But then graph search also has some additional costs.</p>
<p>We need to maintain that hash table, as we've seen.</p>
<p>And comparing states in the hash table, well depending on the complexity of these states, this can take up quite some time too.</p>
<p>So there's a basic trade off here.</p>
<p>Another problem is related to permutations of solutions.</p>
<p>By that I mean, if we are given one solution part from the initaial state to a goal node, if we can swap some of the states and some of the actions on that path to obtain a different solution path, then this is a permutations of that solution, and this creates problems for that star.</p>
<p>Often permutations are allowed if we have independent actions in our domain.</p>
<p>So if for all states, if we first apply one action and then another, we get one state and that is the same state as applying the actions in the reverse order, then we say these 2 actions are independent.</p>
<p>We could, in principle, execute those 2 actions in parallel, but isnce we are only looking at action sequences so far, we have to choose an order.</p>
<p>And since the order doesn't matter, we have a permutation in our solution here.</p>
<p>The state that is the result of applying these two actions, in which ever order we choose them is the same.</p>
<p>Now why is this a problem for a star?</p>
<p>And here is the worst case scenario.</p>
<p>This is unrealistic but it is the worst case.</p>
<p>Suppose we are given a the search problem where we have an intiatial state and we found a path to our goal state and they're many intermediate notes here.</p>
<p>And our optimal path has a lenth of n, and the worst case is that All these n actions are independent.</p>
<p>It is easy to show that if all the pairs of actions are pair wise independent, then we can basically permute those actions into any order we like, and it doesn't change the outcome of the plan.</p>
<p>Now remember what I said earlier about contours, namely that a star, if the optimal solution length is n in this example, will need to generate all the nodes within a smaller contour.</p>
<p>So, if the F value is n-1 then this is the contour that a star will generate with the FLU being equal to n-1.</p>
<p>What this means is that it will generate all those permutations that have n-1 nodes.</p>
<p>So what this means is in this part there's n-1 factorial, different combinations of solutions.</p>
<p>And, we'll explore all these paths before it moves on to the first solution.</p>
<p>Of course, then it will find n factorial solutions for this problem which are a lot of solutions.</p>
<p>And, you should now understand that there is no way around this, of course.</p>
<p>So you can now go and experiment with this by programming all this in your language of choice.</p>
<p>Specifically, why don't you try to generate this graph here that tells us how many different states exactly there are at the different depths.</p>
<p>So for example, how many states would you find here at depth 27?</p>
<p>That is a question.</p>
<h2> <span class="mw-headline" id="Good_Heuristics">Good Heuristics</span></h2>
<p>Before we move on to the planning algorithms, I want to tell you a little bit more about heuristics and specifically, what makes a good heuristic and how do we find these.</p>
<p>We have defined a heuristic in a technical sense, as a function that estimates the distance to the nearest goal node.</p>
<p>But a heuristic obviously has colloquial meaning as well and that's what's defined here.</p>
<p>So it's, it's heuristics are criteria, methods, or principles for deciding which among several alternative courses of action promises to be the most effective.</p>
<p>So the alternatives that we're looking at are of course the successor nodes that we want to evaluate.</p>
<p>We want to see which one of those is the most promising.</p>
<p>And what we need to do is we need to decide which one to follow first.</p>
<p>Of course we keep in mind the others and follow those later.</p>
<p>We use heuristics in everyday life.</p>
<p>For example, here you see a heuristic for deciding whether a pineapple is ripe.</p>
<p>If you ever go into a shop and want to buy a ripe pineapple, this may work for you, or it may not.</p>
<p>So, if you can rip out the inner leaves easily and the fruit smells like a pineapple should smell, then you're looking at a ripe pineapple and this is one you can buy, assuming the price is right.</p>
<p>If there are no pineapples where you are, tough luck.</p>
<p>The reason why I've circled the word, deciding, here, is because this gives us a different idea of what heuristic can be.</p>
<p>All we need from a heuristic is just a decision.</p>
<p>Which alternative looks best.</p>
<p>So it doesn't really need to be related to the distance, to the goal, at all.</p>
<p>All we need is a function that decides which one is the best node.</p>
<p>If we have that function, that would constitute a perfect heuristic because it would tell us which successor to follow.</p>
<p>And which path we should explore first.</p>
<p>If that deciding.</p>
<p>Is correct.</p>
<p>Then we have a perfect heuristic.</p>
<p>Another example of a heuristic you've applied probably not too long ago, is in choosing this course.</p>
<p>You looked at the introductory material to this course.</p>
<p>And used this as information to decide which of the courses that were available you want to take.</p>
<p>So you used heuristic information about the course to make this choice.</p>
<p>Okay, assuming you understand what a heuristic is, now the question is when is a heuristic a good heuristic?</p>
<p>And if we have a given search problem and a given heuristic we can evaluate that heuristic by looking at the number of states that are generated for a specific problem with that heuristic.</p>
<p>And if we have two heuristics, we could compare them by using the number of states they generate to see which is better.</p>
<p>The better heuristic would generate fewer states.</p>
<p>But that is only heuristic for deciding which heuristic is better.</p>
<p>because what we are really after is, we want solutions as fast as possible, so we have time constraints to respect.</p>
<p>And computing a good heuristic also takes time.</p>
<p>Unfortunately, this means we are dealing with a trade-off here.</p>
<p>And this is the trade-off.</p>
<p>Some heuristics are simple.</p>
<p>So they provide a simple way of discriminating between the successes we generate.</p>
<p>And since we opt-, want to optimize the time we take to research.</p>
<p>Simplicity here means easy to compute.</p>
<p>We want to have a fast way to compute the heuristic value for a given state.</p>
<p>But heuristics that are simple to compute are often not accurate.</p>
<p>And accurate is the other property in our trade-off here.</p>
<p>A heuristic, unless it is perfect, does not provide a guarantee that it tells us which the best successor is to explore next.</p>
<p>So, there's no guarantee that it identifies the best course of action.</p>
<p>But if it's a good heuristic, it will do this more often than a heuristic that is not as good.</p>
<p>So, a good heuristic does this sufficiently often.</p>
<p>It's accurate.</p>
<p>It tells us which is the best course of action, or in the technical sense, it tells us how far the goal state really is.</p>
<p>So now we know what a good heuristic is the important question than is how can we find good heuristics for a given problem?</p>
<p>And this is somewhat similar to the problem of problem formulation it's a matter level problem.</p>
<p>We have to find good heuristic to do good search.</p>
<p>Just as a good problem formulation will ease search.</p>
<p>That means this is a very important question.</p>
<p>And the answer is, there are methods for doing this and we will look at some general methods next.</p>
<p>But then there is a different question that is just as important.</p>
<p>If we have a method, can we automate this method?</p>
<p>And the answer again is yes, but that's a very complex process and we will get to that later in this course.</p>
<p>In fact, automatically finding good euristics has probably been one of the most hot topics in the AI planning research over the last ten, fifteen years.</p>
<p>So here's a general method for finding good heuristic.</p>
<p>The idea is based on a simplified problem or a relaxed problem.</p>
<p>Usually a problem is defined in terms of states, and actions that are applicable in states, and achieves certain things in, successor states.</p>
<p>So what we have is restrictions on these actions when they are applicable, when we can use them, and which states they are useful.</p>
<p>What we can do is relax those restrictions.</p>
<p>So we can look at the restrictions defined in the original problem, and drop some of them or make them less hard.</p>
<p>And that gives us a new problem, which is the relax problem.</p>
<p>And then the following should be fairly obvious to see.</p>
<p>Namely that the cost of an optimal solution for a relaxed problem is an admissible heuristic for the original problem.</p>
<p>In fact it's admissible and consistent, but since we haven't defined consistent yet, I won't go into that.</p>
<p>So you just, you should see why it is admissible.</p>
<p>It's very simple to see because the optimal solution for our original problem is of course also a solution for our relaxed problem.</p>
<p>We've only relaxed the restrictions on the actions.</p>
<p>So, an optimal solution for the relaxed problem can have, at most, as many steps as the optimal solution for our original problem, because that is a solution for the relaxed problem.</p>
<p>In general, what we have is that in our relaxed problem, we allow shortcuts to be taken with these relaxed actions that are not possible in our original problem, so if we take out these shortcuts, we end up with longer solutions.</p>
<p>And since this method is quite abstract I want to illustrate this with an example and we will use the 8 puzzle that we've seen before and the actions that are defined for this 8 puzzle.</p>
<p>So here is the original condition that we had for the applicability of actions.</p>
<p>Namely a tile can move from square a to square b if a is horizontally or vertically adjacent to b and b is blank.</p>
<p>So the condition we have here is a conjunction of two sub-conditions and that should tell us how we can build a relaxed condition quite easily.</p>
<p>Namely by dropping one of the two parts or both of them.</p>
<p>And this is how this works.</p>
<p>If we drop the second part.</p>
<p>Then B is blank.</p>
<p>We end up with this heuristic here.</p>
<p>And that tells us that a tile can move from square A to B if.</p>
<p>A is adjacent to B.</p>
<p>I've dropped the horizontally or vertically.</p>
<p>And what we get there, of course then, is the Manhatten block distance heuristic.</p>
<p>Because we now allow a tile to be moved, no matter where it is moving to, which gives us exactly the block distance for this tile.</p>
<p>And if we add all those up, that's the Manhatten block distance we've seen.</p>
<p>The second one is, if we drop the first part of this definition, so that the adjacency distance is dropped, then we end up with a heuristic.</p>
<p>That's a tile can move from A to B, if B is blank.</p>
<p>And finally we can have a heuristic if we drop both conditions that says a tile can move from a to b and there are no conditions.</p>
<p>And of course this then gives us the misplaced tiles heuristic.</p>
<p>We simply count those tiles that can move to where they need to be in one step because there's no conditions on how they can move.</p>
<p>So what you see here is we've derived two of the heuristics that we've already used for the 8 puzzle using the method we've just introduced by using relaxed conditions of the actions that are applicable in our problem.</p>
<p>So this concludes this section of the course on AI search technology and the A&#42; algorithm.</p>
<p>You should understand now that a heuristic function encodes problem-specific knowledge in a problem-independent way by mapping a state to a real number.</p>
<p>This information about search states can be used to make the search more efficient.</p>
<p>In general, this is done by using an evaluation function that tells us how good a search node is.</p>
<p>Greedy best first search simply uses the heuristic function as the evaluation function but the better solution is provided by the A&#42; algorithm.</p>
<p>The evaluation function used by A&#42; is simply the sum of the heuristic function for a node plus the cost of getting to that node in the first place.</p>
<p>We've also seen that A&#42; is optimal.</p>
<p>It will always find an optimal solution.</p>
<p>And it is optimally efficient.</p>
<p>It does not expand more nodes than absolutely necessary.</p>
<p>But I've also shown you that A&#42; is not the answer to all questions, specifically when it comes to graph surge.</p>
<p>Finally, since good heuristics are so important for A&#42;, I've also talked a little bit about what good heuristics are and how to find them.</p>
<p>So now a big tick because you understand all of that.</p>
<h2> <span class="mw-headline" id="Structured_States">Structured States</span></h2>
<h3> <span class="mw-headline" id="a_Structured_States">a Structured States</span></h3>
<p>In previous segments, we have looked at a general technique used in Artificial Intelligence to solve problems, namely search.</p>
<p>We have seen how the efficiency of search can be greatly increased through the use of heuristics.</p>
<p>In this segment, we will look at one of the early systems developed in AI for planning, that is the Strips planner.</p>
<p>One of the advances made by the Strips planner, was the representation used by it.</p>
<p>The Strips representation still under lies much of the research done in AI planning today, and the first three parts of the segment, will be concerned with the representation.</p>
<p>Once we understand the representation, we can see how search algorithms as we've seen them previously, can be used to solve planning problems, and that is the remainder of this segment.</p>
<p>The first thing we will look at now, is how states were represented in the Strips representation.</p>
<p>The way we have looked at search so far is we have treated states as black boxes.</p>
<p>That is we have very limited access to the internal structure of a state or an action.</p>
<p>Of course, there are some things we can do with states.</p>
<p>For example, we can see whether it is a goal state or not, and this is necessary to terminate the search.</p>
<p>We can also find out what the applicable actions are, and this is related to the successor states.</p>
<p>Remember, we have defined the successor function to return an empty set if there are no applicable actions.</p>
<p>So, these two are related to each other, and give us information about what can be achieved from this state.</p>
<p>More simple functions about states would be an equality test and a hash function.</p>
<p>We need those two to turn tree search into graph search.</p>
<p>And finally, we've seen how a heuristic estimate gives us some information about a state that we can use to guide the search algorithm.</p>
<p>But we had no other access functions to look into the states and actions, so they are black boxes.</p>
<p>But our aim in planning is to reason about these states and actions and that is very difficult if we don't have access to the internal structure.</p>
<p>Just think about what we have learned at the end of the last segment, mainly that it is possible to, to automatically derive good heuristics but this is only possible if we know something about the states and actions in our search problem, so we need to know the internal search structure.</p>
<p>The strips representation gives us a standardized ways of looking at the internals of states, and actions.</p>
<p>Now this is not as pretty as it here shown in the picture, but there will be a formal language that we will define, that describes what is going on in the state and what actions do to the state.</p>
<p>And that is the fundamentals of the strips representation we will look at now.</p>
<p>The strips representation is based on first order predicate logic.</p>
<p>This means we have objects in our domain and these objects are somehow related to each other.</p>
<p>Lets look at our dock worker robot example.</p>
<p>In the dock worker robot domain we have several types of objects that we are looking at.</p>
<p>The first type we are looking at are the robots.</p>
<p>We will introduce symbols like these, robot one and robot two to refer to these robots in our logic.</p>
<p>So we can use this symbol to denote the robot with the number one and the robot with the number two and so on.</p>
<p>And we can have an arbitrary number of symbols denoting robots.</p>
<p>They are of the type robot, that means they all represent a robot.</p>
<p>Robots are of course, the objects that carry a container from one location to another adjacent location.</p>
<p>The next type of objects we have are cranes.</p>
<p>And again, we have symbols to denote the different cranes that are in our domain.</p>
<p>Cranes can be used to stack or unstack containers from a pile.</p>
<p>Or load or unload containers onto a robot.</p>
<p>As opposed to robots, cranes have a fixed location, so they cannot move.</p>
<p>And then we have of course containers.</p>
<p>Containers are denoted by these symbols here, these can be arbitrary symbols of course and they are the things we are moving around in our domain.</p>
<p>Containers can be in some pile or they can be loaded onto a robot or they can be held by a crane.</p>
<p>Robots, cranes, and containers are physical objects that means they're tangible and we can see these objects in the real world.</p>
<p>The next two types, do not have that property.</p>
<p>The first one is locations, which denote places that we have in our world, again we introduce symbols, to represent these different places.</p>
<p>These could be a storage area, a dock, a ship, or some parking or passing area in our domain of interest.</p>
<p>And then we have piles of containers again we have symbols for these, pile one, pile two here.</p>
<p>And a pile can be empty in which case there's no mass to it, it's not a tangible object or it contains some containers in which case we can actually see the pile and the containers that belong to it.</p>
<p>Each pile is attached to a single location so we cannot move the piles around.</p>
<p>And at the bottom of each pile we have a pallet.</p>
<p>This is denoted by the symbol pallet and despite the fact that we have several piles and therefore several pallets at the bottom of these piles we only need one symbol to denote all these pallets as we don't need to distinguish the different pallets.</p>
<p>So, in a state we have objects and these objects are grouped into types as we've seen here.</p>
<p>And each individual object is denoted by a unique symbol in our domain.</p>
<p>Once we have identified the objects and types that exist in a domain, we need to specify them in a way that the planner can take as input.</p>
<p>Which means we have to write a text file that defines these objects and types.</p>
<p>In this file we need to adhere to a specific syntax, such that the planet will understand what we're trying to say to it.</p>
<p>The syntax understood by most planners these days is the PDDL syntax.</p>
<p>And PDDL stands for Planning Domain Definition Language.</p>
<p>Here is an example of how we can specify a domain in PDDL that defines the types we have just seen in the previous slide.</p>
<p>The first thing we do is we tell the system that we are trying to define something.</p>
<p>And what we are trying to define is a domain.</p>
<p>And this domain has a name.</p>
<p>This is an arbitrary name, and does not really matter at this stage.</p>
<p>But the keywords define on domain are always there.</p>
<p>Next, PDDL allows us to specify requirements for a specific domain.</p>
<p>In this case we specify that our domain requires strips and typing.</p>
<p>Strips is actually always assumed and typing is a very simple extension, but there are many other extensions that you can use.</p>
<p>The typing extension is, of course, required for the types, we will see next.</p>
<p>The types are introduced by the keyword, types, I've seen here.</p>
<p>And then we simply name the different types, the symbols that identify them.</p>
<p>Location, pile, robot, crane, container.</p>
<p>These are the types we've seen in the previous slide.</p>
<p>Pddl also allows you to insert comments into your input file.</p>
<p>And these are introduced by the semicolon symbol.</p>
<p>Everything from the semicolon to the end of the line is considered a comment, and is therefore not part of the formal language.</p>
<p>It will simply be ignored by the planning system.</p>
<p>Of course, there is a lot more to planning domains than just the types and we will look at that next.</p>
<h3> <span class="mw-headline" id="b_Structured_States">b Structured States</span></h3>
<p>The strips representation is based on the idea that in a world state, we have objects that are somehow related to each other.</p>
<p>That means we need to define some relations that we can use to relate the objects to each other.</p>
<p>Relations are also known as predicates.</p>
<p>For a given world state, a relation between several objects can either hold or not hold.</p>
<p>That is, it is either true or false.</p>
<p>Here are the relation defined for the dock worker robot domain in the PDDL syntax.</p>
<p>The first predicate mentioned here is the adjacent predicate.</p>
<p>Which defines when two locations are next to each other.</p>
<p>So the way this works is that we name the relation that we want to define.</p>
<p>And then we give the parameters to this relation.</p>
<p>In this case, they are two locations.</p>
<p>They are denoted by variables here.</p>
<p>You can recognize a variable in this syntax because it starts with a question mark.</p>
<p>So this is not a specific location that we've defined, but just a variable.</p>
<p>And this is followed by the minus symbol with the type of those variables.</p>
<p>So what this is defining is that adjacent is a relation that is defined over two locations.</p>
<p>L1 and L2.</p>
<p>And again, there's a comment here that explains this more readable.</p>
<p>Location L1 is adjacent to L2.</p>
<p>Then we have a relation attached, which defines where a pile, P, is.</p>
<p>Namely at some location, L.</p>
<p>And the relation, belong, which defines where the crane is also at some other location.</p>
<p>Note that these variables, despite having the same name, have no relation to each other.</p>
<p>They're just used locally in this definition of this predicate.</p>
<p>Together, these three relations define the topology of the domain.</p>
<p>One thing that is special about these relations is that they are static.</p>
<p>That is, once they are defined for a specific state, they will never change from state to state.</p>
<p>Locations are adjacent, they will always be adjacent.</p>
<p>There's no action that can change that.</p>
<p>The other relations here are known as dynamic or fluid relations, because they can change from state to state.</p>
<p>For example, the at relation tells us where a robot is currently, it tells us at which location this robot is currently located.</p>
<p>Then we have an occupied location, which is a unary relation, it takes only one argument, and tells us whether a given location is occupied by a robot at that location.</p>
<p>Then we have the loaded relation which tells us whether there is a container loaded onto a robot, or which container is loaded onto a robot.</p>
<p>An unloaded is true if robot is not loaded with a container.</p>
<p>Then we have a holding relation, which tells us which container is held by a crane.</p>
<p>And we have an empty relation, which is true, if and only if the crane is not holding a container.</p>
<p>You can see here that these relations are not independent of each other.</p>
<p>For example, holding and empty are closely related.</p>
<p>If the crane is empty, it cannot hold the container.</p>
<p>And vice versa, if it is holding a container, it cannot be empty.</p>
<p>The same goes for loaded and unloaded, and at and unoccupied.</p>
<p>These two relations depend on each other.</p>
<p>Okay.</p>
<p>Remaining relations.</p>
<p>We have an IN relation, which tells us where a container is, in which pile a container is currently located.</p>
<p>Then we have a TOP relation, which tells us which container is at the top of a given pile.</p>
<p>And, finally, we have an ON relation, which tells us which container's on which other container.</p>
<p>The second container here can also be the pallet, which is technically defined as a type of container.</p>
<p>So these are the predicates used in the dock worker robot domain, defined in the PDDL syntax.</p>
<p>Now, here is a formal definition of what a state in the strips representation actually is.</p>
<p>So we start off with a first order language, L.</p>
<p>And in this language, we have finitely many predicate symbols.</p>
<p>These are the symbols we've just seen how to define them in PDDL.</p>
<p>We also have finitely many constant symbols.</p>
<p>These are the symbols representing the individual objects in our domain.</p>
<p>And we have no function symbols.</p>
<p>And we haven't defined any function symbols.</p>
<p>A state in a strips planning domain then is a set of ground atoms over this language L that we've just defined.</p>
<p>Let me go into this.</p>
<p>By an atom we mean a predicate with an appropriate number of objects that we have just defined in the previous slide.</p>
<p>An atom is considered ground when all its arguments all the objects it relates are real objects as opposed to variables so there must not be variables in the atoms we define here.</p>
<p>Then a state is simply a set of these ground atoms over this language L.</p>
<p>Logically, we interpret this as a cun junction that means each and everyone of the atoms in a state holds in that state, it must be true in that state.</p>
<p>So we can say that a ground atom p holds in a state s, if and only if p is an element of this set s.</p>
<p>So a state is a set of ground atoms.</p>
<p>And if p is an element of that set.</p>
<p>Then we say that p holds in that state.</p>
<p>And vice versa, if p is not an element of that set.</p>
<p>We say that p does not hold in that state.</p>
<p>We call that the closed world assumption.</p>
<p>And this is quite an important assumption made by the strips representation, as we define it here.</p>
<p>We can also define what it means for a state to satisfy a set of ground literals, G.</p>
<p>I need to explain this.</p>
<p>A literal is basically an atom that is either a positive or a negative.</p>
<p>So it can be an atom or a negated atom.</p>
<p>G is our set of ground literals, and I've used the letter G because eventually this is how we will represent goals in our planning problems.</p>
<p>And this is simply the symbol we use to denote that S satisfies G.</p>
<p>And we consider this the case if every positive literal in G is also in S.</p>
<p>So every positive literal in G holds in S, and every negative literal in G does not hold in S.</p>
<p>So it's not an element of S.</p>
<p>Let's illustrate this with an example.</p>
<p>Depicted here is a state in the Dock Walker robot domain.</p>
<p>I hope you all intuitively understand what's going on in this picture.</p>
<p>But for our planner we need to translate this state into our formal representation in the strips representation.</p>
<p>This means we need to define the set of ground atoms that hold in this state.</p>
<p>We can do this by going through the relations individually or in some other order.</p>
<p>The first relation we defined earlier is the adjacent relation and that tells us which locations are reachable from which other locations.</p>
<p>So we have two locations here, location one and location two.</p>
<p>And they are connected by this path.</p>
<p>So what we have is that location one is adjacent to location two, and vice versa.</p>
<p>And that's what we've got here.</p>
<p>We need to actually write down both ways of this relation.</p>
<p>The symmetry of this relation is of course not known to the planner automatically.</p>
<p>Then we have two piles, p1 and p2.</p>
<p>And they are both at location one.</p>
<p>And that's what we express with these two ground atoms here.</p>
<p>That p1 is at location one.</p>
<p>And p2 is also at location one.</p>
<p>And then we have one crane, denoted by the symbol, crane one.</p>
<p>And again, we write down that the crane one belongs to location one.</p>
<p>So this defines the topology of the domain.</p>
<p>What we also have in this example is this robot, R1.</p>
<p>And we can see here that the robot is at location two, which is this relation here.</p>
<p>And that means that location two is occupied by this robot.</p>
<p>And we can also see that the robot is unloaded, which means there's no container on the robot.</p>
<p>Also the crane isn't holding a container, so empty crane one must also hold in this state.</p>
<p>Now, what remains to be described is the two stacks of containers we see here.</p>
<p>The first stack consist of this container C1 at the bottom, and C3 at the top.</p>
<p>And we have got here that these two containers, C1 and C3 are both in the pile P1.</p>
<p>Then we have C3 on top of C1, you can see that here, and C1 is on top of the pallet.</p>
<p>The top of the pile is the container C3 which defines this pile at location one and that is pile one.</p>
<p>The second pile only contains one container C2, and that container's in the pile P2.</p>
<p>And it is immediately on the pallet and also constitutes the top of this pile.</p>
<p>These are all the ground atoms that hold in the state depicted here.</p>
<p>And what this means is, according to the closed world assumption, that all the atoms that are not mentioned in the state do not hold.</p>
<p>They are not true.</p>
<p>For example the ground atom at our one location one, does not hold, because at the location one there is not the robot R-1.</p>
<p>So this is false.</p>
<p>It is not part of our state, it is not in that set, and the closed world assumption means it is false.</p>
<p>So this is what a state looks like in the strips representation.</p>
<p>It is subset of ground atoms.</p>
<h2> <span class="mw-headline" id="Structured_Operators">Structured Operators</span></h2>
<h3> <span class="mw-headline" id="a_Structured_Operators">a Structured Operators</span></h3>
<p>Now, we have seen what the strips representation for world states looks like.</p>
<p>The internal structure is represented as a set of ground atoms.</p>
<p>Where each atom expresses a relation that must hold between objects in the domain.</p>
<p>The next step, then, is to look at operators with internal structure.</p>
<p>And actions that are instances of these operators.</p>
<p>Remember that actions are what give us the state transitions in our state transition system.</p>
<p>For states I started with some examples and some informal definitions and followed this with the formal dentition of what a strips representation state is.</p>
<p>For operators I'll do it the other way around.</p>
<p>I will start with the formal definition of what a strips operator is.</p>
<p>A planning operator in the strips representation is simply a triple, so means it consists of three different things.</p>
<p>A name, the name of the operator, the preconditions of the operator, and the effects of the operator.</p>
<p>The name of the operator, the name that we can use to refer to this operator, is simply given by this syntactic expression.</p>
<p>So it consists of a unique name symbol that we can use to refer to this operator.</p>
<p>It must be unique to this operator, meaning no other operator can have the same symbol.</p>
<p>And it consists of some parameters which characterize the objects that are manipulated by this operator.</p>
<p>These objects are defined as variables for an operator as an operator is generic.</p>
<p>They may also be typed if we are using the types extension in PDDL.</p>
<p>The components that define the internal structure of an operator are the preconditions, and the effects of the operator.</p>
<p>And both of these are sets of literals.</p>
<p>Remember that a literal is either a positive or a negative atom.</p>
<p>So, a relation between objects.</p>
<p>Where the objects are named by the variable given in the operator name.</p>
<p>X1 through xk here.</p>
<p>The preconditions are simply those literals that we want to be satisfied in the state before we execute an action.</p>
<p>The effects are the things that are true after we've executed an action.</p>
<p>Again, the effects can be literals, which means they can be positive or negative, and traditionally the positive literals that are effects are often referred to as the ad list, as this is something that is asserted in the new state after an action is applied, and the negative literals are referred to as the delete list as these are removed from the state.</p>
<p>An operator is generic in the sense that it only specifies what is manipulated by the operator, as variables.</p>
<p>An action, on the other hand, is specific because there's a ground instance of a planning operator.</p>
<p>So if we take all the variables and choose values, objects in our domain, for these variables, then our operator becomes an action.</p>
<p>And of course, there can be many actions that are instances of the same operator in our planning domain.</p>
<p>Now, here are some examples of operators defined for the dock worker robot domain.</p>
<p>The first example we will look at is the move operator.</p>
<p>Move is the symbol that identifies this operator, and the name of the operator is given by all of this.</p>
<p>This expression here.</p>
<p>Namely, the symbol that identifies it plus the three variables that are used to identify its parameters.</p>
<p>And these are a robot and two locations.</p>
<p>The location we are moving from and the, the location we are moving to.</p>
<p>Then, the internal structure is defined by preconditions and effects.</p>
<p>There are two positive pre-conditions in this example.</p>
<p>Namely that the two locations when moving between must be adjacent.</p>
<p>The location when moving from must be adjacent to the location we are moving to.</p>
<p>And the robot R, the robot that we are moving must be at the location we are starting from.</p>
<p>And then we have one negative precondition and that is given here.</p>
<p>This is simply the symbol for negation, that's the NOT symbol in logic.</p>
<p>the negative precondition here says the location m we are moving to must not be occupied by a robot when we move there.</p>
<p>So three preconditions.</p>
<p>Two positive one negative.</p>
<p>And then we have the effects.</p>
<p>Again two positive effects, and two negative effects here.</p>
<p>Let's look at the positive effects first.</p>
<p>When we move robot R from location L to location M as a result the robot will be at location M.</p>
<p>And the location M will be occupied as a result of this action.</p>
<p>These are the effects that are added by this operator.</p>
<p>Hence, this is known as the add list.</p>
<p>the delete list, or the negative effects of this operator, are that the location L is no longer occupied.</p>
<p>We've just moved the robot away from this location.</p>
<p>And the robot is no longer at this location, L, that we've just moved away from.</p>
<p>There are a few things that are quite common about this operator.</p>
<p>But they are not part of the definition of a strips operator.</p>
<p>And those are, all the parameters are actually mentioned in the preconditions.</p>
<p>R, l, and m.</p>
<p>All of those are mentioned in these three conditions.</p>
<p>Also very common is that we have the negative effects of the operator, the delete list, as part of the preconditions, only negated.</p>
<p>For the second negative effect, this is explicit here.</p>
<p>And for the first one, it is implicit.</p>
<p>Of course, the location l was occupied before the robot moved away from that.</p>
<p>But because we have this precondition, it was not necessary to mention that.</p>
<p>Quickly, the two other examples.</p>
<p>The second one is that we're loading.</p>
<p>With crane K at location L.</p>
<p>We're loading container C onto robot R.</p>
<p>These are the four arguments to this operator.</p>
<p>And all this is the name of the operator.</p>
<p>Again, we have preconditions and effects.</p>
<p>And they are divided into positive and negative preconditions and effects.</p>
<p>In fact, we have no negative preconditions for this operator.</p>
<p>So the positive preconditions are that the crane must belong to that location.</p>
<p>It must be at that location.</p>
<p>the crane must be holding the container.</p>
<p>So it can load it onto the robot, which must also be at that location.</p>
<p>And must be un-.</p>
<p>Loaded so it cannot have a container on it.</p>
<p>The effects are.</p>
<p>That now the crane will be empty after we've loaded the container onto the robot.</p>
<p>So it will no longer hold the container, but the container will be loaded onto the robot, and the robot will no longer be unloaded.</p>
<p>Similarly there's the put action which has as parameters a crane, a location, a container, another container and a pile into which we're putting the container C.</p>
<p>The crane must be at that location and also the pile must be at that location and of course we want the crane to hold to the container.</p>
<p>And this precondition here tells us the meaning of this second container D that is a parameter that to put action, namely it is the container that is on top of the pile before we execute our action.</p>
<p>And the reason why we need to know this is simply such that we can withdraw this from our state.</p>
<p>So the container D is, after we've executed the action, no longer on top of the pile because we have the container C on top of D and now C is the new top of the pile.</p>
<p>So C will also be in our pile, the crane will be empty, and the crane will no longer hold container C.</p>
<p>there's also an unload and a take action that reverse the load and the put action but I won't go through those in detail here.</p>
<p>In the previous slide, we have seen some examples of operators, of what they look like logically.</p>
<p>Now I will introduce the PDDL syntax, for defining an operator in a planning domain.</p>
<p>This example, again, starts with a comment, introduced by the semicolon, that tells us what this action will actually do.</p>
<p>And here is the first slightly confusing thing about the PDDL definition.</p>
<p>Namely, the operator is called an action in PDDL.</p>
<p>So, in the strips representation, we consider an action to be an instance of an operator.</p>
<p>In PDDL, this is what is called an action.</p>
<p>This is actually not uncommon in the planning literature, that terminology is not agreed.</p>
<p>So you always have to make sure that you understand what authors mean by the different terms like action or action type or operator, et cetera.</p>
<p>So in PDDL, this action has the unique name, move, that can be used to identify this, action, this operator.</p>
<p>And it has several parameters that are defined here.</p>
<p>And there is one parameter which is this one, a variable.</p>
<p>Remember, variables start with the question mark R, which is of type robot.</p>
<p>And then it has two more variables, both of the type location.</p>
<p>This is what we call the name of the operator.</p>
<p>In the definition of a strips planning operator two slides ago.</p>
<p>Next we have the preconditions and effects.</p>
<p>So the preconditions are introduced by the preconditions symbol, and then are just listed.</p>
<p>It is also exclusively stated in PDDL that this is a conjunction.</p>
<p>Of pre-conditions.</p>
<p>So they all must hold.</p>
<p>And that's what we introduce with the an symbol.</p>
<p>PDDL also allows other pre-conditions, dis-disjunctive pre-conditions.</p>
<p>But we will not look at those here.</p>
<p>So what we have is that, the first pre-condition is that two locations must be adjacent.</p>
<p>The robot must be at the first of those two locations we're starting from.</p>
<p>And this location must not be occupied.</p>
<p>Slightly different syntax, but exactly the three pre-conditions we've seen in the previous slide.</p>
<p>Similarly for the effects, they're listed here.</p>
<p>They are a conjunction of effects.</p>
<p>And it's the same four effects we've seem previously.</p>
<p>Namely that the robot must be at the two location, as a result of the action.</p>
<p>And this location will be occupied.</p>
<p>The robot is no longer at the from location, which is not, no longer occupied.</p>
<p>You should now be able to express the other two operators introduced in the previous slide, in the PDDL presentation.</p>
<p>So why don't you do that as a little exercise here.</p>
<h3> <span class="mw-headline" id="b_Structured_Operators">b Structured Operators</span></h3>
<p>What we still need to formally define is when an action is applicable in a state, and what the corresponding state transition is.</p>
<p>To do this I will first introduce a little notation.</p>
<p>Suppose we're given a set L of literals.</p>
<p>So, these are positive and negative atoms.</p>
<p>Then I can use this here, this symbol L plus to refer to those atoms that are positive in L and I can use L L minus to refer to those atoms whose negations are in L.</p>
<p>So L plus and L minus are sets of atoms namely those that are positive and negative in L respectively.</p>
<p>Now, let A be an action, and S be a state.</p>
<p>And when I say action here, I mean action, a ground instance of an operator.</p>
<p>Then we can say that the action A is applicable in the state S, if two conditions hold.</p>
<p>Namely, all the positive preconditions of A, preconditions plus, of A, must be a subset of the state, S.</p>
<p>And we also want none of the negative preconditions of A to be in S and this can be expressed by this expression.</p>
<p>The intersection of the negative preconditions and what is in the state S must be empty.</p>
<p>In other words there can not be a negative precondition that is also a true in the state.</p>
<p>A is applicable in S if all the positive preconditions hold in S and none of the negative preconditions hold in S.</p>
<p>And now we can define the state transition function gamma for a given state.</p>
<p>That's the state in which we are initially.</p>
<p>And the action A that we are applying in this state.</p>
<p>And this can be defined as follows.</p>
<p>We start off with the state, and we deduct all the negative effects.</p>
<p>As I told you earlier, this is the delete list.</p>
<p>So we delete this from the state.</p>
<p>And then we add all the positive effects so we add them to the state.</p>
<p>And again, I've already explained.</p>
<p>This is the add list.</p>
<p>So we start off with a set of ground atoms.</p>
<p>We remove some ground atoms and we add some ground atoms.</p>
<p>And this is the state that we get as a result of applying the state transition function, in state as using action A.</p>
<p>One minor point that is of quite a lot of importance and some detail, is that we first delete the negative effects and then add the positive effects.</p>
<p>That means, if there is an atom that is a negative effect and a positive effect.</p>
<p>It will be in the resulting state because it is first removed and then added again.</p>
<p>You may wonder, why would you ever want to have an action that has the same atom as a negative and positive effect.</p>
<p>Well, maybe have look at the move action that we've just introduced.</p>
<p>And see whether this would ever be possible that an atom can occur as a negative and a positive effect depending on what values I choose for the variables.</p>
<p>Finding the actions that are applicable in a given state is actually a non trivial problem.</p>
<p>You can see this quite easily when you think about the number of possible actions that may be applicable in a given state.</p>
<p>Namely, all those operator instances where you replace every parameter by every possible value.</p>
<p>That would give you an exponential number of actions.</p>
<p>In general there are way fewer actions applicable in this state, though.</p>
<p>And here is an algorithm that you can use to find the applicable instances of a given operator in a given state.</p>
<p>This function, add applicables, takes five parameters.</p>
<p>The first is A, the set of actions and this is initially empty.</p>
<p>This is just the set in which we collect the result of this functions for the applicable actions.</p>
<p>Then we give it an operator of which we seek instances that are applicable in our state.</p>
<p>We have a set of remaining preconditions of this operator so these are the preconditions we still need to look at.</p>
<p>Initially these are all the preconditions of the operator.</p>
<p>Then we have a substitution for the variables that are parameters of the operator.</p>
<p>Initially no variables are replaced by values.</p>
<p>And then, of course, we have the state in which we are trying to apply this operator.</p>
<p>So, the algorithm will first deal with all the positive pre-conditions.</p>
<p>So at first, tests whether there are positive pre-conditions left.</p>
<p>And if there are none left, it goes to the first part here.</p>
<p>And if there are positive pre-conditions left, it will go to the second part here, the second part of this if statement.</p>
<p>And the first thing we do is select the next positive pre-condition that we are trying to apply to restrict the actions that we can apply in this state.</p>
<p>So PP is the positive precondition that we look at next, and then we go through all the propositions in our state here as P, and try to match this against PB.</p>
<p>Of course, if the predicate doesn't match it can never be a match and therefore we can ignore these.</p>
<p>We only look, need to look at those propositions that have the same predicate.</p>
<p>And then we extend the current substitution that we were given as our parameter such that the two SP and PP match.</p>
<p>This gives us a new substitution and if this substitution is valid it means we were able to extend the substitution.</p>
<p>Then we can do a recursive call and the recursive call goes as follows: We dont change the set of actions in this case.</p>
<p>We simply use the same operator again.</p>
<p>We remove the precondition from the set of preconditions that we've just dealt with.</p>
<p>So PP is the one we've just exploited, we no longer need to look at that.</p>
<p>We've changed the substitution by adding more, values to variables.</p>
<p>And the state remains the same.</p>
<p>We go through this loop until there are no more positive preconditions, and then we end up in the first case of the if statement.</p>
<p>So now we've dealt with all the positive preconditions.</p>
<p>We now look at all the negative preconditions.</p>
<p>So we loop over NP where NP is a negative precondition and all we have to do is now check whether our state falsifies this negative precondition.</p>
<p>If this is the case then this cannot result in an applicable action.</p>
<p>But if the state does not falsify the negative preconditions then we have found an instance of this operator up that we were given that is an applicable action in this state.</p>
<p>And that, what we have to do is simply replace all the parameters of this operator according to the substitution that we've been building up.</p>
<p>Here is an example that should illustrate this algorithm.</p>
<p>In this example, we are given our state over here.</p>
<p>That's the set of ground atoms.</p>
<p>And we have our PDDL action defined here.</p>
<p>That is the move action we've seen previously.</p>
<p>So these are the two parameters we've seen in our algorithm.</p>
<p>that's the operator is the move action, and s is the state we were just given.</p>
<p>The other parameters are an empty set.</p>
<p>The pre-conditions of the move operator.</p>
<p>And an empty substitution.</p>
<p>The algorithm then starts by testing whether there are positive preconditions left which is the case which means we immediately go to the L parts of the algorithm.</p>
<p>And the first thing there is we choose the next positive precondition we want to look at.</p>
<p>So let's go back to the example.</p>
<p>The first positive preconditions is adjacent from two and this is the first precondition we will pick here.</p>
<p>So that's PP, PP is this adjacency relation.</p>
<p>Looking back at the algorithm we see that the next step is to look for all those state propositions that can match this positive precondition.</p>
<p>So let's look at our state.</p>
<p>This is the adjacency relation and we have two adjacency ground atoms in our state, namely location one to location two and location two to location one.</p>
<p>So these are the two cases here I've listed for SP.</p>
<p>The loop will go through those two and succeed there.</p>
<p>The next step in the algorithm, then, is to extend the substitution, such that SP and PP match.</p>
<p>And we can see that this has happened here.</p>
<p>I'll go through the first case on the left here.</p>
<p>we've extended the substitution, such that the variable from, from our precondition must be location one and two, must be location two.</p>
<p>So that adjacent one or two matches what we have here in our substitution.</p>
<p>The algorithm then continues with the recursive call.</p>
<p>Because the substitution is still valid.</p>
<p>And it simply removes that positive precondition from the preconditions that we still need to do.</p>
<p>So again, we end up at the entry to the algorithm.</p>
<p>See that there are positive preconditions left.</p>
<p>End up in the else branch.</p>
<p>And select the next positive precondition that we need to deal with in the algorithm.</p>
<p>And as we can see here the next positive preconditions at R from so that's the next positive precondition we select and we need to match that against the state, let's look at the algorithm again.</p>
<p>So we're now here that we're going through a loop over all of the propositions in the state that match this positive precondition.</p>
<p>And if we look at the at relations of the state, there is only one option here.</p>
<p>So this loop is only one long.</p>
<p>And we choose this here.</p>
<p>So we try to extend the substitution such that it matches this state proposition.</p>
<p>And what we see here is that we need to match R to R1, and from to location two.</p>
<p>But in our substitution we have already set that from must be location one.</p>
<p>So it can't be location one and location two at the same time.</p>
<p>Which mean our substitution is not valid.</p>
<p>But if we go back to the algorithm.</p>
<p>We had a branch here previously in this loop that we haven't explored yet.</p>
<p>And that is listed here.</p>
<p>Namely, where SP was adjacent, location one to location two.</p>
<p>And again, what we do is extend our substitution such that the state proposition matches the positive pre-condition.</p>
<p>And we can do that here.</p>
<p>So we have that our new substitution maps from to location two, and two to location one.</p>
<p>Again, this is followed by the recursive call.</p>
<p>So we need to check whether there are more positive preconditions, just like in the other case.</p>
<p>And yes, there is another positive precondition.</p>
<p>The same one we dealt with in the other case, the at relation.</p>
<p>And again there is only one possible instance in the state that can match that.</p>
<p>And that's at r1, location two.</p>
<p>So, where are we now in our algorithm?</p>
<p>We are here.</p>
<p>We need to extend the substitution, such that the state proposition matches the positive precondition.</p>
<p>So let's go back to the example.</p>
<p>What we have here is we need to match R to R1.</p>
<p>And again we can do that.</p>
<p>And we match from to location two.</p>
<p>And again, previously we have matched from to location two.</p>
<p>So this is consistent with the way we need to match from now.</p>
<p>Which means we can actually, in this case, extend the substitution.</p>
<p>And have a new substitution in which case, from.</p>
<p>Is location two, two is location one.</p>
<p>And R is R1.</p>
<p>So again this would be followed by the recursive call here, and that means we reach the algorithm with a set of empty.</p>
<p>Positive preconditions.</p>
<p>There are only negative preconditions left.</p>
<p>Let's look at the example.</p>
<p>We've dealt with adjacent and we've dealt with at.</p>
<p>So, there are only negative preconditions we need to deal with.</p>
<p>And the negative preconditions, then, that's this part here of the algorithm.</p>
<p>We go through every negative precondition and check whether this is falsified in the state.</p>
<p>Instantiated with our substitution sigma.</p>
<p>So, what does this look like in the example?</p>
<p>So, there's only one negative precondition in our example.</p>
<p>Namely, that.</p>
<p>We want the location we're moving to not to be occupied.</p>
<p>And that is our MP now, which means it is not occupied location one.</p>
<p>In the example the variable we are instantiating is two and our substitution tells us that two must be location one.</p>
<p>So this is the instantiated negative precondition not occupied location one.</p>
<p>And as we can see in the state, the only location that is occupied is location two.</p>
<p>Which means, our negative precondition is not falsified here.</p>
<p>So we can turn this into an action, that we add to the set A.</p>
<p>That's the final step here.</p>
<p>So we add to A, the instance of this operator, instantiated using our substitution that we've defined here.</p>
<p>That was the last substitution that we had.</p>
<p>And we get the operator, move R1, from location two to location one.</p>
<p>And indeed this is the only applicable action here, and that means we are done with this algorithm.</p>
<h2> <span class="mw-headline" id="Domains_and_Problems">Domains and Problems</span></h2>
<h3> <span class="mw-headline" id="a_Domains_and_Problems">a Domains and Problems</span></h3>
<p>Now that we have seen how the internal structure of operators and states can be represented in the strips representation, it is time to turn to the bigger picture.</p>
<p>And by that I mean planning domains and planning problems.</p>
<p>Planning domains implicitly define the graph in which we are doing search.</p>
<p>Planning problems also define the states from which we are going and to which we want to go.</p>
<p>Plans are solutions to planning problems.</p>
<p>And we will now define all this formally.</p>
<p>Here's a quick overview of the concepts we need to define for classical planning.</p>
<p>Most of modern planning, can be achieved by simply extending this classical representation.</p>
<p>So, in classical planning.</p>
<p>The task is to find a solution for a planning problem.</p>
<p>So we need to define, what is a solution?</p>
<p>And what is a planning problem?</p>
<p>A solution, and a planning problem.</p>
<p>The planning problem consists essentially of three things.</p>
<p>And those are given to the planner to come up with solutions.</p>
<p>The first component of a planning problem is the initial state which is a set of atoms which relate the object in our planning problem to each other.</p>
<p>This is exactly the type of state we've just seen in the strip star presentation.</p>
<p>The next component is the planning domain and the planning domain consists, in essence, of operators which are described by names, preconditions, and effects.</p>
<p>And the final component of a planning problem is the goal.</p>
<p>Note that the planning domain is essentially a reusable component.</p>
<p>We will often see many planning problems that refer to the same domain, but have a different initial state and different goal.</p>
<p>But domain is reusable.</p>
<p>Finally when the planner has solved the planning problem, it will return a solution to that planning problem, which is a plan.</p>
<p>Here is how we can define a strips planning domain.</p>
<p>We start with a function free first oral language L, as we've seen before.</p>
<p>A strips planning domain over this language L, is then a restricted state transition system, consisting of these components S, A and gamma, as we've seen before.</p>
<p>You may wonder what happened to the set of events, that can happen in this state transition system and that's exactly what we mean by restricted here.</p>
<p>In the restricted state transition system, we do not have events.</p>
<p>We only have the states S, the actions A, and the state transition function gamma.</p>
<p>The set S of possible world states is then defined as the set of all possible strip's states.</p>
<p>So, all sets of ground atoms that you can possible define are an individual state.</p>
<p>The set of actions that we need is then the set of all ground instances of some strips planning operators.</p>
<p>And these are the operators that are defined in the planning domain.</p>
<p>And finally, we define the state transition function.</p>
<p>Which is, in this case, a deterministic function.</p>
<p>Because it maps to exactly one state.</p>
<p>Again, this is to do with the restricted state transition system.</p>
<p>So the state transition function takes a state s, and an action a.</p>
<p>And maps that to a new state.</p>
<p>Which is defined by taking all the ground atoms that are true in this state.</p>
<p>Removing the negative effects of the actions.</p>
<p>And adding the positive effects of the actions.</p>
<p>That is true for an action that is applicable in the state.</p>
<p>If the action is not applicable.</p>
<p>Then, gamma SA is undefined.</p>
<p>So, there is no resulting state if we try to apply an action that is not applicable.</p>
<p>This definition of a state transition function is, of course, what we've seen before, full of strips, actions, defined earlier.</p>
<p>Finally, the set S is closed under gamma, which means there are no states that cannot be reached through the stationary illusion function that are in our set S.</p>
<p>So, that defines a strip's planning domain, and I hope that none of this comes as a surprise to you, given what we've seen earlier.</p>
<p>Here is an example of a planning domain in the PDDL syntax.</p>
<p>The core of the representation, are of course the planning operators, and that's what we have here on the right.</p>
<p>These are the five actions defined, or the five operators, defined for the doc worker robot domain, and again, they're called actions in pdl, but these are operators.</p>
<p>As you can see, they are perimeterized and have variables whereas actions would be ground.</p>
<p>So, we have the move action, the load action, the unload action, the take action, and the put action.</p>
<p>That is the complete set of operators defined for the doc worker robot domain.</p>
<p>In addition to the operators, the PDDL language allows us to define a few other things.</p>
<p>And that's what we've got over here.</p>
<p>So we can, for example, say that a domain has a name.</p>
<p>So that we can refer to this domain, in planning problems, as we will see later, by name.</p>
<p>Then we can specify requirements, which allows the language to extensible.</p>
<p>We can specify types.</p>
<p>These are the five types we've seen earlier.</p>
<p>Locations, piles, robots, cranes, and containers.</p>
<p>Then, in this domain specification, we also have one constant defined, which is the pallet.</p>
<p>This is defined as part of the domain here, as it will occur in every planning problem.</p>
<p>And then we have the predicates, which where are exactly the predicates we've seen earlier defined for the dock worker robot domain.</p>
<p>You can see the complete set here defined with the types of the arguments.</p>
<p>And that is the definition of this domain.</p>
<p>If you find this a little hard to read here, or want to download it.</p>
<p>You can always go to the book website.</p>
<p>So this is all based on the automated planning book, that you see here.</p>
<p>And there's a website for this book.</p>
<p>And you can see here at the bottom is the PDDL specification of the dock worker robot domain.</p>
<p>And so if you click this link, you will get a PDDL file which is almost exactly what you've seen in this slide.</p>
<p>And since the URL is a little hard to read here.</p>
<p>It isn't bigger.</p>
<p>So it's <a rel="nofollow" class="external free" href="http://projects.laas.fr/planning/">http://projects.laas.fr/planning/</a>.</p>
<p>If you go to that URL you get to this website, and you will be able to download the PDDL domain.</p>
<h3> <span class="mw-headline" id="b_Domains_and_Problems">b Domains and Problems</span></h3>
<p>Now with a formal definition of a STRIPS planning domain, we can now define a STRIPS planning problem.</p>
<p>A STRIPS planning problem is a triple consisting of three components, and these are given here.</p>
<p>This is, of course, the state transition system that we're looking at.</p>
<p>This is the initial state and that is the goal.</p>
<p>So, what are these formally?</p>
<p>The first is a STRIPS planning domain that is defined over some first order language we've seen earlier.</p>
<p>And again, we have the state space here, the action space and the state transition function as we've seen in the previous slide.</p>
<p>Then there are two more things we need for a planning problem.</p>
<p>The first is an initial state which is simply one of the states in our states base.</p>
<p>Finally, the goal of a planning problem is defined as a set of ground literals.</p>
<p>And once we are given a goal described in this way, we can define the set of possible goal states, as all those states in s that satisfy the goal.</p>
<p>And satisfaction was something we defined earlier, you may remember the symbol.</p>
<p>We said that s satisfies g if all the positive literals in g are true in s and none of the negative literals in g are holding in s.</p>
<p>So that is the definition of a planning problem.</p>
<p>An interesting observation is that goals are defined as exactly the same things that are the preconditions of operators namely sets of literals or for actions sets of ground literals.</p>
<p>That is not a coincidence.</p>
<p>And here's a very simple example of a STRIPS planning problem, a DWR example from the dock worker robot domain.</p>
<p>The planning domain is the one we've defined earlier consisting of the five operators described in PDDL.</p>
<p>Then I need to pick an initial state which is what I've done here, so this is our initial state and I've described that in this expression here as a set of ground atoms.</p>
<p>So each of those are relations that relate different objects in the domain to each other.</p>
<p>It's a very simple example as you can see.</p>
<p>And then I have to pick a goal, which is a set of ground literals.</p>
<p>In this case, I want the robot to be loaded with a container, so it is not unloaded, and I want the robot to be at location too.</p>
<p>These are my two goal conditions, and in this simple example, there is only this one state, that is a goal state.</p>
<p>And here is a definition of a planning problem in the PDDL syntax.</p>
<p>Note that this is a different problem so it is not the problem we have seen in the previous slide.</p>
<p>In PDDL we of course must define the initial state, and the goal.</p>
<p>Just like we need for any planning problem.</p>
<p>But there are a few other things that we need to define.</p>
<p>The first thing is, we can give the planning problem a name, so we can refer to it.</p>
<p>That's what we do here, it's a DWRPB1 problem.</p>
<p>Then we can say which domain we're using.</p>
<p>And we're saying that by referring to the domain name as shown here.</p>
<p>Then we can explicitly define what objects we're using in this domain.</p>
<p>This is actually optional and requires the typing extension.</p>
<p>So we say that there's one robot which is a type robot.</p>
<p>then we have two locations, two cranes and four piles here and all together we have six containers and the palate.</p>
<p>The palate is of course also defined in the domain, but that doesn't matter here.</p>
<p>So this declares what things exist in our states.</p>
<p>Then the initial state contains the ground atoms that relate these objects to each other.</p>
<p>So that's what we got here.</p>
<p>We start off with a static relations.</p>
<p>These are the things that describe the topology, and won't change from state to state.</p>
<p>So there's the adjacency between the two locations.</p>
<p>There is where the different piles are.</p>
<p>Piles one, P1 and Q1 are at location one.</p>
<p>P2, Q2 at location two.</p>
<p>And where the different cranes are.</p>
<p>One crane at each location.</p>
<p>Then we have.</p>
<p>The dynamic relation's listed next.</p>
<p>And they tell us what is in the first pile.</p>
<p>Namely, container A, B, and C.</p>
<p>Here's the order of the containers on the pallet.</p>
<p>Container C is at the top.</p>
<p>The same for the second pile.</p>
<p>This is also at location one, containing three containers, stacked on top of each other.</p>
<p>And container F at the top.</p>
<p>The piles at the other location are both empty as you can see here because the top of the pile is the pallet.</p>
<p>Finally we learn where the robot is and that's unloaded and also that the two cranes are currently not holding anything.</p>
<p>That was the initial state, and now comes the goal.</p>
<p>The goal is described as a conjunction.</p>
<p>So all of these things must be true.</p>
<p>And it's simply saying, in which pile the different containers must be.</p>
<p>Ca must be in P2.</p>
<p>Cc in P2, and so on.</p>
<p>And the other four containers must be in the pile, Q2.</p>
<p>So it doesn't specify the order in which the containers must be in those piles, just in which piles they must be.</p>
<p>Note that there are no negative goals in this example but of course it is possible to define negative goals in general.</p>
<p>And if you find this a little hard to read again here's the URL where you can find the complete description of this problem so you can download it and read it in quiet and peace later.</p>
<h3> <span class="mw-headline" id="c_Domains_and_Problems">c Domains and Problems</span></h3>
<p>What we've seen so far is the complete input that must be given to a planner.</p>
<p>Now we will turn to the output of the planner which is, of course, a plan.</p>
<p>And a plan is a sequence of actions, A1 through AK.</p>
<p>We're using the pi symbol here to denote the plan and the sequence consists first of the action A1 then of the action A2 and so on until we reach the action AK.</p>
<p>And K must be greater or equal to zero so the plan can be empty and contain no actions.</p>
<p>The length of a plan then, is simply the number of actions it contains.</p>
<p>So it is K, where K is zero or more actions.</p>
<p>Given this definition of plans, there's a number of things we can do with those plans.</p>
<p>For example, we can concatenate plans.</p>
<p>That means, if we're given a plan that consists of actions A1 through AK, and another plan consisting of A prime one through A prime J, then we can define the concatenation of those two plans, as simply the sequence of actions consisting, first, all those actions from the first plan.</p>
<p>And then, all those actions from the second plan.</p>
<p>We can also extend our state transition function as follows.</p>
<p>We can define a state transition function for a state and a plan.</p>
<p>By defining that it is the state from which we start, if our plan was empty.</p>
<p>So if there were no actions in the plan, we simply remain in the same state.</p>
<p>But if there were actions in the plan.</p>
<p>So k was greater than zero.</p>
<p>Then what we do is we first execute the first action.</p>
<p>That gives us a new state.</p>
<p>And then what we do.</p>
<p>We apply the state transition function, recursively, to the remainder of our plan.</p>
<p>For this to be well defined, of course our action, A1, the first action in our plan, must be applicable in the state in which we're trying to apply the plan.</p>
<p>In any other case the state transition function applied to the state and the plan is undefined.</p>
<p>So the most important thing to remember here is we define plans simply as sequences of actions.</p>
<p>Of course there are more complex types of plans but this is what we're looking at here now.</p>
<p>The output of a planner is a plan.</p>
<p>But of course, not every plan is a solution to a planning problem.</p>
<p>And here is how we can define what constitutes a solution.</p>
<p>We are given a planning problem consisting of a state transition system or a set of operators.</p>
<p>An initial state, and a goal description then we can say that a plan pi, is a solution for a planning problem.</p>
<p>For this planning problem that we are given here.</p>
<p>If the state transition function applied to the initial state of the planning problem.</p>
<p>And the plan that we're trying to execute in that problem gives us a new state.</p>
<p>And that state satisfies the goal.</p>
<p>So, a plan is a solution, if the execution of the plan leads us to a state in which the goal is satisfied.</p>
<p>Since there may be many plans that are solutions for planning problems, we want to distinguish those.</p>
<p>And we can do that by defining some properties of the solution plans.</p>
<p>So we can say that the solution is redundant if there's a proper subsequence of this plan, that is also a solution for P.</p>
<p>So if we can take our plan pi, remove some of the actions, and still have a solution plan, then we call the original plan redundant.</p>
<p>And we can say that the plan pi is minimal if no other solution for our planning problems contains fewer actions.</p>
<p>So it is minimal if it has the minimal number of actions.</p>
<p>Now all the definitions you've seen so far apply to classical planning.</p>
<p>But in fact, there are variations of what is exactly classical planning.</p>
<p>Most of what we've seen so far is the strips representation.</p>
<p>Here, I want to give you a quick overview of what other flavors of classical representations exist.</p>
<p>The simplest representation is the propositional representation.</p>
<p>In the propositional representation, a world state is described by a set of propositions.</p>
<p>So, a proposition is a simple symbol.</p>
<p>It does not contain any internal structure.</p>
<p>In the strips representation, in the state, we have first order atoms, ground atoms, to be more specific.</p>
<p>And these relate objects to each other.</p>
<p>In the propositional representation, there are only propositions, symbols.</p>
<p>Actions in the propositional representation consist of preconditions, post-conditions to be added and to be removed.</p>
<p>The first thing to note here is there are only actions, there are no operators because we don't have parameters and that's because we have symbols that have no objects they relate to each other.</p>
<p>So there's no variables which means everything is ground, everything is in action.</p>
<p>Then we have preconditioned propositions which means we don't have positive and negative propositions in the preconditions.</p>
<p>Only positive propositions exist in this simple representation.</p>
<p>And then we have negative and positive effects, as before these are symbols not ground atoms.</p>
<p>And I've also mentioned they are often called the add list and the delete list to be removed.</p>
<p>The strips representation then is simply the same, but instead of propositions we're dealing with first auto-literals, in most cases.</p>
<p>Specifically this means the preconditions of an operator can be positive or negative.</p>
<p>The final variant is the state variable representation where a state.</p>
<p>Consists of a set of state variables.</p>
<p>A state variable is simply a variable that must have a value.</p>
<p>It's usually described by a function.</p>
<p>So, for example, we could have a function that describes the location of the robot.</p>
<p>RLook that takes a robot as an argument, and tells us where that robot is at location L.</p>
<p>The advantage of this representation is, that it represents the functional property of this.</p>
<p>The robot can only be at one location at any one time.</p>
<p>So in the strips presentation, at least, in theory.</p>
<p>You can have several assertions of where the robot might be.</p>
<p>In the state variable representation.</p>
<p>And, the functional property, namely that the robot can only be at one location at a time is exploited.</p>
<p>Actions in this representation are simply undescribed by sets of preconditions that look like expressions like this and assignment of new values to these state variables like this one.</p>
<p>So what you need to remember here is that there are different flavors of the classical representation, there's not just the stripser presentation we've looked at.</p>
<p>There's also these other two.</p>
<p>But, and this is the important point, these representations can be translated into each other so essentially they're all equivalent in terms of expressiveness.</p>
<p>There's nothing that you can say in one of these three representations that you can't say in the other.</p>
<h2> <span class="mw-headline" id="Forward_Search">Forward Search</span></h2>
<h3> <span class="mw-headline" id="a_Forward_Search">a Forward Search</span></h3>
<p>So far, we have laid a lot of groundwork before we can describe our first planner.</p>
<p>We have seen how a planning domain has described a states space.</p>
<p>We have seen how to define a planning problem, what constitutes a solution to the problem, and previously, we have seen how to search through a search space.</p>
<p>If we put all this together, we end up with a forward state-space search planner and that is what we will look at next.</p>
<p>So here is the basic idea how state space search works, namely, we want to apply standard search algorithms that we've seen before like breadth-first search, depth-first search, or A&#42;, you may remember, to a planning problem.</p>
<p>And to do this, we need to define the search space which may be different from the state space.</p>
<p>But in this case, our search space is simply a subset of the state-space that we define for the planning problem.</p>
<p>The nodes in our search space correspond simply to world states.</p>
<p>So the states that we have in our planning problem are nodes in our search tree.</p>
<p>The arcs in the search space correspond to state transitions as defined by the operators and the actions that we execute as part of the plan.</p>
<p>And a path in the search space corresponds to a plan, which is the solution we are looking for.</p>
<p>More specifically, here is how we can define a planning problem as a search problem.</p>
<p>So we are given a planning problem as a set of operators which implicitly define a state transition system.</p>
<p>We are given an initial state and a goal description.</p>
<p>These three components make up our planning problem, then we can define the search problem as follows.</p>
<p>For the search problem, we need an initial state and we simply take the initial state from our planning problem.</p>
<p>Then, we need a go for our search problem and we define a goal test here naming the test that s satisfies g, so the state that we're curently searching must satisfy the goal.</p>
<p>Then we can define a path cost function for our search and that is simply the length of the plan we're currently looking at.</p>
<p>Implicitly, this means that all actions have equal cost here and that is why the path cost function as the length of the plan works.</p>
<p>And the final component we need is a successor function and the successor function, denoted gamma of s here, is what we will define next.</p>
<p>The successor function gamma of s for single state is defined here.</p>
<p>It is the set of all states gamma s,a for all actions a that are applicable in the state s.</p>
<p>So this set consist of all those states that can be reached by an applicable action from our state s.</p>
<p>If I wanted to compute this, I would have to, I have to go through all the operators and find all the ground instances of these operators that are applicable in the state, then I could apply those actions in the state and I would get all the successor states here.</p>
<p>This is how gamma of s is defined.</p>
<p>We can extend this definition slightly.</p>
<p>Suppose we are not in one state but we are in a set of states.</p>
<p>We know that we are in one of these states and we, we want to define what states are reachable from any of these states.</p>
<p>Then, this is simply the union over any of these states of gamma sk.</p>
<p>So we compute the successors for each of the individual states and build the set union, which is the result of gamma s, s1 through sn.</p>
<p>This gives us the states that are reachable from any of those states that are the input to the function in one step.</p>
<p>We can make this definition yet more general by naming the number of steps we want to allow.</p>
<p>In the simplest case, we have gamma zero which means we allow zero steps.</p>
<p>So if we're in any of these states, s1 through sn, and want to compute the states that we can be in after zero steps.</p>
<p>Well, that's exactly the states we start in.</p>
<p>If we don't do anything, we can't go to any other states.</p>
<p>But, in general, we want to allow m steps here and we want to say, initially, we are in one of these states s1 through sn.</p>
<p>And then we can apply a recursive definition of the function gamma by saying we apply this to gamma m minus one, so we take the set of states we start from.</p>
<p>We can go m minus one steps from these states, that this, that is the input to this here, and then, we can go one more step here.</p>
<p>And that is then the set of all states that are reachable from s1 through sn in m steps.</p>
<p>So that is what we've defined here, we've defined the function gamma m, which maps a set of states to another set of states.</p>
<p>Mainly, exactly those states which are reachable in m steps from anyone of the states given in the input.</p>
<p>The transitive closure of this function, then simply defines the set of all reachable states, so this is defined here.</p>
<p>All the reachable states are simply the union of k from zero to infinity of gamma k of s.</p>
<p>So we start in our initial state and we apply k steps from there.</p>
<p>This is this set and we can apply zero, one, two, three, and so on, up to infinity steps.</p>
<p>And if we take the union of all that, that is all the states that are reachable from our initial state s.</p>
<p>And that is the function gamma forward of s.</p>
<p>And here is why I've given you such a complex definition, because, with this definition, I can very simply state when a planning problem has a solution.</p>
<p>So we can state that a STRIPS planning problem defined by a state transition system initial stating goal or a statement defined by the operators and the initial state in the goal, has a solution if and only if the following holds.</p>
<p>Namely, if we take the set of all goal states and we take the set of all reachable states and we build the intersection between these two sets, then, this must not be the empty set or you can see it the other way around, too.</p>
<p>If this set actually contains an element, let's say a state Sg, then this state is in both these sets, which means it is a goal state and it is reachable from the initial state.</p>
<p>And if there's a reachable state from the initial state that is a goal state, that means we have a solution to our planning problem.</p>
<p>Now, this is all great.</p>
<p>But you may wonder, when are we actually going to see a planning algorithm?</p>
<h3> <span class="mw-headline" id="b_Forward_Search">b Forward Search</span></h3>
<p>Here is the four one state space search algorithm.</p>
<p>This algorithm is defined as a function forward search that takes three arguments namely the three components that make up a planning problem.</p>
<p>The first component is the set of operators defined for the planning problem.</p>
<p>Then we have an initial state and a goal description.</p>
<p>The algorithm works by starting from the initial state and searching from here.</p>
<p>And it also builds up a solution plan why we go through this loop.</p>
<p>As for the previous search algorithms, the first thing in the loop we do is test whether we have reached a goal state.</p>
<p>The goal test, now, is whether the state that we're currently looking at, initially the initial state, is a goal state.</p>
<p>We test this by testing whether it satisfies the goal.</p>
<p>If this is the case, then we can return our plan, initially, the empty plan.</p>
<p>So, if our initial state was the goal state, then we return the empty plan, and we are done.</p>
<p>If not, then we have to continue.</p>
<p>And what we have to do next is compute the state transition function.</p>
<p>We do this as described earlier by computing all the ground instances from all the operators defined in our planning problem that are applicable in our state.</p>
<p>So this gives us the set of applicable actions in our current state.</p>
<p>Now if this set was empty, if there are no applicable actions in the current state, then we can return failure.</p>
<p>That means we, we have exhausted our search space and haven't come across a solution.</p>
<p>The next step is simply choose one of the applicable actions that we have just computed.</p>
<p>What I've done here is simply made my life a little simpler by describing the algorithm as a non-deterministic algorithm.</p>
<p>This is a non-deterministic choice point.</p>
<p>What this means, in the actual implementation, would have to do search here.</p>
<p>It would have to back track to this point, to try out the different action.</p>
<p>If the one we've chosen previously fails.</p>
<p>So this would build up a search tree, branching at exactly this point.</p>
<p>In a non-deterministic algorithm we can, of course, assume that we have chosen the right action here.</p>
<p>Then what we do is we simply update our current state by applying the state transition function of the previous state, this is the previous state, and the action that we apply in this state.</p>
<p>And of course we have to add this action to the plan, so we concatenate new plan consisting of just one action to our old plan, and get the new plan as a result and that's it.</p>
<p>We simply go through our loop again until we either come to this point where we can return a plan to a solution state.</p>
<p>Or we come to this point where we return failure meaning we have exhausted the search space and didn't find a solution.</p>
<p>And here is a very simple example to illustrate this algorithm.</p>
<p>We start off in a initial state, which is the trivial problem we've seen earlier.</p>
<p>And we have defined the goal also from the example we've seen earlier to give us just one state as a goal state.</p>
<p>But the algorithm doesn't know that there's only one goal state, or where it is.</p>
<p>So we will remove this, here.</p>
<p>So, the first thing the algorithm does is test whether this is a goal state.</p>
<p>And I can assure you it is not.</p>
<p>So the algorithm will continue by computing the applicable actions.</p>
<p>And then selecting one of these applicable actions.</p>
<p>And in this case, what the algorithm does is select this action, here.</p>
<p>We're taking, with the crane, there's only one, at location one, the container, which is on this pile here.</p>
<p>from the pallet in the pile.</p>
<p>That is the action that the algorithm chooses.</p>
<p>Then what happens is it applies the state transition function to get a new state, which is the state we see here.</p>
<p>And it also updates its plan, which is what we have here.</p>
<p>And it continues like this through the loops so it checks whether this is a goal state.</p>
<p>It isn't a goal state, it computes the applicable actions, picks one of those, in this case that's the move action, and accordingly has to compute a new state, that's the new state we generate with this move action.</p>
<p>And so on we continue through the loop and see this is not a goal state, so we compute the applicable actions again, now we try to load the container with the crane at the location.</p>
<p>And, we get a new state.</p>
<p>As a result, now you can see the container is on the robot.</p>
<p>And, this is not a goal state so we go through the loop.</p>
<p>And we find there's a final action that we need to execute.</p>
<p>We need to move the robot to the other location.</p>
<p>And then we get a new state.</p>
<p>And this is now our goal state so at the beginning of the loop, the algorithm will terminate.</p>
<p>And it will return at this stage this plan here consisting of those four actions that, gave us the path through this state space.</p>
<p>So you have seen that the algorithm was only a very small step given all the definitions we had before.</p>
<p>But now we want to say a little bit more about the algorithm and what we want to say is that the algorithm possesses two properties that are very important.</p>
<p>Forward search is sound and forward search is complete.</p>
<p>Soundness means that if the function returns a plan as a solution, then this plan is indeed a solution.</p>
<p>This is, of course, a very useful property of such an algorithm.</p>
<p>If the algorithm was not sound, that means it could return a plan that isn't a solution.</p>
<p>So we would still not know what the solution is but the algorithm is sound.</p>
<p>And the proof of this is very simple.</p>
<p>We can show this by induction.</p>
<p>And we show that, at the beginning of the loop, this statement here always holds.</p>
<p>So we have the two loop variables, state and plan.</p>
<p>And we show that the state is always equals to gamma of si, and the plan we're currently looking at.</p>
<p>This is true, initially, of course because the initial value of state is the initial state.</p>
<p>And the initial plan is empty.</p>
<p>So gamma applied to SI with the empty plan means we still are in the initial state.</p>
<p>And those two are equal.</p>
<p>And then we can show that this condition is maintained through the loop.</p>
<p>Each iteration of the loop keeps this condition true.</p>
<p>Which means that it is also true for the final iteration before we return the plan.</p>
<p>And that means the state is the result of applying the state transition function, NSI, with the plan.</p>
<p>And we return from the function when state satisfies the goal.</p>
<p>So, therefore, this plan must reach the state.</p>
<p>And our algorithm is sound.</p>
<p>The second property that the algorithm is complete means that if there is a solution to our problem, the algorithm can find the solution.</p>
<p>And since this is a non-deterministic algorithm, we talk about an execution trace.</p>
<p>So there is a set of choices that we can make at the non-deterministic choice points, such that the algorithm will return the solution plan.</p>
<p>And again, the proof can be done by induction.</p>
<p>And this time, we show that our plan is always a prefix of the plan we're looking for.</p>
<p>What you need to remember is only that our algorithm is sound and complete.</p>
<h2> <span class="mw-headline" id="Backward_Search">Backward Search</span></h2>
<p>We have now, almost reached the end of week two, and we have just seen our first planning algorithm.</p>
<p>Some of you may be a little disappointed that it took so long to get to the first planning algorithm, and for those people here comes the next planning algorithm.</p>
<p>In the algorithm we've just seen, search states are exactly those states that are world states in the planning problem.</p>
<p>States are sets of ground atoms.</p>
<p>The algorithm then searched forward from the initial state through all the reachable states, until it comes across a goal state.</p>
<p>The algorithm we will look at next is Backwards State-Space Search.</p>
<p>In this algorithm we'll start form the goal, and search backwards through the state space, until we reach the initial state.</p>
<p>This is quite straight forward, and very similar to forward search, as you will see.</p>
<p>We will start by defining two concepts, namely, relevance and regression sets.</p>
<p>Relevance is really the equivalent concept to applicability, as it tells us which actions we can use to move through our search base.</p>
<p>Again, we start with a planning problem consisting of the usual things.</p>
<p>Namely, a state transition system that tells us how the world can evolve, a initial state from which we're moving away, and a goal description which tells us which states are goal states.</p>
<p>Then we can say an action, A, of our action set, is relevant for goal, G, if the following two conditions hold.</p>
<p>Firstly the goal in intersected with the affect of the action must not be empty.</p>
<p>This means they must be an element that is in both sets, so there must be element there is on the one hand go, and on the other hand an infect of the action.</p>
<p>This means the action must contribute to the goal in some way.</p>
<p>Secondly the positive goals of the goal description and the negative effect of the action must not intersect and the negative goals and the positive effects must also not intersect.</p>
<p>This means the goal must not conflict with the effects of the action.</p>
<p>Looking at the first case, if we had a negative effect of the action, that was also a positive goal, that means this action would delete this goal from our state.</p>
<p>So it would no longer hold.</p>
<p>The second case is just the other way around.</p>
<p>We have a positive effect that adds a negative goal to the state, which we don't want.</p>
<p>So, an action is relevant for a goal, if it contributes to the goal, that's the first condition.</p>
<p>And if it does not interfere with the goal in a negative way.</p>
<p>That's the second condition.</p>
<p>Now we can define the regression set of a goal G for a relevant action A.</p>
<p>And as you can see this is meant to be the inverse of the state transition function gamma and it is computed as follows.</p>
<p>We start off with the original goal which is a set of ground literals and we remove all the effects of the action from that goal and then we add all the preconditions of the action to the goal.</p>
<p>Effectively, this computes from a given goal G.</p>
<p>We remove all the effects, meaning we remove all those things that have been achieved by the action that we have selected.</p>
<p>So we no longer need to achieve these if we execute this action as the last step before the goal.</p>
<p>But then, we need to have all the preconditions true, so that we can actually execute this action.</p>
<p>So what this gives us, is a new sub-goal.</p>
<p>And if we can somehow achieve this sub-goal, then we know that through the action A, we can achieve our original goal.</p>
<p>Relevance and regression sets tell us how we can move through our state base backward.</p>
<p>They tell us how we can, given a goal and a relevant action for this goal, compute a new sub goal that constitutes a new search state for our backward search.</p>
<p>So here is how we can define the successor function for the backwards search, which is equivalent to the reachability analysis we did for forward search.</p>
<p>We start with regression through a single step from a given goal.</p>
<p>This is defined as the set of all those sub-goals, gamma minus one GA, so the regression sets, for a relevant action for G, our original goal.</p>
<p>To compute this we start with our original goal, then compute all the relevant actions for this goal, and regress through these actions two new sub goals.</p>
<p>So this is a set of sub goals that we get as a result.</p>
<p>The next step is that we extend this function to take multiple goals as input, so the input is now a set of goals rather than a single goal.</p>
<p>And if we regress through zero states that means simply the set of goals stays the same.</p>
<p>There's no change.</p>
<p>If we can go one step backwards in our search from a given set of goals, this is simply the union over all the individual goals and we regress those through our regression function defined earlier.</p>
<p>And then we can apply this for M steps backwards from a given set of goals by simply doing a recursive definition as we did for reachability.</p>
<p>So we apply it for one step after we've applied it to M minus one steps for the same set of goals.</p>
<p>What this means is that, from any of the sub-goals that we've computed in this way, we can reach the original goals in exactly M steps.</p>
<p>M actions are necessary to go from the sub-goals to one of the original goals.</p>
<p>And we can define the transitive closure for this function, which is the set of all regression sets that are possibly.</p>
<p>So these are all the possible sub goals, that we can compute from our original goal.</p>
<p>This is, pronounced gamma backwards, is simply the union over all lengths of plans that we can implement here, where K is the length of the plan, and we compute gamma minus K, of our original goal.</p>
<p>So for any K from zero to infinity, this gives us all the sub goals that are possibly reachable in our search base from our original goal.</p>
<p>Now, given these definitions we can define a search space for backwards search planning.</p>
<p>The input to the algorithm is again a statement of planning problem consisting of a set of operators in a initial state, and the goal to description as before.</p>
<p>Then the search problem can be defined by the following four components.</p>
<p>We start with the initial state for a search.</p>
<p>That is not the initial state not a state base but the goal.</p>
<p>So we're searching backwards from the goal.</p>
<p>And in our search space the goal is the initial state.</p>
<p>And if the goal is our initial state that means we need a new goal test for the search space.</p>
<p>And this goal test is that the intitial state in our problem specification satisfies our sub-goal S.</p>
<p>Remember, we move through the search space, or that is the idea, from the goal backwards by computing sub-goals and S is meant to be one of these sub-goals.</p>
<p>Now if we come across a sub-goal that is satisfied the, in the initial state, that means we can reach the goal state from the sub-goal according to our regression function just defined.</p>
<p>So, if our initial state satisfies the sub-goal, we have reached a goal state in a our search space.</p>
<p>The path cost function remains unchanged, it is simply the length of the plan.</p>
<p>And the successor function, will be using is simply the regression function we've defined in the previous slide.</p>
<p>In general this function takes a sub-goal that we've come across, and computes its successors in the search space.</p>
<p>So, this concludes the definition of the search space for backward search planning.</p>
<p>Next I could show you the backward search planning algorithm and pseudo code, but I won't.</p>
<p>The pseudo code would look almost identical to the code defined for forward search and I'll leave that to you as an exercise to modify that algorithm so that it performs backward search.</p>
<p>Now that you understand how two planning algorithms work, I'll even given you the idea for a third one.</p>
<p>And to introduce this, I'll give you an example.</p>
<p>Suppose our goal, our original goal we start from is that we want the robot to be at location one.</p>
<p>There is one operator in the dock loc robot domain, that can achieve this goal, and that is the move operator for moving a robot r from location l to location M.</p>
<p>And we can see that this operator is relevant because it has an effect at r m which we can use to achieve our goal at robot location one.</p>
<p>So all the actions that can be relevant for this goal must be of this form that we want to move the robot from some location L to location one.</p>
<p>But, l remains a variable here.</p>
<p>So we don't know what this value of l should be.</p>
<p>In fact, if you choose the wrong value for ,, it may even interfere with the goal.</p>
<p>Because we also have a negative effect, not at rl.</p>
<p>In the backwards search we've considered so far, we've only looked at actions for regressing goals to sub-goals.</p>
<p>So what we could do in our algorithm is simply replace this value L through all possible constants that are of the right type.</p>
<p>But if there are many places from which we can move to location one that means there are many options and that increases the branching factor in our search unnecessarily.</p>
<p>So what we can do is simply keep this variable as a variable and that is what is called lifted backwards search, which can also deal with partially instantiated operators where not all the parameters of the operators are replaced by actual values.</p>
<p>This does reduce the branching factor but unfortunately it also makes the algorithm a lot more complicated.</p>
<p>Keeping variables in a plan is an example of what is sometimes called least commitment planning where we try to make as few commitments as possible during the planning process unless we have a good reason for making a specific commitment.</p>
<p>We will see a lot more of this type of planning next week.</p>
<p>So this concludes the segment on states-based search planning.</p>
<p>In this segment we've learned a lot about the STRIPS representation for planning.</p>
<p>In the STRIPS representation we have seen a standardized way of representing the internal structure of states, namely a sets of ground atoms.</p>
<p>So we have objects that are related by some relations, and sets of these atoms describe what the world state looks like.</p>
<p>And then we have defined what the internal structure of operators looks like.</p>
<p>Namely, an operator consists of a name with parameters, a set of preconditions, and a set of effects.</p>
<p>The effects are often divided into positive and negative effects or the add list and the delete list.</p>
<p>Based on this we can define strips planning domains which are simply sets of operators, and we can define strips planning problems and consisting of a domain, an initial state, and a goal description.</p>
<p>And all this we've learned together with a new syntax, the PDDL syntax, for describing planning domains and problems.</p>
<p>PDDL is probably the most commonly understood language by planners today.</p>
<p>And next we have seen how forward states space search can be used to solve planning problems.</p>
<p>And there is a variant of that we have also seen how we can search this space backwards from the goal to the initial state.</p>
<p>Unfortunately this planning algorithms as of described them here are very inefficient.</p>
<p>But as we will see later on the course it doesn't take all that much to turn them in to the state of our planning algorithms.</p>
<h1> <span class="mw-headline" id="Week_3">Week 3</span></h1>
<h1> <span class="mw-headline" id="Week_4">Week 4</span></h1>
<h1> <span class="mw-headline" id="Week_5">Week 5</span></h1>
<h1> <span class="mw-headline" id="Features">Features</span></h1>
<h2> <span class="mw-headline" id="Feature_-_AI_Planning_for_Robots">Feature - AI Planning for Robots</span></h2>
<p>AI Planners, using a generation of action sequences in robots such as the Freddy 2, Hand/Eye Assembly Robot displayed here in the National Museum of Scotland in Edinburgh.</p>
<p>This version of Freddy from four decades ago had a large, fixed mounted arm with sophisticated touch sensitive grippers, and a side mounted camera to look at its world.</p>
<p>Instead of the robot moving to reach objects, the platform underneath the robot was shifted instead.</p>
<p>Freddy was demonstrated on flexible assembly tasks involving simple toy, cars, and boats.</p>
<p>The video playing is taken from a 16 millimeter film of a Freddy project demonstration made in 1973.</p>
<p>Freddy had to identify jumbled up parts via vision, unscrambled the parts, and then assembled them to create the required product.</p>
<p>Some parts in the area didn't belong to the target assembly.</p>
<p>In one project, the Edinburgh, normally an AI Planner, was used to generate object construction and arm movement sequences for Freddy.</p>
<p>In its time, Freddy was one of the most sophisticated robots in the world.</p>
<p>The Stanford Research Institute Problem Solver Strips is one of the best known a most influential AI Planners, and you'll learn about it on this course.</p>
<p>Despite of being created over 40 years ago, it was already news control the activity of a robot called Shakey at the Stanford Research Institute, which is now call SRI International.</p>
<p>Strips had may interesting features including use in theorem proving techniques to reason about the state of points in the plan.</p>
<p>Strips gave us a representation of actions with preconditions and effects.</p>
<p>It's got a mechanism called macrobes, for generalization of its operators.</p>
<p>It included execution support facilities to deal with partial failures.</p>
<p>Shakey is now on display at the Computer History Museum in Mountain View, California.</p>
<p>As we saw, Freddy included an early robot arm, but as you can see here, technology has come a long way.</p>
<p>For example, this modern research robotic arm has many more capabilities.</p>
<p>Obviously, there's a lot more to robotics than just activity planning and there are significant challenges in terms of vision, mechanical issues, and spatial reasoning including locating the robot, and tracking other objects.</p>
<p>But planning is a key aspect of intelligent behavior.</p>
<p>Not every robot has the kind of activity plan that we are describing on this course.</p>
<p>That is, one which can plan from first principles.</p>
<p>But robots typically do have plans, perhaps precompiled ones, that they use to control their behavior.</p>
<p>AI Planners have been used in much more recent robots also, of course, such as in some humanoid robots and the robots used in the Annual RoboCup Soccer League Teams.</p>
<p>Here, planning may have to cover the coordination of different robots with different roles, and the robots themselves can have planners on board that adjust their behaviors dynamically.</p>
<p>The planners have been used in different kind of robots, too.</p>
<p>For example, an on board planner and reactive execution agent was used to autonomously control the NASA Deep Space 1 spacecraft prepared in its flight rounding over the comet.</p>
<p>AI Planners have been used to provide adaptability and flexibility robots in the past and in the present, in the factory, in the home, and in the outer space.</p>
<p>And it's nearing which to put good use tomorrow.</p>
<p>We hope you'll be part in creating this future.</p>
<h2> <span class="mw-headline" id="Feature_-_Story_of_A.2A_and_STRIPS_by_Nils_Nilsson">Feature - Story of A* and STRIPS by Nils Nilsson</span></h2>
<p>Hello, my name is Nils Nilsson.</p>
<p>I helped in the development of A Star and STRIPS, and I'd like to explain a little bit about the history of those programs.</p>
<p>In the mid 1960's at SRI, then called the Stanford Research Institute, I was working on a robot called Shakey.</p>
<p>Shakey had several programs, some for dealing with perception.</p>
<p>We had machine vision programs, for example, and some controlled Shakey's actions as it moved around in it's environment.</p>
<p>There were two problems in developing these programs for controlling Shakey's actions.</p>
<p>One problem was how Shakey should navigate throughout a, a room strewn with obstacles without bumping in to any of them.</p>
<p>Another problem concerned how Shakey should put together its high level actions in order to achieve high level goals.</p>
<p>With regard to the navigation problem, we set up waypoints that were adjacent to and somewhat standing off of various obstacles in the room.</p>
<p>These waypoints could be considered nodes in a graph.</p>
<p>The edges of the graph would be the straight line distances between way points that Shakey would be able to travel.</p>
<p>So the problem of navigating from one point in the room to another is the same as the problem of finding the shortest path in a graph.</p>
<p>Edgar Dykstra had an algorithm for doing just that, but the problem with the Dykstra algorithm was that it searched outward from the start node toward the goal in all directions.</p>
<p>What we wanted was an algorithm that focused its search more in the direction of the goal.</p>
<p>Now I was aware of a program developed at Edinburgh University, a graph traverser program, by Jim Dorin and Donald Rickey that did focus toward the goal.</p>
<p>Their algorithm assigned numbers to nodes in the graph that were purported to be the difficulty of achieving the goal from that particular node.</p>
<p>I suggested that, that number ought to be an estimate of the distance from the node to the goal, ignoring any obstacles that might be in the way.</p>
<p>A colleague at SRI, Burt Brofel, suggested that the number ought to involve, also.</p>
<p>The distance from the start node to the node in question and that would prevent Shakey from being led down promising but ultimately futile paths.</p>
<p>Another colleague, Peter Hart, suggested that if the estimate from the node to the goal was a lower bound on the true distance Shakey would have to travel from that node to the goal.</p>
<p>Then the algorithm, which we named A Star, would in fact achieve the shortest path that was possible.</p>
<p>Then Peter Hart and Burt Rayfield /g and I together set about to prove Peter's conjecture and that was the development of the A&#42; algoritm which involved this number associated with each node that in, that was a sum of the distance from the start node to the node in question plus the estimate of the distance from that node to the goal.</p>
<p>With regard to the second problem, the one I'm stringing together, Shakey's high level actions to achieve higher level goals, Richard Fikes and I, another colleague at SRI, developed a system we called STRIPS for Stanford Research Institute Problem Solver.</p>
<p>STRIPS used high-level models of Shakey's world, that is instead of just the coordinates, the positions in Shakey's room, we used a database of facts that were true of particular situations that Shakey could get itself into.</p>
<p>So we still wanted to be able to solve the problem of achieving these high-level goals by some sort of graph searching program.</p>
<p>And so the starting node of the graph would be a list of all the facts that were true in Shakey's present situation.</p>
<p>The goal then was also described by some statements of facts that we wanted Shakey to make true by achieving, by applying, actually, these high-level actions.</p>
<p>So what we needed in order to convert this into a search problem in the graph would be a computational way of producing states of the world, that is, other databases describing what a particular state of the world would be when Shakey applied one of it's high-level actions.</p>
<p>To perform that computation, we invented something called STRIPS rules.</p>
<p>Now, a STRIPS rule would consist of a pre-condition, that is to say all of the facts that had to be in a particular world, in order for Shakey to apply one of it's high-level actions.</p>
<p>A delete list, that is to say a list of facts which could no longer be guaranteed to be true if Shakey did apply one of it's high-level actions, and an add list, which would be those facts which the high-level action would make true.</p>
<p>And so what we did is use these strips rules to go from one state, that is one database describing Shakey's current situation, to successor states in the graph.</p>
<p>So we could even use the A Star algorithm if we had a good way of, estimating what the distance would be from one of these databases, to one which had Shakey's goal achieved.</p>
<p>So we could use A Star, if we had that particular system.</p>
<p>Actually, in the system that we employed at program, the STRIPS system, we worked backwards from the goal by applying these STRIPS operators in a somewhat backward direction.</p>
<p>Those of us who were involved in the development, A&#42; and STRIPS, are gratified to know that these systems are used in many present day AI applications.</p>
<h1> <span class="mw-headline" id="Additional_Stuff">Additional Stuff</span></h1>
<h2> <span class="mw-headline" id="O-Plan_Unix_Systems_Admin_Demo">O-Plan Unix Systems Admin Demo</span></h2>
<p>This is a demonstration of O plan.</p>
<p>Running on a simple single shot planning example.</p>
<p>We call it Unix volume groups.</p>
<p>What we're doing here is selecting a number of logical volumes to map against a number of physical volumes in the UNI-X systems administration environment.</p>
<p>And the planner which we are just going to run, that's it already run, is producing a script which can safely remove the volume mappings.</p>
<p>This a good example of generative AI planner being used in an appropriate application area, previously a complex deeply nested script was used and its maintenance was difficult and error prone.</p>
<h2> <span class="mw-headline" id="I-X_CoSAR-TS_Demo">I-X CoSAR-TS Demo</span></h2>
<p>This is description of the Coalition Search and Rescue Task Support Project.</p>
<p>Which is funded by the DARPA DAML Program And it's conducted by AIAI [UNKNOWN] and IHMC at University of West Florida.</p>
<p>So we're initially showing you the CoABS grid manager.</p>
<p>And you can see that there's a number of services which are running.</p>
<p>in particular, there'll be a JINI lookup service.</p>
<p>And a number of other services running directly on the CoABS grid.</p>
<p>Using KAoS for my IHMC and this provides a directer service.</p>
<p>And we're running a domain manager named dm1.</p>
<p>We then have two I-X process panels running.</p>
<p>CoSAR TS for the coalition search and rescue panel.</p>
<p>And US-SAR for the US search and rescue panel.</p>
<p>And we have two services running for information lookup, called hospitals and resources.</p>
<p>Four agent guides are running, which help us to maintain policy across the use of these agents.</p>
<p>Now we have, KAoS policy administration tool, which is helping us set up and maintain these policies.</p>
<p>So we have one domain which is running, mini coalition, within this is the four agency or previously, CoSAR, US-SAR and then the two services, hospitals and resources.</p>
<p>We're interested in limiting the kinds of search and rescue resources which can be chosen, depending on the flights that these resources would have to make.</p>
<p>The countries that they will overfly.</p>
<p>So we're going to establish a new KPAT policy, which we're going to call gao-flight-restriction.</p>
<p>This is going to be a negative authorization policy.</p>
<p>We'll choose from one of the available actions available to us, and select that.</p>
<p>And within this slighted action we have an available roll of has on country.</p>
<p>In this case, we're interested in placing a restriction on a country, which is Gao And then we can add that as part of the policy specification.</p>
<p>That we have, we have home country Gao.</p>
<p>Then there's going to be a second part of this policy.</p>
<p>Which is the country that we won't permit overflights of Gaoen search and rescue resources too.</p>
<p>So we'll say has rescue destination in this case a limitation will be on the contrary so basically Gaoen search and rescue resources can not overfly arbelo so you can see that we've got two parts policy specification there.</p>
<p>And then we commit that policy and then we want to distribute it.</p>
<p>So, we'll just show you now the four agents once more within the KPAT tool.</p>
<p>And we can show you that for the resources, agent we have that policy in place.</p>
<p>So we're now going to move over to show you the two process panels which are available.</p>
<p>The coalition search and rescue coordinator is going to be where most of the action in the demonstration takes place.</p>
<p>And then we're going to use a US-SAR officer panel to initiate the action, because they would have taken the initial report about the downed airman because he's a US national.</p>
<p>So in this case the US-SAR officer is told to send any reports of downed airman up to the coalition search and rescue coordinator for their activity.</p>
<p>So, we'll take a look at the actions available to us at the process panel can support.</p>
<p>And we see there that's there's a way to expand the description of this activity is a particular built in standard operating procedure.</p>
<p>And we get the expansion, which is five substeps here.</p>
<p>We now look, take a look at the first part.</p>
<p>And we see a way to break that down even further.</p>
<p>You can see the indented sub process.</p>
<p>And we're going to look at the first part of that, which is to establish the medical capability.</p>
<p>Now, in this case, we know that we've got a burned Ammon So we're going to use burn care as the medical facility capabilities we're looking up.</p>
<p>And then we're able to indicate that we've done that manually.</p>
<p>Then we're going to use a service available to us.</p>
<p>This is one of the services which is registered.</p>
<p>So we can invoke the hospital service to establish medical care, establish the hospitals we have that can deal with burn capabilities.</p>
<p>We're just showing you here that we know about hospitals and indeed resources as a service.</p>
<p>This is in the ice base two which described services and in relationships in that particular panel.</p>
<p>So we're going to invoke the hospital service agent and it's going to now be acting.</p>
<p>You can see it there it's already going off and looking for, downloading information from the, SONAT database about Arabello and Binni in this case.</p>
<p>And it's checked, finding hospitals, and that it's filtering those by the ones that can provide burdened care.</p>
<p>We can take a look at that.</p>
<p>We can look at the details, look at the kinds of hospitals available, where they are and so on.</p>
<p>Find out that some can deal with a burn carriage can see.</p>
<p>GahwadEl looks like a likely candidate.</p>
<p>We're going to, be interested in exactly where the hospital is in relationship to the downed hammond.</p>
<p>So we can perhaps best do that by looking at a map of the facility.</p>
<p>This would be loaded from the information known to the I-X process panel.</p>
<p>You can see the pilot down in the sea there.</p>
<p>And his condition report is in burns.</p>
<p>And you can also see the GahwardEl Hospital.</p>
<p>which, as we noted before is, is, has burned care facilities available.</p>
<p>So we're going to go ahead and slight that hospital by binding the variable appropriately.</p>
<p>And we can just tick that off as done.</p>
<p>And then we're going to look at the next entry, which has established the country that, that hospital is in.</p>
<p>You can imagine this being done more automatically in future.</p>
<p>In this case we're going to indicate that it's Arabello because that's what was indicated in the information that came back in the look up.</p>
<p>So now, that we've got our hospital available, we're interested in selecting the search and rescue results appropriate to the task.</p>
<p>And we have a built in standard operating procedure to remind us how to do this.</p>
<p>And in particular the first one is to, look up the SAR resources available which is going to invoke a resources agent.</p>
<p>This will use a soap connection over to a CMU matchmaker, which finds these appropriate search and rescue resources.</p>
<p>And we're finding some resources coming back, and in fact only resources that are allowed for all flights of arabello are going to come back so chaos has already been filtering the number of resources found.</p>
<p>This case there are two that are permitted and seem well to do the job and we're going to choose the U.S.</p>
<p>Marine helicopter that's convenient.</p>
<p>It's in the right sort of location and it's also helps us deal with the fact this is a U.S.</p>
<p>Airman down.</p>
<p>So we're going to indicate that we selected that resource.</p>
<p>By.</p>
<p>Oh.</p>
<p>We, we'll look at the map first just to show you where that U.S.</p>
<p>Marine helicopter is.</p>
<p>So we're now going to show you we can.</p>
<p>Bind the variable for the SAR results selected.</p>
<p>The US Marine helicopter.</p>
<p>And again we'll indicate we've done that.</p>
<p>Again you can imagine in the future much of this could be done in a more automated way.</p>
<p>And then we're going to notify the SAR resource itself, this would best be done by talking with the U.S.</p>
<p>SAR officer who would control that resource so that it goes back onto the process panel and when they themselves have notified the helicopter pilot they would indicate it's done and you would see that the, the, there's a cascade of done information done to excess information flying back up turning lue if we have not find the hospital and we just going to check what the outstanding issue was that we're ask to just check it, as we went along, and yes the country and SAR resource chose nar allowed to get the, and that was in fact constrained by the KPAT policy.</p>
<p>So that concludes are demonstration.</p>
<p>Further information is available at some of the URL's now being shown.</p>
<p>Thank you for watching the demonstration of the course RTX project.</p>
<h2> <span class="mw-headline" id="I-X_I-Globe_Demo">I-X I-Globe Demo</span></h2>
<p>The SenseMaker receives a report about fire in the area.</p>
<p>He inserts a new record of the incident into his object view table.</p>
<p>Since he has no more information at the moment, he doesn't take any other action.</p>
<p>The incident is automatically added to the current state descriptor.</p>
<p>The state descriptor also contains current states of all field units and is shared in real time by both the Sensemaker and Commander.</p>
<p>25 minutes later, the Sensemaker receives reports about people injured in Town1 and Town2.</p>
<p>Again, he inserts corresponding records into his object view table and the state descriptor is updated.</p>
<p>Next, the Sensemaker creates two activities "treat injuries in Town1 and 2" and passes them to the Commander.</p>
<p>The Commander receives these activities immediately.</p>
<p>Before executing them, he orders to take aerial snapshots of the affected areas.</p>
<p>He passes the corresponding commands to subordinate field units.</p>
<p>Using HTN planning (I-Plan), CNP negotiation and the commitment mechanism, field units generate and execute a distributed plan.</p>
<p>They report completion of the task back to the Commander.</p>
<p>Based on the received snapshots, the Commander decides to build a mobile hospital nearby Town1 and 2.</p>
<p>He issues a corresponding command for the field units.</p>
<p>Once again, the field units come up with a distributed plan.</p>
<p>They transport construction materials and a builder to the site, and a mobile hospital is built there.</p>
<p>Upon completion of the task, the Commander executes the two treat injuries commands.</p>
<p>Medical material and medics are transported to the sites.</p>
<p>As usual, task completion is reported to the Commander.</p>
<p>Since these two tasks were originally created by the SenseMaker, he is also automatically notified about the tasks completion.</p>
<p>Approximately an hour later, the Sensemaker receives a report about collapsed houses in Town3.</p>
<p>He inserts a new record into his object view table.</p>
<p>He then passes a new task "build houses in Town3" to the Commander.</p>
<p>The Commander receives this task and executes it.</p>
<p>Field units take care of the task.</p>
<p>Successful completion of the task is reported to the Commander and is also propagated to the Sensemaker.</p>

<!-- 
NewPP limit report
Preprocessor node count: 2/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->


</div><div class="printfooter">
Retrieved from "<a href="https://share.coursera.org/wiki/index.php?title=AIPLAN:Transcripts&amp;oldid=30620">https://share.coursera.org/wiki/index.php?title=AIPLAN:Transcripts&amp;oldid=30620</a>"</div>
					<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/wiki/index.php/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="/wiki/index.php/Category:AI" title="Category:AI">AI</a></li><li><a href="/wiki/index.php/Category:Artificial_Intelligence_Planning" title="Category:Artificial Intelligence Planning">Artificial Intelligence Planning</a></li><li><a href="/wiki/index.php/Category:Coursera" title="Category:Coursera">Coursera</a></li></ul></div></div>					<!-- end content -->
									</div>
			</div>