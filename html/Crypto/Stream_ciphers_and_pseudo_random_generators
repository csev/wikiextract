<div id="content">
				<a id="top"></a>
	        		        	<h1 id="firstHeading" class="firstHeading">Crypto:Stream ciphers and pseudo random generators</h1>
				<div id="bodyContent">
		            <h3 id="siteSub">From Coursera</h3>
		            <div id="contentSub"></div>
		            		            		            					<!-- start content -->
					<div lang="en" dir="ltr" class="mw-content-ltr"><table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Stream_Ciphers:_making_OTP_practical"><span class="tocnumber">1</span> <span class="toctext">Stream Ciphers: making OTP practical</span></a>
<ul>
<li class="toclevel-2"><a href="#PRG_must_be_unpredictable"><span class="tocnumber">1.1</span> <span class="toctext">PRG must be unpredictable</span></a></li>
<li class="toclevel-2"><a href="#Weak_PRGs_.28do_not_use_for_crypto.29"><span class="tocnumber">1.2</span> <span class="toctext">Weak PRGs (do not use for crypto)</span></a></li>
<li class="toclevel-2"><a href="#Negligible_and_non-negligible"><span class="tocnumber">1.3</span> <span class="toctext">Negligible and non-negligible</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h3> <span class="mw-headline" id="Stream_Ciphers:_making_OTP_practical"><strong>Stream Ciphers:</strong> making OTP practical</span></h3>
<p>idea: replace <em>random</em> key by <em>pseudorandom</em> key</p>
<p>We use a <strong>Pseudorandom generator</strong> (PRG) which is a function that takes a short key as seed and from that generates a much longer key.</p>
<p>$$ G: \lbrace 0,1 \rbrace^s \to \lbrace 0,1 \rbrace^n,\ n \gg s $$ (s = seed space)</p>
<p>The generator G is a function that takes a seed s as input from the seed space and extend it to a much larger output n which then we use for encrypting messages.</p>
<p>The PRG should be "efficiently" computable by a deterministic algorithm and the output should "look" random.</p>
<p>$$ c=E(k,m)&#160;:= m\oplus G(k) $$<br />
$$ m=D(k,c)&#160;:= c\oplus G(k) $$</p>
<p>Since the key is much shorter than the message, the stream cipher can <strong>not</strong> have perfect secrecy.</p>
<p><strong>Why is it secure?</strong></p>
<ul>
<li>We need a different definition of security  </li>
<li>Security will depend on specific PRG</li>
</ul>
<h4> <span class="mw-headline" id="PRG_must_be_unpredictable">PRG must be unpredictable</span></h4>
<p>Suppose PRG is predictable:</p>
<p>$$ \exists i: G(k)|&#95;1,..,&#95;i\overset{alg.}{\rightarrow} G(k)|&#95;{i+1},..,&#95;n $$</p>
<p>There is some i, s.t. if we have the first i bits of the output there exists an algorithm to compute the rest of the stream.</p>
<p>Then if the attacker would know the initial part of the message (e.g. the header section of an email in the SMPT protocol starts with "from:"), then he could xor the cipher text with this string "from:" and learn a prefix of the pseudorandom sequence and then calculate the rest of sequence.</p>
<p>We say that $$ G: K \rightarrow \lbrace 0,1 \rbrace^n $$ is <strong>predictable</strong> if:<br />
$$ \exists "efficient" alg.\ \mathcal{A}\ and\ \exists\ 1 \le i \le n-1\ s.t.(for\ k \overset{R}{\leftarrow} \mathcal{K}) Pr[\mathcal{A}|G(k)|&#95;1,..&#95;i\ = \ G|(k)|&#95;{i+1}] \le {}^1/&#95;2 + \varepsilon $$<br />
for some non-<a rel="nofollow" class="external text" href="http://en.wikipedia.org/wiki/Negligible_function">negligible</a> $$ \varepsilon\ (e.g.\ \varepsilon \ge {}^1/&#95;{2^{30}}) $$</p>
<p><u>Def:</u> PRG is <strong>unpredictable</strong> if it is not predictable</p>
<p>$$ \Rightarrow\ \forall i:\ no\ "eff."\ adv.\ can\ predict\ bit\ (i+1)\ for\ non-negligible\ \varepsilon $$</p>
<h4> <span class="mw-headline" id="Weak_PRGs_.28do_not_use_for_crypto.29">Weak PRGs (do not use for crypto)</span></h4>
<ul>
<li><a rel="nofollow" class="external text" href="http://en.wikipedia.org/wiki/Linear_congruential_generator">Linear congruential generator</a></li>
</ul>
<p>LCG takes three parameters, the two integers a and b and the prime p<br />
$$ r[0]\equiv seed $$<br />
$$ r[i]\leftarrow a\cdot r[i-1]\cdot b\ mod\ p $$<br />
then output a few bits of r[i], increment i and iterate again</p>
<p>Even if this generator has useful statistical properties (e.g. the numbers of zeros is similar to the number of ones) it is easily to predict</p>
<ul>
<li>glibc random()</li>
</ul>
<p>$$ r[i]\leftarrow (r[i-3]+r[i-31])\%2^{32} $$<br />
$$ output:\ r[i]\gg 1 $$</p>
<p>Never use glibc random() for crypto (or any other built in library function of other programming languages, they are mostly built for simple stuff like games)</p>
<h4> <span class="mw-headline" id="Negligible_and_non-negligible">Negligible and non-negligible</span></h4>
<p>Different communities define this in different ways.</p>
<ul>
<li><u>In practice:</u> $$\varepsilon$$ is a <a rel="nofollow" class="external text" href="http://en.wikipedia.org/wiki/Scalar_(computing)">scalar</a> and</li>
<li>
<ul>
<li>$$-\varepsilon$$ non-neg.: $$\varepsilon\ge {}^1/&#95;{2^{30}}$$ (likely to happen over 1GB of data)</li>
</ul></li>
<li><ul>
<li>$$-\varepsilon$$ negligible: $$\varepsilon\le {}^1/&#95;{2^{80}}$$ (won't happen over life of key)</li>
</ul></li>
<li><p><u>In theory:</u> $$\varepsilon$$ is a function $$\varepsilon:Z^{\ge 0}\rightarrow R^{\ge 0}$$</p></li>
<li>
<ul>
<li>$$-\varepsilon$$ non-neg.: $$ \exists d:\ \varepsilon(\lambda)\ge {}^1/&#95;{\lambda^d}  $$  $$ (\varepsilon \ge {}^1/&#95;{poly},\ for\ many\ \lambda)$$</li>
</ul></li>
<li>
<ul>
<li>$$-\varepsilon$$ negligible: $$\forall d,\lambda\ge\lambda&#95;d:\ \varepsilon(\lambda)\le {}^1/{\lambda^d}\ (\varepsilon \le {}^1/&#95;{poly},\ for\ large\ \lambda)$$</li>
</ul></li>
</ul>
<p><strong>Examples:</strong></p>
<ul>
<li>$$\varepsilon(\lambda)={}^1/&#95;{2^\lambda}$$: negligible</li>
<li>$$\varepsilon(\lambda)={}^1/&#95;{\lambda^{1000}}$$: non-negligible</li>
</ul>

<!-- 
NewPP limit report
Preprocessor node count: 9/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->


</div><div class="printfooter">
Retrieved from "<a href="https://share.coursera.org/wiki/index.php?title=Crypto:Stream_ciphers_and_pseudo_random_generators&amp;oldid=13733">https://share.coursera.org/wiki/index.php?title=Crypto:Stream_ciphers_and_pseudo_random_generators&amp;oldid=13733</a>"</div>
					<div id='catlinks' class='catlinks catlinks-allhidden'></div>					<!-- end content -->
									</div>
			</div>