<div id="content">
				<a id="top"></a>
	        		        	<h1 id="firstHeading" class="firstHeading">Progfun:Main</h1>
				<div id="bodyContent">
		            <h3 id="siteSub">From Coursera</h3>
		            <div id="contentSub"></div>
		            		            		            					<!-- start content -->
					<div lang="en" dir="ltr" class="mw-content-ltr"><table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Functional_Programming_Principles_in_Scala_.28Martin_Odersky.29"><span class="tocnumber">1</span> <span class="toctext">Functional Programming Principles in Scala (Martin Odersky)</span></a>
<ul>
<li class="toclevel-2"><a href="#Useful_information"><span class="tocnumber">1.1</span> <span class="toctext">Useful information</span></a></li>
<li class="toclevel-2"><a href="#Tips_and_Tricks"><span class="tocnumber">1.2</span> <span class="toctext">Tips and Tricks</span></a></li>
<li class="toclevel-2"><a href="#Lecture_Notes"><span class="tocnumber">1.3</span> <span class="toctext">Lecture Notes</span></a></li>
<li class="toclevel-2"><a href="#FAQs_.28Spring_2013.29"><span class="tocnumber">1.4</span> <span class="toctext">FAQs (Spring 2013)</span></a></li>
<li class="toclevel-2"><a href="#Errata_.28Fall_2013.29"><span class="tocnumber">1.5</span> <span class="toctext">Errata (Fall 2013)</span></a></li>
<li class="toclevel-2"><a href="#Scala_Link"><span class="tocnumber">1.6</span> <span class="toctext">Scala Link</span></a></li>
<li class="toclevel-2"><a href="#Additional_Scala_resources"><span class="tocnumber">1.7</span> <span class="toctext">Additional Scala resources</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Functional_Programming_Principles_in_Scala_.28Martin_Odersky.29">Functional Programming Principles in Scala (Martin Odersky)</span></h1>
<p>This course has been run the following times:</p>
<ul>
<li><a rel="nofollow" class="external text" href="https://class.coursera.org/progfun-2012-001/class/index">progfun-2012-001</a></li>
<li><a rel="nofollow" class="external text" href="https://class.coursera.org/progfun-002/class">progfun-2013-002</a></li>
</ul>
<h2> <span class="mw-headline" id="Useful_information">Useful information</span></h2>
<ul>
<li><a href="/wiki/index.php/Progfun:AssignmentMarkingCriteria" title="Progfun:AssignmentMarkingCriteria">Progfun:AssignmentMarkingCriteria</a></li>
<li><a href="/wiki/index.php/Progfun:Emacs" title="Progfun:Emacs">Progfun:Emacs</a></li>
<li><a href="/wiki/index.php/Progfun:sbt" title="Progfun:sbt">Progfun:sbt</a></li>
</ul>
<h2> <span class="mw-headline" id="Tips_and_Tricks">Tips and Tricks</span></h2>
<ul>
<li><a href="/wiki/index.php/Cloud_Drive" title="Cloud Drive">Cloud Drive</a></li>
</ul>
<h2> <span class="mw-headline" id="Lecture_Notes">Lecture Notes</span></h2>
<ul>
<li><a href="/wiki/index.php/Lecture_1.1_-_Programming_Paradigms" title="Lecture 1.1 - Programming Paradigms">Lecture 1.1 - Programming Paradigms</a></li>
<li><a href="/wiki/index.php/Lecture_7.5_-_Case_Study:_the_Water_Pouring_Problem" title="Lecture 7.5 - Case Study: the Water Pouring Problem">Lecture 7.5 - Case Study: the Water Pouring Problem</a></li>
<li><a href="/wiki/index.php/Lecture_7.6_-_Course_Conclusion" title="Lecture 7.6 - Course Conclusion">Lecture 7.6 - Course Conclusion</a></li>
</ul>
<h2> <span class="mw-headline" id="FAQs_.28Spring_2013.29">FAQs (Spring 2013)</span></h2>
<ul>
<li><a href="/wiki/index.php/Example_Assignment" title="Example Assignment">Example Assignment</a></li>
<li><a href="/wiki/index.php/Assignment1_-_Functions_And_Evaluations" title="Assignment1 - Functions And Evaluations">Assignment1 - Functions And Evaluations</a></li>
<li><a href="/wiki/index.php?title=Assignment2_-_Higher_Order_Functions&amp;action=edit&amp;redlink=1" class="new" title="Assignment2 - Higher Order Functions (page does not exist)">Assignment2 - Higher Order Functions</a></li>
<li><a href="/wiki/index.php?title=Assignment3_-_Data_and_Abstractions&amp;action=edit&amp;redlink=1" class="new" title="Assignment3 - Data and Abstractions (page does not exist)">Assignment3 - Data and Abstractions</a></li>
<li><a href="/wiki/index.php?title=Assignment4_-_Types_and_Pattern_Matching&amp;action=edit&amp;redlink=1" class="new" title="Assignment4 - Types and Pattern Matching (page does not exist)">Assignment4 - Types and Pattern Matching</a></li>
<li><a href="/wiki/index.php?title=Assignment5_-_Collections&amp;action=edit&amp;redlink=1" class="new" title="Assignment5 - Collections (page does not exist)">Assignment5 - Collections</a></li>
<li><a href="/wiki/index.php?title=Assignment6_-_Lazy_Evaluation&amp;action=edit&amp;redlink=1" class="new" title="Assignment6 - Lazy Evaluation (page does not exist)">Assignment6 - Lazy Evaluation</a></li>
</ul>
<h2> <span class="mw-headline" id="Errata_.28Fall_2013.29">Errata (Fall 2013)</span></h2>
<ul>
<li><p>General</p>
<p>0.1. <code>Each assignment is only allowed a maximum of 5 submissions</code>.</p>
<p>0.2. Some general remarks with in-lecture quizzes by Heather Miller (Staff from previous iteration): The issue is with how we are able to check your results on in-lecture quizzes on Coursera. There's no (reasonable) way for us to take your response, compile it, evaluate it, and return feedback.
So, for the first one or two weeks of the course, we check your answers in the in-lecture quizzes using regular expressions. In many cases, it's possible to provide correct answers that get evaluated as being incorrect with the regular expression.
For that reason, after week two, we've abandoned checking answers in the in-lecture quizzes and instead allow you time to prepare a response, and then show you the result (without any evaluation).
That said, take the feedback you receive in the in-lecture quizzes with a grain of salt for now&#160;:)</p>
<p>0.3. There is a penalty of 20% for each day passed the soft deadline (please pay close attention to timezone). If you have already passed  more than 4 days (= 4*24 hours = 96 hours), then your penalty will be 100%. You will get 0% even if your overall score is 10/10, your score for grade purposes is 0/10. To spell out clearly, if you are (0, 24 hours] over due, your actual score will be 20% off, if you are (24hrs, 48hrs] over due, your actual score will be 40% off, if you are (48hrs, 72hrs] over due, your actual score will be 60% off, if you are (72hrs, 96hrs] over due, your actual score will be 80% off, if you are over 96 hours late, your actual score will be 100% off. Notice also the maximum of 5 submissions are still observed during this period.</p>
<p>0.4. Staff Heather Miller's comment on score calculation, "Update on score calculation: Hi all, we've recently decided upon an equal-points policy for all assignments. The decision was made ultimately due to the fact that all assignments were weighted equally (that is, the max # of points as visible to students was the same, 10pts, for all assignments), regardless of the actual difficulty of each assignment. Given that all students couldn't possibly know how we weighted assignments in the previous semester, it would be unfair to use the same weighting as the last time around (there was a rationale for the weighting the last time around which would not apply for this iteration).
So it was decided that we'd weight all assignments equally, since most students probably assumed this would be the case and planned for this. 
That said, since there were a total of 6 assignments, we'll keep with the score of 10pts per assignment, which means a maximum of 60pts for the entire course. The same rules still stand as announced at the beginning of the course- those who have a 60% or higher (36pts) will receive a certificate of completion. Those with scores of 80% or higher (48pts) will receive a certificate with distinction. "</p></li>
</ul>
<p>(Ref: <a rel="nofollow" class="external free" href="https://class.coursera.org/progfun-002/forum/thread?thread_id=1515#post-6374">https://class.coursera.org/progfun-002/forum/thread?thread_id=1515#post-6374</a>)</p>
<ul>
<li><p>Week 1</p>
<p>1.0. Due Date for Hard Deadline should be: <code>Sun 29</code> Sep 2013 4:00 AM PDT (UTC -0700)</p></li>
<li><p>Week 2</p>
<p>2.0. Due Date for Hard Deadline should be: <code>Sun 6</code> Oct 2013 4:00 AM PDT (UTC -0700)</p>
<p>2.1. Lecture 2.1 Slide 4: At the bottom of the slide it says:
def fact (x: Int): Int = if (x == 0) 1 else fact(x-1)
while it should say:
def fact (x: Int): Int = if (x == 0) 1 else x*fact(x-1)</p>
<p>2.2. Lecture 2.6 quiz asks:
"Modify the Rational class so that rational numbers are kept unsimplified internally, but the simplification is applied when numbers are converted to strings. Do clients observe the same behavior when interacting with the rational class?" The answer should be no because the numer and denom methods are public. (Ref: <a rel="nofollow" class="external free" href="https://class.coursera.org/progfun-003/forum/thread?thread_id=309">https://class.coursera.org/progfun-003/forum/thread?thread_id=309</a>)</p>
<p>2.3. Lecture 2.6 modify gcd definition to always return positive integer
private def gcd(a: Int, b: Int): Int = if (b == 0) a.abs else gcd(b, a&#160;% b)
(Ref: <a rel="nofollow" class="external free" href="https://class.coursera.org/progfun-003/forum/thread?thread_id=377">https://class.coursera.org/progfun-003/forum/thread?thread_id=377</a>)</p>
<p>2.4. Lecture 2.7: Order of Execution (Lecture Slides Week3-3, Page 10) also affect video as well
new Rational(1, 2).less(new Rational(2, 3))
[1/x;2/y] [newRational(2;3)/that] [new Rational(1;2)/this]
Should be changed to 
[newRational(2;3)/that][1/x;2/y] [new Rational(1;2)/this]
(Ref: <a rel="nofollow" class="external free" href="https://class.coursera.org/progfun-003/forum/thread?thread_id=695">https://class.coursera.org/progfun-003/forum/thread?thread_id=695</a>)</p></li>
<li><p>Week 3</p>
<p>3.0. Due Date for Hard Deadline should be: <code>Sun 13</code> Oct 2013 4:00 AM PDT (UTC -0700)</p></li>
<li><p>Week 4</p>
<p>4.1. Lecture 4.6 (19:30-36) Exercises should be Sum(Prod(Number(2), Var("x")), Var("y")) and Prod(Sum(Number(2), Var("x")), Var("y")), and second answer should print as "(2+x)*y" (Ref: <a rel="nofollow" class="external free" href="https://class.coursera.org/progfun-003/forum/thread?thread_id=1045">https://class.coursera.org/progfun-003/forum/thread?thread_id=1045</a>)</p></li>
<li><p>Week 5</p>
<p>5.1. Lecture 5.5 Slide 20, the function reverse definition should be changed to: <code>def reverse[T](xs: List[T]): List[T] = (xs foldLeft List[T]() )((xs, x) =&gt; x&#160;:: xs )</code> (Ref: <a rel="nofollow" class="external free" href="https://class.coursera.org/progfun-003/forum/thread?thread_id=1190">https://class.coursera.org/progfun-003/forum/thread?thread_id=1190</a>)</p></li>
<li><p>Week 6</p>
<p>6.1. Handwritten translation in Lecture 6.5, slide 7 does not compile in Worksheet, change to this: <code>books flatMap( b =&gt; b.authors.withFilter(_ startsWith "Bird,") map (_ =&gt;b.title))</code> (Ref: <a rel="nofollow" class="external free" href="https://class.coursera.org/progfun-003/forum/thread?thread_id=660">https://class.coursera.org/progfun-003/forum/thread?thread_id=660</a>)</p>
<p>6.2. Lecture 6.2 (Slide 4): the type of the 1st foldRight parameter is wrong, should be changed as follows: <code>(xss foldRight Seq[(Int,Int)]())(_ ++ _)</code> (Ref: <a rel="nofollow" class="external free" href="https://class.coursera.org/progfun-003/forum/thread?thread_id=1236">https://class.coursera.org/progfun-003/forum/thread?thread_id=1236</a>)</p>
<p>6.3. Lecture 6.2 (Slide 2): the fruit filter example should be changed as: <code>fruit filter (_ startsWith "app")</code> (Ref: <a rel="nofollow" class="external free" href="https://class.coursera.org/progfun-003/forum/thread?thread_id=1267">https://class.coursera.org/progfun-003/forum/thread?thread_id=1267</a>)</p>
<p>6.4. Lecture 6.4 (Slide 4): fix: <code>for (b &lt;- books if b.title.indexOf("Program") &gt;= 0)</code> (Ref: <a rel="nofollow" class="external free" href="https://class.coursera.org/progfun-003/forum/thread?thread_id=1311">https://class.coursera.org/progfun-003/forum/thread?thread_id=1311</a>)</p></li>
<li><p>Week 7</p></li>
</ul>
<h2> <span class="mw-headline" id="Scala_Link">Scala Link</span></h2>
<ul>
<li><a rel="nofollow" class="external text" href="http://twitter.github.com/effectivescala/">Effective Scala</a></li>
<li><a rel="nofollow" class="external text" href="http://matt.might.net/articles/learning-scala-in-small-bites/">Learning Scala in Small Bites</a></li>
</ul>
<h2> <span class="mw-headline" id="Additional_Scala_resources">Additional Scala resources</span></h2>
<ul>
<li><p>Scala by Example <a rel="nofollow" class="external free" href="http://www.scala-lang.org/sites/default/files/linuxsoft_archives/docu/files/ScalaByExample.pdf">http://www.scala-lang.org/sites/default/files/linuxsoft_archives/docu/files/ScalaByExample.pdf</a></p></li>
<li><p>Scala for the Impatient <a rel="nofollow" class="external free" href="http://horstmann.com/scala/">http://horstmann.com/scala/</a></p></li>
<li><p>Functional Programming in Scala <a rel="nofollow" class="external free" href="http://www.manning.com/bjarnason/">http://www.manning.com/bjarnason/</a></p></li>
<li><p>Programming in Scala, First Edition <a rel="nofollow" class="external free" href="http://www.artima.com/pins1ed/">http://www.artima.com/pins1ed/</a></p></li>
</ul>
<p>The above are the books you may read. Others listed at <a rel="nofollow" class="external free" href="http://www.scala-lang.org/node/959">http://www.scala-lang.org/node/959</a></p>
<p>FP:
<ul><li> Structure and Interpretation of Computer Programs <a rel="nofollow" class="external free" href="http://mitpress.mit.edu/sicp/">http://mitpress.mit.edu/sicp/</a></p>
</li></ul>

<ul>
<li><p>Introduction to Functional Programming (Bird &amp; Wadler) <a rel="nofollow" class="external free" href="http://www.nlda-tw.nl/janmartin/vakken/TFIT/Extra%20materiaal/Bird_Wadler.%20Introduction%20to%20Functional%20Programming.1ed.pdf">http://www.nlda-tw.nl/janmartin/vakken/TFIT/Extra%20materiaal/Bird_Wadler.%20Introduction%20to%20Functional%20Programming.1ed.pdf</a></p></li>
<li><p>Haskell: The Craft of Functional Programming <a rel="nofollow" class="external free" href="http://www.haskellcraft.com/craft3e/Home.html">http://www.haskellcraft.com/craft3e/Home.html</a></p></li>
<li><p>ML for the Working Programmer <a rel="nofollow" class="external free" href="http://www.cl.cam.ac.uk/~lp15/MLbook/">http://www.cl.cam.ac.uk/~lp15/MLbook/</a></p></li>
<li><p>Programming in Scheme <a rel="nofollow" class="external free" href="http://www.amazon.com/Programming-Scheme-Michael-Eisenberg/dp/0894261150">http://www.amazon.com/Programming-Scheme-Michael-Eisenberg/dp/0894261150</a></p></li>
<li><p>Applicative High Order Programming: The Standard ML Perspective <a rel="nofollow" class="external free" href="http://www.amazon.com/Applicative-High-Order-Programming-M-L-Perspective/dp/0412392402">http://www.amazon.com/Applicative-High-Order-Programming-M-L-Perspective/dp/0412392402</a></p></li>
<li><p>Functional Programming: Application and Implementation (Peter Henderson)</p></li>
<li><p>Thinking Recursively <a rel="nofollow" class="external free" href="http://www-cs-faculty.stanford.edu/~eroberts/books/ThinkingRecursively/">http://www-cs-faculty.stanford.edu/~eroberts/books/ThinkingRecursively/</a></p></li>
<li><p>(Russian) <a rel="nofollow" class="external text" href="http://habrahabr.ru/post/77750/">Scala. Введение</a> (a short introduction)</p>
<p>Thank you, qu1j0t3 @ #scala:freenode for this collection</p></li>
</ul>

<!-- 
NewPP limit report
Preprocessor node count: 2/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->


</div><div class="printfooter">
Retrieved from "<a href="https://share.coursera.org/wiki/index.php?title=Progfun:Main&amp;oldid=18216">https://share.coursera.org/wiki/index.php?title=Progfun:Main&amp;oldid=18216</a>"</div>
					<div id='catlinks' class='catlinks catlinks-allhidden'></div>					<!-- end content -->
									</div>
			</div>