<div id="content">
				<a id="top"></a>
	        		        	<h1 id="firstHeading" class="firstHeading">Interactivepython:MiniProjects:Week2</h1>
				<div id="bodyContent">
		            <h3 id="siteSub">From Coursera</h3>
		            <div id="contentSub"></div>
		            		            		            					<!-- start content -->
					<div lang="en" dir="ltr" class="mw-content-ltr"><table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Week_2_Mini-project"><span class="tocnumber">1</span> <span class="toctext">Week 2 Mini-project</span></a>
<ul>
<li class="toclevel-2"><a href="#.22Guess_the_number.22_game"><span class="tocnumber">1.1</span> <span class="toctext">"Guess the number" game</span></a>
<ul>
<li class="toclevel-3"><a href="#Mini-project_development_process"><span class="tocnumber">1.1.1</span> <span class="toctext">Mini-project development process</span></a></li>
<li class="toclevel-3"><a href="#Grading_rubric_-_11_pts_total_.28scaled_to_100_pts.29"><span class="tocnumber">1.1.2</span> <span class="toctext">Grading rubric - 11 pts total (scaled to 100 pts)</span></a></li>
</ul>
</li>
</ul>
</li>
</ul>
</td></tr></table>
<h1> <span class="mw-headline" id="Week_2_Mini-project">Week 2 Mini-project</span></h1>
<h2> <span class="mw-headline" id=".22Guess_the_number.22_game">"Guess the number" game</span></h2>
<p><a rel="nofollow" class="external text" href="https://class.coursera.org/interactivepython-2012-001/human_grading/view?assessment_id=12">original source</a></p>
<p>One of the simplest two-player games is "Guess the number".  The first
player thinks of a secret number in some known range while the second
player attempts to guess the number.  After each guess, the first
player answers either "Higher", "Lower" or "Correct!" depending on
whether the secret number is higher, lower or equal to the guess.  In
this project, you will build a simple interactive program in Python
where the computer will take the role of the first player while you
play as the second player.</p>
<p>You will interact with your program using an input field and buttons.
For this project, we will ignore the canvas and print the computer's
responses in the console.  This idea of building an initial version of
your project that prints information in the console is a development
strategy that you should use in later projects as well.  Focusing on
getting the logic of the program correct before trying to make it
display the information in some "nice" way on the canvas usually saves
lots of time since debugging logic errors in graphical output can be
tricky.</p>
<h3> <span class="mw-headline" id="Mini-project_development_process"> Mini-project development process </span></h3>
<p>We have provided a basic template for this
mini-project <a rel="nofollow" class="external text" href="http://www.codeskulptor.org/#examples-guess_the_number_template.py">here</a>. Our suggested development strategy for the basic version of
"Guess the number" is:</p>
<ol>

<li>Decide on a set of global variables that contain the state of the
game.  For example, one obvious choice is the secret number that has
been generated by the program.  You will need other global variables,
especially to accomodate later extensions to the basic game.

</li><li>Figure out how to generate a random secret number in a given
<p>range, <code>low</code> to <code>high</code>.  When discussing ranges,
we will follow the standard Python convention of including the low end
of the range and excluding the high end of the range, which can be
expressed mathematically as <code>[low, high)</code>.  So, <code>[0,
3)</code> means all of the numbers starting at 0 up to, but not
including 3.  In other words 0, 1, and 2. We suggest using the range
<code>[0, 100)</code> in your first implementation.  <b>Hint:</b> look
at the functions in the
<code>random</code> module to figure out how to easily select such a
random number.  We suggest testing this out in a separate CodeSkulptor
tab before adding code to your project.
</p>
</li><li>Figure out how to create an input text box using
<p>the <code>simplegui</code> module.  You will use this input to get the
guess from the user.  For all variants of the game, this input field
should always be active (in other words, a game should always be in
progress).  Again, we would test out using this function in a separate
CodeSkulptor tab before adding code to your project.
</p>
</li><li>Write the event handler <code>input_guess(guess)</code> that
<p>takes the input <code>guess</code>, compares it to the secret number
and prints out the appropriate response.  Remember
that <code>guess</code> is a string so you will need to convert it
into a number before testing it against the secret
number.  <b>Hint:</b> we have showed you how to convert strings to
numbers in the lectures.
</p>
</li><li>Test your code by playing multple games of "Guess the number" with
<p>a fixed range.  At this point, you will need to re-run your program
between each game (using the CodeSkulptor "Run" button).
</p>
</li></ol>
<p>From this minimal working version of "Guess the number", the rest of
this project consists of adding extra functionality to your
project. There are two improvements that you will need to make to
get full credit:</p>
<ul>
<li>
Using function(s) in the <code>simplegui</code> module, add buttons to
restart the game so that you don't need to repeatedly click "Run" in
CodeSkulptor to play multiple games.  You should add two buttons:
"Range: 0 - 100" and "Range: 0 - 1000" that allow the player to choose
different ranges for the secret number.  Hitting either of these
buttons should restart the game and print out an appropriate message.
They should work at any time during the game.
</li></ul>
<p>As you improve in playing "Guess the number", you may notice that a
good strategy is to maintain an interval that consists of the highest
guess that is "Lower" than the secret number and the lowest guess that
is "Higher' than the secret number. A good choice for the next guess
is the number that the average of these two numbers.  The answer for
this new guess then allows you to figure a new interval that contains
the secret number and that is half as large.  For example, if the
secret number is in the range <code>[0, 100)</code>, it is a good idea
to guess <code>50</code>. If the answer is "Higher", the secret number
must be in the range <code>[51, 100)</code>.  It is then a good idea
to guess <code>75</code> and so on.  This technique of successively
narrowing the range corresponds to a well-known computer algorithm
known
as <a rel="nofollow" class="external text" href="http://en.wikipedia.org/wiki/Binary_search_algorithm">binary search</a>.</p>
<ul>
<li>
Your final addition to "Guess the number" will be to restrict the
player to a limited number of guesses.  Once the player has used up
those guesses, they lose, the game prints out an appropriate message,
and a new game immediately starts.  As we noted above, an optimal
strategy for playing "Guess the number" approximately halves the range
of possible secret numbers after each guess.  So, your game should set
the number of allowed guesses to be smallest integer <code>n</code>
such that <code>2 ** n &gt;= high - low + 1</code> where the secret
number lies in <code>[low, high)</code>.  To compute <code>n</code>,
you should investigate using the functions <code>math.log</code>
and <code>math.ceil</code> in the <code>math</code> module.
</li></ul>
<p>When you your program starts, the game should immediately begin in
range <code>[0, 100)</code>.  When the game ends (either because the
player wins or because they run out of guesses), a new game with the
same range as the last one should immediately begin.  Whenever the
player clicks one of the range buttons, the current game should stop
and a new game with the selected range should begin.</p>
<h3> <span class="mw-headline" id="Grading_rubric_-_11_pts_total_.28scaled_to_100_pts.29"> Grading rubric - 11 pts total (scaled to 100 pts) </span></h3>
<p>Your peers will assess your mini-project according to the rubric given
below.  To guide you in determining whether your project satisfies
each item in the rubric, please consult the video that demonstrates
our implementation of "Guess the number".  Small deviations from the
textual output of our implementation are fine.  You should avoid
potentially confusing deviations (such as printing "Too high" or "Too
low" instead of "Lower" and "Higher").  Whether moderate deviations
satisfy an item of the grading rubric is at your peers' discretion
during their assessment.</p>
<p>Here is a break down of the scoring:</p>
<ul>
<li> 1 pt - The game starts immediately when the "Run" button in CodeSkulptor is pressed.
</li><li> 1 pt - A game is always in progress.
</li><li> 1 pt - The game reads <code>guess</code> from input field and
<p>correctly prints it out.
</p>
</li><li> 3 pts - The game correctly plays "Guess the number" with
<p>range <code>[0, 100)</code> and prints understandable output messages
to the console. Play three complete games: 1 pt for each correct game.
</p>
</li><li> 2 pts - The game includes two buttons that allow the user to
<p>select the range <code>[0, 100)</code> or the range <code>[0,
1000)</code>.  These buttons correctly change the range and print an
appropriate message. (1 pt per button.)
</p>
</li><li> 2 pts - The game restricts player to finite number of guesses and
<p>correctly terminates game when guesses are exhausted.  Award 1 pt if
the number of guesses is printed, but the game does not terminate and
restart when these guesses are exhausted.
</p>
</li><li> 1 pt - The game varies the number of allowed guess based on
<p>range, seven guesses for range <code>[0, 100)</code>, ten guesses for
range <code>[0, 1000)</code>.
</p>
</li></ul>
<p>To help aid you in gauging what a full credit project might look like,
the video lecture on the "Guess the number" project includes a
demonstration of our implementation of this project.</p>
<hr />
<p><a href="/wiki/index.php/Interactivepython:MiniProjects" title="Interactivepython:MiniProjects">MiniProjects</a></p>
<p><a href="/wiki/index.php/Interactivepython:Main" title="Interactivepython:Main">Main</a></p>

<!-- 
NewPP limit report
Preprocessor node count: 3/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->


</div><div class="printfooter">
Retrieved from "<a href="https://share.coursera.org/wiki/index.php?title=Interactivepython:MiniProjects:Week2&amp;oldid=5713">https://share.coursera.org/wiki/index.php?title=Interactivepython:MiniProjects:Week2&amp;oldid=5713</a>"</div>
					<div id='catlinks' class='catlinks catlinks-allhidden'></div>					<!-- end content -->
									</div>
			</div>