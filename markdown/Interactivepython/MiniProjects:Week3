#Week 3 Mini-project
##"Stopwatch: The Game"
<a href="https://class.coursera.org/interactivepython-2012-001/human_grading/view?assessment_id=13">original source</a>

Our mini-project for this week will focus on combining text drawing in the canvas with timers to build a simple digital stopwatch that keep track of the time in tenths of a second. &nbsp;The stopwatch should contain "Start", "Stop" and "Reset" buttons. &nbsp;To help guide you through this project, we suggest that you download the provided <a href="http://www.codeskulptor.org/#examples-stopwatch_template.py"> program template</a> for this mini-project and build your stopwatch program as follows:
<h3> Mini-project development process </h3>
<ol><li>Construct a timer with an associated interval of 0.1 seconds whose event handler increments a global integer. &nbsp;This integer will keep track of the time in tenths of seconds. &nbsp;Test your timer by printing the global integer to the console. To stop the timer and print statements, use the reset button in upper left. <b>Important:</b> Do not use floating point numbers to keep track of tenths of a second! &nbsp;While it's certainly possible to get it working, the imprecision of floating point can make your life miserable. &nbsp;Use an integer instead, i.e., 12 represents 1.2 seconds.
</li><li> Write the event handler function for the canvas that draws the current time(simply as an integer, you should not worry about formating it yet) in the middle of the canvas. Remember that you will need to convert the current time into a string using <code>str</code> before drawing it.
</li><li> Add "Start" and "Stop" buttons whose event handlers start and stop the timer. &nbsp;Next, add a "Reset" button that stops the timer and reset the current time to zero.
</li><li> Next, write a helper function <code> format(t) </code> that returns a string of the form <code>A:BC.D</code> where <code>A, B, C</code> and <code> D</code> are digits in the range 0-9. &nbsp;Test this function independent of your project. &nbsp;Note that your helper function <code>format</code> should always draw leading zeros correctly. &nbsp;For example<ul><li> <code> format(0) == 0:00.0 </code></li><li> <code> format(11) = 0:01.1 </code></li><li> <code> format(321) = 0:32.1 </code></li><li> <code> format(613) = 1:01.3 </code></li></ul>
<b>Hint:</b> Use integer division and remainder (modular arithmetic) to extract various digits for the formatted time from the global integer timer.
</li><li> Insert the <code>format</code> function into your canvas event handler will complete the stopwatch. </li><li> Finally, to turn your stopwatch into a test of reflexes, add to two numerical counters that keep track of the number of times that you have stopped the watch and how many times you manage to stop the watch on a whole second. These counters should be drawn in the upper lefthand part of the stopwatch canvas in the <code>"x/y"</code> where <code>x</code> is the number of successful stops and <code>y</code> is number of total stops. &nbsp;My best effort at this simple game is around a 25% success rate. &nbsp;Note that hitting the "Stop" button when the timer is already stopped should not change your score.</li><li> Modify "Reset" so as to set these number back to zero when clicked.</li></ol>Steps 1-3 and 5-7 above are relatively straightforward. &nbsp;However, step 4 requires some adept &nbsp;use of integer division and modular arithmetic. &nbsp;So, we again emphasize that you build and debug the helper function <code>format(t)</code> separately. &nbsp;Following this process will save you time. &nbsp;For an example of a full implementation, we suggest that you watch the video lecture on this mini-project.
<h3>Grading Rubric &nbsp;- 13 pts total (scaled to 100 pts) </h3><ul><li> 1 pt - The program successfully opens a frame.</li><li> 1 pt - The program has a working "Start" button that starts the timer.</li><li> 1 pt - The program has a working "Stop" button that stops the timer.</li><li> 1 pt - The program has a working "Reset" button that stops the timer (if running) and resets the timer to 0.</li><li> 2 pts - The "Stop" button correctly updates the success/attempts counters. &nbsp;Give only one point if hitting the "Stop" button changes the score when the timer is already stopped.</li><li> 1 pt - The "Reset" button clears the success/attempts counters.</li><li> 4 pts - The time is formatted according to the description in step 4 above. &nbsp;Award partial credit corresponding to 1 pt per correct digit. &nbsp;For example, a version that just draw tenths of seconds as a whole number should recieve 1 pt. A version that draws the time with correctly placed decimal point (but no leading zeros) only should receive 2 pts. &nbsp;A version that draws minutes, seconds and tenths of seconds but fails to always allocate two digits to seconds should receive 3 pts.</li><li> 2 pts - The program correctly draws the number of successful stops at a whole second versus total stops. &nbsp;You should give one point each for successful and total stops. &nbsp;If the score is correctly reported as a percentage instead, give only one point.</li></ul>

---
[[Interactivepython:MiniProjects|MiniProjects]]

[[Interactivepython:Main|Main]]
