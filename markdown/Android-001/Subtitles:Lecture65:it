[[Category:Android:Subtitles|it]]

###Graphics and Animation - Part 3 - Italian subtitles

* [[Android-001:Subtitles:Lecture63:it|<< prev]] | [[Android-001:Subtitles:Lecture65:en|en]] [[Android-001:Subtitles:Lecture65:es|es]] [[Android-001:Subtitles:Lecture65:it|it]] [[Android-001:Subtitles:Lecture65:zh-tw|zh-tw]] [[Android-001:Subtitles:Lecture65:pt|pt]] | [[Android-001:Subtitles:Lecture67:it|next >>]]

* [Direct download](https://www.dropbox.com/s/4b7xflp99wtc869/6%20-%203%20-%20Graphics%20and%20Animation%20-%20Part%203%20%2820-42%29.srt)

<pre>
1
00:00:00,000 --> 00:00:09,616
[BLANK_AUDIO]

2
00:00:09,616 --> 00:00:11,632
Hi, I'm Adam Porter.

3
00:00:11,632 --> 00:00:18,030
And this is Programming Mobile
Applications for Android handheld systems.

4
00:00:19,540 --> 00:00:21,200
Nell'esempio che abbiamo appena visto,

5
00:00:21,200 --> 00:00:26,110
ho mostrato un semplice tipo di animazione.

6
00:00:26,110 --> 00:00:29,730
Ho preso una singola View, e ho cambiato 
alcune delle sue proprieta

7
00:00:29,730 --> 00:00:34,770
In particolare, la sua posizione, il suo
orientamento, e ho fatto cio

8
00:00:34,770 --> 00:00:39,590
per un certo lasso di tempo.
animazioni come queste sono comuni.

9
00:00:39,590 --> 00:00:44,290
Le applicazioni spesso animano modifiche
alle proprieta di una view come

10
00:00:44,290 --> 00:00:49,440
la sua dimensione, posizione,
trasparenza, orientamento,

11
00:00:49,440 --> 00:00:54,040
ed altro. Per rendere le animazioni piu 
semplici, Android fornisce

12
00:00:54,040 --> 00:00:59,860
varie classi che supportano le animazioni
delle View, e tre di queste di cui

13
00:00:59,860 --> 00:01:06,310
parleremo sono la classe Transition 
Drawable per animare una transizione

14
00:01:07,420 --> 00:01:13,360
tra 2 View; la classe AnimationDrawable
per creare animazioni frame-by-frame, e

15
00:01:13,360 --> 00:01:19,160
la classe Animation per creare animazioni
interpolate, dove vengono specificati certi

16
00:01:19,160 --> 00:01:28,100
frame nell'animazione e Android interpola
o riempie nei punti in mezzo.

17
00:01:28,100 --> 00:01:30,620
Diamo uno sguardo a ciascuna di
esse una alla volta.

18
00:01:32,600 --> 00:01:37,370
La prima classe che tratteremo ?
la classe TransitionDrawable.

19
00:01:37,370 --> 00:01:43,300
Questa classe specifica un drawable a due
strati, che quando ? visualizzato, l'utente

20
00:01:43,300 --> 00:01:46,980
vede il primo strato, e poco dopo,
vede il secondo strato.

21
00:01:48,400 --> 00:01:50,604
La nostra applicazione di esempio
e' chiamata

22
00:01:50,604 --> 00:01:54,936
Graphics Transition Drawable. Questa app 
ci riporta alla

23
00:01:54,936 --> 00:01:59,660
applicazione Graphics Shape Draw che 
abbiamo visto prima.

24
00:01:59,660 --> 00:02:04,990
Ma questa volta, invece di visualizzare
entrambi gli shape nello stesso momento,

25
00:02:04,990 --> 00:02:09,740
questa app mostra prima lo shape
ciano sulla sinistra

26
00:02:10,850 --> 00:02:15,100
che poi sfuma per far apparire lo
shape magenta sulla destra.

27
00:02:16,150 --> 00:02:17,070
Vediamo come funziona.

28
00:02:19,350 --> 00:02:23,140
Qui c'e' il device e lanciamo l'app 
Graphics

29
00:02:23,140 --> 00:02:29,220
Transition Drawable. Potete vedere il primo
shape scomparire e il secondo comparire.

30
00:02:29,220 --> 00:02:30,800
Siamo qui.

31
00:02:32,100 --> 00:02:32,940
Ecco il primo shape,

32
00:02:35,210 --> 00:02:38,920
ed ecco qui il secondo.
Vediamo il codice.

33
00:02:40,970 --> 00:02:46,380
L'app Graphics Transition Drawable
viene aperta nell'IDE.

34
00:02:46,380 --> 00:02:47,940
Apriamo l'activity principale.

35
00:02:49,360 --> 00:02:53,709
Nel metodo onCreate(), questa app 
carica un transition drawable

36
00:02:55,630 --> 00:02:59,500
da un file chiamato shape_transition.xml.

37
00:02:59,500 --> 00:03:07,440
Apriamo questo file.
Questo definisce una risorsa "transition".

38
00:03:07,440 --> 00:03:10,560
Le risorse di questo tipo possono
avere fino a due

39
00:03:10,560 --> 00:03:15,250
tag "item", ognuno dei quali 
descrive un drawable.

40
00:03:16,520 --> 00:03:22,260
In questo caso, i drawable ci sono
familiari, sono gli shape ciano e magenta.

41
00:03:24,000 --> 00:03:27,090
torniamo all'activity principale,
il codice

42
00:03:27,090 --> 00:03:31,580
chiama il metodo setCrossFadeEnabled()
con il parametro true

43
00:03:32,970 --> 00:03:38,060
e questo fa si che sia il primo shape a 
scomparire per far spazio al secondo.

44
00:03:39,420 --> 00:03:45,490
Poi il codice setta la transizione, come un
drawable per l'ImageView, chiamando

45
00:03:45,490 --> 00:03:52,100
il metodo setImageDrawable(), e poi 
finalmente chiama startTransition(),

46
00:03:52,100 --> 00:03:57,120
passandogli un valore di 5000 che e'
la durata della transizione.

47
00:03:59,290 --> 00:04:04,346
Il prossimo tipo di animazione che 
tratteremo e' AnimationDrawable.

48
00:04:05,590 --> 00:04:10,000
Questo drawable anima una serie di
altre drawable,

49
00:04:10,000 --> 00:04:12,360
mostrando ciascuna di essere per un
certo tempo.

50
00:04:14,410 --> 00:04:18,950
La prossima appicazione di esempio e'
chiamata Graphics Frame Animation.

51
00:04:20,070 --> 00:04:23,050
Questa usa un
AnimationDrawable per

52
00:04:23,050 --> 00:04:26,020
mostrare una sorta di
splash screen, che

53
00:04:26,020 --> 00:04:29,560
presenta una serie di immagini
che fanno

54
00:04:29,560 --> 00:04:32,050
il countdown per arrivare
all'applicazione principale.

55
00:04:33,170 --> 00:04:33,944
Vediamo cosa fa.

56
00:04:33,944 --> 00:04:38,619
[BLANK_AUDIO]

57
00:04:38,619 --> 00:04:42,759
questo e' il device.
Quando lancio l'applicazione

58
00:04:42,759 --> 00:04:46,532
potete vedere una serie di immagini

59
00:04:46,532 --> 00:04:50,848
che fanno un countdown fino 
all'immagine finale. Ok, partiamo.

60
00:04:50,848 --> 00:04:57,530
9, 8, 7, 6, 5

61
00:04:57,530 --> 00:05:03,720
4, 3, 2, 1 e finalmente l'immagine che

62
00:05:03,720 --> 00:05:04,360
stavamo aspettando

63
00:05:06,280 --> 00:05:08,550
Vediamo il codice sorgente

64
00:05:09,750 --> 00:05:15,010
Qui c'e' l'app Graphics Frame Animation
aperta nell'IDE.

65
00:05:15,010 --> 00:05:20,830
Apriamo l'activity principale vediamo che 
OnCreate viene caricato un

66
00:05:20,830 --> 00:05:26,830
Animation Drawable da un file chiamato
view_animation.xml.

67
00:05:26,830 --> 00:05:27,330
E

68
00:05:29,390 --> 00:05:34,370
poi viene settato l'animation drawable come
il background su un ImageView.

69
00:05:35,650 --> 00:05:40,220
Il codice poi memorizza questo drawable
in una variabile chiamata mAnim.

70
00:05:41,480 --> 00:05:48,030
Prima di andare avanti, soffermiamoci
sul file view_animation.xml.

71
00:05:50,400 --> 00:05:54,690
Qui c'e' il file view_animation.xml e

72
00:05:54,690 --> 00:05:58,319
questo definisce una risorsa 
animation-list.

73
00:06:00,940 --> 00:06:06,270
Questa risorsa contiene una lista di tag
"item", dove ciascuno di loro

74
00:06:06,270 --> 00:06:12,100
rappresenta un drawable, e in questo caso,
il primo drawable e'

75
00:06:12,100 --> 00:06:17,990
un balck_background, e viene mostrato per
un secondo, poi viene seguito

76
00:06:17,990 --> 00:06:24,140
nove altre immagini, ognuna visualizzata
per un secondo.

77
00:06:26,590 --> 00:06:32,290
torniamo all'activity principale. Il codice aspetta
finche il metodo onWindowfocusChanged()

78
00:06:32,290 --> 00:06:36,310
e' chiamato, e questo metodo
e' invocato

79
00:06:36,310 --> 00:06:41,450
quando la finestra dell'applicazione
guadagna o perde il focus.

80
00:06:41,450 --> 00:06:45,230
In questo metodo il codice prima 
controlla se la finestra ha

81
00:06:45,230 --> 00:06:50,010
attualmente il focus, e se lo ha
avvia l'animazione.

82
00:06:54,520 --> 00:06:59,690
La prossima classe e' la
Animation , che e' usata per creare

83
00:06:59,690 --> 00:07:05,880
animazioni nella quale le trasformazioni
sono applicate al contenuto di una view

84
00:07:07,000 --> 00:07:11,030
Le applicazioni possono "giocare" con il
timing di queste trasformazioni

85
00:07:11,030 --> 00:07:14,630
per combinare e ordinare
differenti trasformazioni

86
00:07:14,630 --> 00:07:16,550
per realizzare animazioni
piu complesse.

87
00:07:17,840 --> 00:07:19,915
L'applicazione Tween Animation

88
00:07:19,915 --> 00:07:24,090
dimostra l'uso della classe
Animation

89
00:07:25,230 --> 00:07:29,620
Quando l'applicazione viene avviata,
mostra un BubbleView e

90
00:07:29,620 --> 00:07:34,280
poi procede per applicare una
serie di modifiche alla bolla.

91
00:07:34,280 --> 00:07:35,130
Vediamola in azione.

92
00:07:38,790 --> 00:07:42,980
Questo e' il device.
Quando lancio l'applicazione

93
00:07:42,980 --> 00:07:47,130
si puo vedere la bolla, e poi

94
00:07:47,130 --> 00:07:51,820
si possono vedere tutte le 
trasformazioni applicate alla bolla

95
00:07:51,820 --> 00:07:57,130
Si possono vedere il "fade in",
la rotazione, lo spostamento,

96
00:07:58,210 --> 00:08:04,360
la modifica della dimensione, e finalmente,
il "fade out", e si puo vedere anche

97
00:08:04,360 --> 00:08:09,640
che il timing di queste trasformazioni
non e' lineare

98
00:08:09,640 --> 00:08:14,960
Cioe', alcune trasformazioni avranno
una velocita uniforme,

99
00:08:14,960 --> 00:08:18,810
altre inizieranno piano e poi diverranno
piu veloci, altre

100
00:08:18,810 --> 00:08:22,530
inizieranno veloci e poi rallenteranno,
altre

101
00:08:22,530 --> 00:08:25,710
inizieranno veloci e rallenteranno in
diversi punti nell'animazione.

102
00:08:26,832 --> 00:08:29,400
Ora, rallentero il video giusto un po,
cosicche

103
00:08:29,400 --> 00:08:32,710
possiate vedere questi effetti 
piu chiaramente.

104
00:08:32,710 --> 00:08:36,170
prima la bolla "fade in" e

105
00:08:39,840 --> 00:08:43,779
poi la bolla ruota veloce,

106
00:08:45,760 --> 00:08:51,130
ora la bolla si muove, si ferma in una
posizione e poi si sposta leggermente

107
00:08:54,270 --> 00:08:58,860
dopodiche, si rimpicciolisce e poi si
ingrandisce,

108
00:09:01,360 --> 00:09:05,542
e infine la bolla "fade out" dalla
view

109
00:09:05,542 --> 00:09:08,290
piu lentamente rispetto a come ha
fatto il "fade in".

110
00:09:11,890 --> 00:09:13,880
diamo un occhiata al codice.

111
00:09:15,650 --> 00:09:20,920
Qui c'e' l'app Graphics Tween Animation
aperta nell'IDE.

112
00:09:20,920 --> 00:09:23,940
Apriamo l'activity principale.

113
00:09:23,940 --> 00:09:26,500
L'app invoca il metodo

114
00:09:26,500 --> 00:09:30,140
setContentView, passandogli il 
file main.xml.

115
00:09:31,610 --> 00:09:34,320
E poi fa un findViewById 
in quel layout.

116
00:09:35,780 --> 00:09:37,070
Dopo di che

117
00:09:37,070 --> 00:09:42,520
legge un'animazione dal file
view_animation.xml

118
00:09:42,520 --> 00:09:46,730
che e' memorizzata nella cartella
res/Anim

119
00:09:49,000 --> 00:09:55,540
Qui c'e' la risorsa e innestati nel tag
"set" ci sono tanti altri tag,

120
00:09:55,540 --> 00:10:01,900
ognuno dei quali indica una
trasformazione da applicare alla view.

121
00:10:01,900 --> 00:10:05,620
La prima e' una trasformazione
alpha

122
00:10:05,620 --> 00:10:09,590
la cui durata e' 3 secondi.

123
00:10:09,590 --> 00:10:14,020
Essa va da un fromAlpha=0 (trasparente)
a un toAlpha=1 (opaco)

124
00:10:14,020 --> 00:10:20,490
La trasformazione usa anche un

125
00:10:20,490 --> 00:10:26,350
interpolatore lineare, quindi l'effetto
viene applicato in modo uniforme.

126
00:10:26,350 --> 00:10:29,750
Il prossimo tag e' rotate

127
00:10:29,750 --> 00:10:33,100
La durata e' settata a 4 secondi, ma

128
00:10:33,100 --> 00:10:37,800
e' anche settato un offset di 3 secondi.

129
00:10:37,800 --> 00:10:39,880
la prims trasformazione

130
00:10:39,880 --> 00:10:43,880
viene applicata e finisce, e poi
parte questa animazione.

131
00:10:45,290 --> 00:10:51,630
questa animazione va da
0 a 720 gradi, o due giri completi,

132
00:10:51,630 --> 00:10:56,090
e usa l'interpolatore accelerato, quindi

133
00:10:56,090 --> 00:10:59,680
la velocita aumenta al procedere della
animazione. Potete vedere i restanti

134
00:10:59,680 --> 00:11:02,260
tag da soli quando faremo un break.

135
00:11:04,750 --> 00:11:10,350
torniamo indietro alla activity
principale e andiamo al metodo

136
00:11:11,400 --> 00:11:14,637
windowfocuschange(). Ancora, il codice
controlla se la finestra ha

137
00:11:14,637 --> 00:11:19,211
il focus, e se lo ha, fa partire
l'animazione.

138
00:11:19,211 --> 00:11:23,640
[BLANK_AUDIO]

139
00:11:23,640 --> 00:11:28,167
L'ultimo concetto che tratteremo e'
il Property Animation.

140
00:11:28,167 --> 00:11:32,675
L'esempio precedente ha mostrato classi 
designate per

141
00:11:32,675 --> 00:11:37,190
animare un insieme di semplici
modifiche da applicare a una View.

142
00:11:37,190 --> 00:11:41,910
Ma certe volte, si vuole animare piu 
di semplici modifiche e

143
00:11:41,910 --> 00:11:44,900
per supportare cio, Android
ha sviluppato un sistema

144
00:11:44,900 --> 00:11:49,790
per modificare le proprieta
generali di un oggetto generico

145
00:11:49,790 --> 00:11:52,400
per un dato periodo di tempo, e

146
00:11:52,400 --> 00:11:56,680
questo sistema di Property Animation ha
tante componenti.

147
00:11:56,680 --> 00:12:00,110
Primo, c'e' un value Animator, e questo

148
00:12:00,110 --> 00:12:03,890
e' la classe principale che controlla
l'animazione.

149
00:12:03,890 --> 00:12:09,280
Esso contiene un TimeInterpolator
che determina

150
00:12:09,280 --> 00:12:15,040
come variano i valori in funzione del tempo.
Per esempio, le modifiche avvengono in modo

151
00:12:15,040 --> 00:12:21,232
uniforme nel tempo? accelerano? rallentano?
entrambe le cose?

152
00:12:21,232 --> 00:12:26,630
Value Animator definisce anche una
interfaccia listener

153
00:12:26,630 --> 00:12:31,590
chiamata Animator Update Listener, che
definisce

154
00:12:31,590 --> 00:12:36,090
il metodo onanimationUpdate che viene
chiamato

155
00:12:36,090 --> 00:12:39,530
ogni volta che un nuovo
animation frame e' creato.

156
00:12:41,440 --> 00:12:47,220
E infine, mentre Android sa come animare
i valori dei tipi comuni, come

157
00:12:47,220 --> 00:12:54,120
immagini o float, non sa come animare
i tipi custom che creiamo noi.

158
00:12:54,120 --> 00:12:57,330
Quindi se abbiamo bisogno di animare
un nostro tipo, o animare

159
00:12:57,330 --> 00:13:04,590
tipi esistenti in nuovi modi, possiamo
impementare il l'interfaccia Type Evaluator.

160
00:13:04,590 --> 00:13:06,450
Questa interfaccia definisce

161
00:13:06,450 --> 00:13:10,320
un metodo Evaluate che viene chiamato
per settare

162
00:13:10,320 --> 00:13:14,250
i valori dell'animazione in un
particolare punto dell'animazione.

163
00:13:15,680 --> 00:13:20,940
L'ultima parte del Property Animation
e' la classe Animator Set.

164
00:13:20,940 --> 00:13:25,750
Questa permette di combinare oggetti
animator, come il Value Animator che

165
00:13:25,750 --> 00:13:31,900
abbiamo appena trattato, in animazioni piu
complesse. Vediamo qualche esempio.

166
00:13:31,900 --> 00:13:35,480
che usa il Property Animation.

167
00:13:36,620 --> 00:13:38,888
La prima di queste applicazioni
di esempio e' chiamata

168
00:13:38,888 --> 00:13:43,170
Graphics Value Animator, che usa

169
00:13:43,170 --> 00:13:50,600
un Value Animator per animare una modifica
nel colore di sfondo di una ImageView.

170
00:13:50,600 --> 00:13:51,700
Guardiamo l'applicazione.

171
00:13:51,700 --> 00:13:54,980
Questo e' il device

172
00:13:54,980 --> 00:13:59,020
Lanciamo l'applicazione

173
00:13:59,020 --> 00:14:03,890
Come potete vedere e' presente un 
solo bottone etichettato con "Animate".

174
00:14:05,250 --> 00:14:09,620
Quando lo premo, un rettangolo
rosso appare al centro del

175
00:14:09,620 --> 00:14:14,520
display, e per un tempo di circa
10 secondi,

176
00:14:14,520 --> 00:14:19,420
il rettangolo cambia colore fino
a diventare blu.

177
00:14:20,840 --> 00:14:21,830
Premo il pulsante.

178
00:14:24,800 --> 00:14:25,880
C'e' un rettangolo rosso.

179
00:14:25,880 --> 00:14:30,370
Vediamo come diventamente 
lentamente blu.

180
00:14:33,470 --> 00:14:35,700
Apriamo il codice sorgente e 
vediamo come funziona.

181
00:14:38,770 --> 00:14:44,580
Qui c'e' l'applicazione aperta nell'IDE.

182
00:14:44,580 --> 00:14:46,380
apriamo l'activity principale.

183
00:14:48,140 --> 00:14:53,120
Questa applicazione parte settango
due valori interi che

184
00:14:53,120 --> 00:14:57,460
rappresentano il punto iniziale
e finale dell'animazione.

185
00:14:58,500 --> 00:15:03,160
Il primo valore e' la rappresentazione
intera del colore rosso.

186
00:15:05,100 --> 00:15:09,320
Il secondo valore e' la rappresentazione
intera del colore blu.

187
00:15:11,330 --> 00:15:17,880
Nel metodo onCreate(), il codice crea
un button che lancera' l'animazione, e

188
00:15:17,880 --> 00:15:23,290
come potete vedere qua, quando il button e' 
cliccato, il metodo startAnimation viene lanciato.

189
00:15:24,300 --> 00:15:25,200
guardiamo questo metodo.

190
00:15:27,630 --> 00:15:34,610
Qui, il metodo startAnimation() crea un 
oggetto ValueAnimated chiamata anim,

191
00:15:34,610 --> 00:15:40,200
che viene creato chiamando il metodo 
ofObject()

192
00:15:41,270 --> 00:15:47,150
Il primo parametro di questo metodo e'
un tipo evaluator, in questo caso il

193
00:15:47,150 --> 00:15:53,590
tipo Evaluator e' un oggetto ArgbEvaluator,

194
00:15:53,590 --> 00:15:57,680
questa classe sa come interpolare

195
00:15:57,680 --> 00:16:02,370
le rappresentazioni intere di colori.
Il secondo e terzo

196
00:16:02,370 --> 00:16:06,960
parametro sono il punto

197
00:16:06,960 --> 00:16:11,630
iniziale e il punto finale dell'animazione,
i colori rosso e blu.

198
00:16:12,890 --> 00:16:18,610
Poi il codice aggiunge un Animator
Update Listenere che viene

199
00:16:18,610 --> 00:16:22,940
richiamato ogni volta che viene creata
una nuova Animation Frame.

200
00:16:24,700 --> 00:16:29,180
e il codice chiama il metodo 
getAnimatedValue

201
00:16:29,180 --> 00:16:34,210
per recuperare il valore del colore 
corrente, e poi

202
00:16:34,210 --> 00:16:38,930
rende questo il colore di sfondo 
dell'ImageView, che e' mostrata

203
00:16:38,930 --> 00:16:43,630
nel layout.
E infine, il codice setta la durata

204
00:16:43,630 --> 00:16:47,960
di 10 secondi per l'animazione, e 
poi avvia l'animazione.

205
00:16:52,120 --> 00:16:54,352
Diamo uno sguardo alla seconda 
app di esempio, chiamata

206
00:16:54,352 --> 00:16:58,530
Graphics
View Property Animator.

207
00:16:59,640 --> 00:17:03,182
Questa app implementera la stessa
applicazione

208
00:17:03,182 --> 00:17:08,040
che abbiamo creato per l'app
Graphics Tween Animation.

209
00:17:08,040 --> 00:17:11,280
Vedremo una bolla che "fade in" (compare)

210
00:17:11,280 --> 00:17:15,640
ruota, si muove, si ridimensiona,
e poi "fade out" (scompare).

211
00:17:17,325 --> 00:17:22,360
Questa versione dell'app,
comunque, usera' la classe

212
00:17:22,360 --> 00:17:29,110
View Property Animation che e' un tipo 
semplificato di Animator per le sole view properties

213
00:17:29,110 --> 00:17:30,980
Vediamo l'app in azione

214
00:17:30,980 --> 00:17:31,520
So

215
00:17:34,420 --> 00:17:35,620
questo e' il device

216
00:17:36,810 --> 00:17:40,960
lanciamo l'applicazione

217
00:17:41,960 --> 00:17:46,210
Vediamo come la bolla subisce le varie
trasformazioni

218
00:17:47,750 --> 00:17:48,553
Siamo qui.

219
00:17:48,553 --> 00:17:58,553
[BLANK_AUDIO]

220
00:18:00,788 --> 00:18:06,370
Apriamo il codice sorgente.

221
00:18:06,370 --> 00:18:11,350
Qui c'e' l'applicazione
aperta

222
00:18:11,350 --> 00:18:16,733
nell'IDE.
Apriamo l'activity principale.

223
00:18:16,733 --> 00:18:20,900
Scorriamo fino al metodo
onwindowFocusChanged().

224
00:18:22,230 --> 00:18:26,390
Quando questo metodo e' invocato,
l'applicazione si assicura che l'activity

225
00:18:26,390 --> 00:18:30,790
abbia il focus e se lo ha,
invoca il metodo run()

226
00:18:30,790 --> 00:18:36,060
sull'oggeto fadeIn, che e' un Runnable.

227
00:18:36,060 --> 00:18:41,240
Ora, all'interno del metodo run(),

228
00:18:41,240 --> 00:18:46,510
il codice animate() su mImageView, che
ritorna un oggetto View Property

229
00:18:46,510 --> 00:18:51,540
Animator. Questo oggetto,
o questa classe, usa un

230
00:18:51,540 --> 00:18:57,910
fluent interface, come quella che abbiamo 
visto con le Notification Area Notifications

231
00:18:57,910 --> 00:19:04,190
E quindi si puo costruire un'animazione
usando vari metodi.

232
00:19:04,190 --> 00:19:10,180
In questo caso, la prossima chiamata
setta la durata a tre secondi, poi

233
00:19:10,180 --> 00:19:16,640
setta l'interpolatore come lineare,
poi chiama

234
00:19:16,640 --> 00:19:22,150
il metodo alpha() per modificare la
trasparenza e renderla opaca

235
00:19:22,150 --> 00:19:27,690
e infine chiama withEndAction che dice al 
View Property Animator che quando questa

236
00:19:27,690 --> 00:19:32,980
animazione finisce, dovrebbe invocare il metodo 
run() di un altro Runnable chiamato rotate.

237
00:19:34,910 --> 00:19:38,020
e come probabilmente avete pensato, 
questo rotate

238
00:19:38,020 --> 00:19:42,040
crea l'effetto rotazione dell'animazione

239
00:19:42,040 --> 00:19:45,900
e poi termina chiamando il Runnable
"translate" che si occupa dell'effetto

240
00:19:45,900 --> 00:19:51,450
spostamento, e cio continua
fino a terminare tutti gli effetti.

241
00:19:51,450 --> 00:19:51,950
Quindi

242
00:19:54,340 --> 00:19:57,410
questo e' tutto per questa lezione.

243
00:19:57,410 --> 00:20:02,829
La prossima volta parleremo di touch
e gesture

244
00:20:02,829 --> 00:20:04,074
ci vediamo.

245
00:20:04,074 --> 00:20:14,074
[BLANK_AUDIO]
</pre>
