[[Category:Android:Subtitles|it]]

###Data Management - Part 1 - Italian subtitles

* [[Android-001:Subtitles:Lecture77:it|<< prev]] | [[Android-001:Subtitles:Lecture91:en|en]] [[Android-001:Subtitles:Lecture91:es|es]] [[Android-001:Subtitles:Lecture91:it|it]] [[Android-001:Subtitles:Lecture91:zh-tw|zh-tw]] [[Android-001:Subtitles:Lecture91:pt|pt]] | [[Android-001:Subtitles:Lecture93:it|next >>]]

* [Direct download](https://www.dropbox.com/s/g8oermhxxjlqe70/8%20-%201%20-%20Data%20Management%20-%20Part%201%20%2815-57%29.srt)

<pre>
1
00:00:00,000 --> 00:00:09,536
[BLANK_AUDIO]

2
00:00:09,536 --> 00:00:12,581
Ciao, sono Adam Porter, e questo è

3
00:00:12,581 --> 00:00:18,505
Programming Mobile Applications for
Android Handheld Systems.

4
00:00:18,505 --> 00:00:23,580
I sistemi portatili sono in grado di generare
e manipolare grandi quantità di dati.

5
00:00:23,580 --> 00:00:27,040
Quindi Android fornisce una serie 
di classi di supporto

6
00:00:27,040 --> 00:00:31,420
che consentono di gestire i dati
su più sessioni di applicazioni.

7
00:00:32,860 --> 00:00:37,630
Nella lezione di oggi, voglio parlare di
alcune di queste classi di supporto.

8
00:00:37,630 --> 00:00:41,730
Inizierò parlando della classe 
SharedPreferences, che consente

9
00:00:41,730 --> 00:00:46,120
alle applicazioni di archiviare e gestire 
piccole quantità di dati primitivi.

10
00:00:47,160 --> 00:00:52,790
Poi, parleremo di scrittura di file 
su supporti sia interni che esterni.

11
00:00:52,790 --> 00:00:55,100
E, infine, voglio finire discutendo

12
00:00:55,100 --> 00:01:01,320
la creazione e l'utilizzo di complessi
database SQLite.

13
00:01:01,320 --> 00:01:04,770
Parliamo brevemente di ciascuna di queste
opzioni di archiviazione, una alla volta.

14
00:01:07,230 --> 00:01:11,890
Le applicazioni in genere usano la classe 
Shared Preferences, quando si vuole

15
00:01:11,890 --> 00:01:16,140
memorizzare piccole quantità di dati primitivi,
ad esempio un nome utente.

16
00:01:18,160 --> 00:01:21,760
Le applicazioni in genere utilizzano
la memoria interna del dispositivo, 

17
00:01:21,760 --> 00:01:25,110
quando è necessario gestire 
quantità piccole e medie di

18
00:01:25,110 --> 00:01:28,620
dati che dovrebbero rimanere privati 
per l'applicazione, 

19
00:01:28,620 --> 00:01:31,585
come i file temporanei che vengono 
utilizzati dall'applicazione.

20
00:01:31,585 --> 00:01:36,790
Le applicazioni normalmente utilizzano
archivi esterni quando si desidera

21
00:01:36,790 --> 00:01:41,980
memorizzare grandi quantità di dati non privati,
quali canzoni o file video.

22
00:01:43,590 --> 00:01:47,450
E le applicazioni tipicamente usano
i database, quando si intende

23
00:01:47,450 --> 00:01:52,345
memorizzare piccole o grandi quantità 
di dati strutturati.

24
00:01:52,345 --> 00:01:59,830
SharedPreferences sono essenzialmente
mappe persistenti, e come ogni mappa,

25
00:01:59,830 --> 00:02:06,012
hanno coppie chiave-valore di tipi di   
dati semplici, come strings e floats.

26
00:02:06,012 --> 00:02:12,960
E le SharedPreferences vengono automaticamente 
mantenute tra le diverse sessioni di applicazioni.

27
00:02:12,960 --> 00:02:14,800
Questo consente a un utente di creare

28
00:02:14,800 --> 00:02:19,610
informazioni durante l'uso di 
un'applicazione,
29
00:02:19,610 --> 00:02:23,300
uscire dall'applicazione, 
riavviarla più tardi, e ancora

30
00:02:23,300 --> 00:02:27,220
avere accesso alle informazioni 
create in precedenza.

31
00:02:28,910 --> 00:02:31,095
SharedPreferences sono spesso utilizzate per

32
00:02:31,095 --> 00:02:35,430
archiviazione a lungo termine dei dati 
delle applicazioni personalizzabili.

33
00:02:35,430 --> 00:02:39,060
Comprese cose come un nome utente, 
ret WiFi preferita,

34
00:02:39,060 --> 00:02:42,870
o opzioni specifiche dell'utente
o preferenze.

35
00:02:44,420 --> 00:02:49,890
Per ottenere un oggetto SharedPreferences, che sia
associato ad una determinata attività, è possibile

36
00:02:49,890 --> 00:02:57,070
utilizzare il metodo Activity.getPreferences,
passando come parametro una modalità di accesso.

37
00:02:57,070 --> 00:03:02,450
Ad esempio, questa modalità può essere
MODE_PRIVATE, che indica che

38
00:03:02,450 --> 00:03:05,720
 i dati sono privati 
dell'applicazione chiamante.

39
00:03:07,570 --> 00:03:09,770
Se si desidera un oggetto SharedPreferences, 

40
00:03:09,770 --> 00:03:13,350
che non sia associato a una specifica attività,

41
00:03:13,350 --> 00:03:17,870
allora è possibile utilizzare il metodo
context.getSharedPreferences,

42
00:03:17,870 --> 00:03:22,190
per recuperare un dato oggetto
SharedPreferences

43
00:03:22,190 --> 00:03:27,500
A questo metodo, si passa un nome
per l'oggetto SharedPreferences e

44
00:03:27,500 --> 00:03:32,910
una modalità di accesso, come ad esempio il
MODE_PRIVATE che abbiamo visto in precedenza.

45
00:03:34,930 --> 00:03:39,480
Dopo aver acquisito un oggetto SharedPreferences
è possibile modificare l'oggetto,

46
00:03:39,480 --> 00:03:45,750
chiamando SharedPreferences.edit(), 
e questo metodo

47
00:03:45,750 --> 00:03:51,220
restituisce una istanza di
SharedPreferences.Editor.

48
00:03:51,220 --> 00:03:56,250
È quindi possibile aggiungere o modificare i valori 
dell'oggetto SharedPreferences, utilizzando

49
00:03:56,250 --> 00:04:02,330
metodi come putInt(), putString(), e
remove().

50
00:04:02,330 --> 00:04:06,940
E dopo aver effettuato tutte le modifiche
volute, è possibile rendere quelle modifiche

51
00:04:06,940 --> 00:04:13,526
permanenti chiamando il metodo
SharedPreferences.Editor.commit().

52
00:04:13,526 --> 00:04:19,330
E a questo punto, l'oggetto SharedPreferences
viene salvato, e le applicazioni 

53
00:04:19,330 --> 00:04:21,520
possono uscire, sapendo che i loro dati 

54
00:04:21,520 --> 00:04:24,590
possanoessere recuperati durante 
altre sessioni dell'applicazione.

55
00:04:26,690 --> 00:04:29,830
Se un'applicazione successivamente
vuole leggere questi valori,

56
00:04:29,830 --> 00:04:33,940
si può recuperare nuovamente l'oggetto
SharedPreferences,

57
00:04:33,940 --> 00:04:36,180
e quindi utilizzare vari metodi per leggere

58
00:04:36,180 --> 00:04:39,480
i valori che vengono memorizzati 
all'interno dell'oggetto.

59
00:04:39,480 --> 00:04:45,050
Per esempio, si può chiamare getAll() per ottenere
i valori di SharedPreferences.

60
00:04:45,050 --> 00:04:49,690
Si può chiamare getBoolean() per ottenere 
un particolare valore booleano.

61
00:04:49,690 --> 00:04:53,190
Oppure, può chiamare getString per ottenere 
un particolare valore String.

62
00:04:55,300 --> 00:04:57,456
Il nostro primo esempio applicativo in

63
00:04:57,456 --> 00:05:01,549
in questa lezione, si chiama
DataManagementSharedPreferences.

64
00:05:01,549 --> 00:05:05,503
Questa applicazione dispone di 
un pulsante Play.

65
00:05:05,503 --> 00:05:10,390
E quando l'utente preme il pulsante Play,
l'applicazione visualizza un numero casuale.

66
00:05:11,470 --> 00:05:14,420
L'applicazione tiene traccia del numero 
più alto visto finora, 

67
00:05:14,420 --> 00:05:20,360
e salva il numero di tutte le
diverse sessioni utente.

68
00:05:20,360 --> 00:05:21,810
Eseguiamo questa applicazione.

69
00:05:26,310 --> 00:05:28,260
Ecco qui il mio dispositivo.

70
00:05:28,260 --> 00:05:32,970
Ora, vorrei avviare l'applicazione 
DataManagementSharedPreferences.

71
00:05:34,700 --> 00:05:40,260
Quando questa applicazione si avvia, mostra
che il punteggio più alto è ora pari a zero.

72
00:05:42,140 --> 00:05:44,810
Quando premo il tasto Play, vedrete che un

73
00:05:44,810 --> 00:05:49,310
nuovo numero viene visualizzato 
al centro dello schermo.

74
00:05:51,080 --> 00:05:53,990
E dal momento che il numero era superiore al
precedente punteggio più alto,

75
00:05:55,520 --> 00:05:59,380
il display del punteggio più alto è stato aggiornato
per visualizzare il nuovo numero.

76
00:06:00,670 --> 00:06:02,250
Ora, ricordate questo punteggio più alto.

77
00:06:03,550 --> 00:06:08,800
Sto per ora uscire da questa applicazione,
e ora la riavvio.

78
00:06:11,430 --> 00:06:15,230
E come potete vedere, l'attuale
punteggio più alto è lo stesso

79
00:06:15,230 --> 00:06:18,920
high score che abbiamo visto l'ultima volta
abbiamo eseguito l'applicazione.

80
00:06:20,420 --> 00:06:23,400
Ora spingiamo il pulsante Play 
un paio di volte.

81
00:06:23,400 --> 00:06:25,770
Quindi il punteggio più alto aumenta.

82
00:06:25,770 --> 00:06:26,290
andiamo.

83
00:06:28,120 --> 00:06:31,810
E ora fermo nuovamente l'applicazione,
e la riavvio.

84
00:06:33,590 --> 00:06:37,300
E ancora, si può vedere che l'applicazione
visualizza il punteggio 

85
00:06:37,300 --> 00:06:40,850
che è stato impostato nel precedente 
utilizzo dell'applicazione.

86
00:06:40,850 --> 00:06:41,350
Ora

87
00:06:42,970 --> 00:06:47,690
posso anche premere il pulsante di reset, 
per ripristinare il punteggio elevato a 0.

88
00:06:47,690 --> 00:06:50,740
Diamo un'occhiata al codice sorgente 
di questa applicazione.

89
00:06:52,580 --> 00:06:55,750
Quindi, ecco l'applicazione, 
aperta nell'IDE.

90
00:06:55,750 --> 00:06:57,560
Ora, aprirò la main activity.

91
00:06:59,020 --> 00:07:00,760
In onCreate(), il codice acquisisce

92
00:07:00,760 --> 00:07:03,660
l'oggetto SharedPreferences  
per questa attività.

93
00:07:04,700 --> 00:07:08,830
Successivamente, quando l'utente fa clic 
sul pulsante Play, il codice genera

94
00:07:08,830 --> 00:07:12,080
un nuovo valore, che memorizza 
in una variabile chiamata Val.

95
00:07:13,780 --> 00:07:16,310
Dopo di che, il codice chiama getInt()

96
00:07:16,310 --> 00:07:19,970
sull'oggetto Preferences, per recuperare
 punteggio più alto attuale.

97
00:07:22,780 --> 00:07:24,530
Se Val è maggiore del valore attuale

98
00:07:24,530 --> 00:07:29,750
poi dobbiamo di aggiornare 
l'high score.

99
00:07:29,750 --> 00:07:32,440
Quindi il codice chiama il metodo Edit

100
00:07:32,440 --> 00:07:38,409
dell'oggetto Preferences, che restituisce 
un oggetto SharedPreferences.Editor.

101
00:07:39,930 --> 00:07:43,710
Poi, il codice chiama putInt 
sull'oggetto editor

102
00:07:43,710 --> 00:07:47,370
per aggiornare il punteggio più alto
al valore corrente.

103
00:07:48,440 --> 00:07:54,060
E, infine, il codice richiama commit() sull'editor
per salvare il punteggio più alto corrente.

104
00:08:00,340 --> 00:08:03,610
Come ho già detto, la classe
Shared Preferences

105
00:08:03,610 --> 00:08:07,980
È spesso usata per memorizzare le preferenze 
dell'utente di un'applicazione.

106
00:08:09,150 --> 00:08:14,490
Per renderlo più facile, Android fornisce una classe
chiamata PreferenceFragment,

107
00:08:14,490 --> 00:08:19,510
che le applicazioni possono utilizzare per 
visualizzare e modificare le preferenze dell'utente.

108
00:08:21,010 --> 00:08:25,740
L'applicazione di esempio seguente si chiama
DataManagement PreferenceFragment.

109
00:08:26,740 --> 00:08:29,330
Questa applicazione utilizza un 
PreferenceFragment

110
00:08:29,330 --> 00:08:34,600
per visualizzare e modificare le preferenze 
utente di un'applicazione.

111
00:08:34,600 --> 00:08:37,870
In questo caso, la preferenza è il nome

112
00:08:37,870 --> 00:08:42,010
che l'applicazione utilizzerà quando
si rivolge all'utente.

113
00:08:42,010 --> 00:08:43,350
Diamo uno sguardo a questa applicazione.

114
00:08:45,790 --> 00:08:47,010
Quindi, ecco il mio dispositivo.

115
00:08:48,080 --> 00:08:52,960
Ora, vorrei iniziare l'applicazione 
DataManagement PreferenceFragment.

116
00:08:54,170 --> 00:08:56,170
L'applicazione si avvia.

117
00:08:56,170 --> 00:08:59,730
Presenta un solo pulsante, etichettato 
ViewUserName.

118
00:09:01,040 --> 00:09:06,830
Quando clicco su questo pulsante, 
apparirà il Preference Fragment,

119
00:09:06,830 --> 00:09:12,820
Che mi permette di vedere il mio nome utente,
e cambiarlo se voglio.

120
00:09:12,820 --> 00:09:13,510
Facciamolo ora.

121
00:09:15,730 --> 00:09:20,120
Ora, come potete vedere, il mio nome utente
non è ancora stato impostato.

122
00:09:21,390 --> 00:09:26,700
Così clicco in quest'area, 
e ora si apre una finestra di dialogo

123
00:09:26,700 --> 00:09:28,840
mi chiede di inserire 
il mio nome utente.

124
00:09:29,950 --> 00:09:30,670
Facciamolo.

125
00:09:33,540 --> 00:09:38,350
Ora, facio clic sul pulsante Invia per
accettare questo nuovo nome utente.

126
00:09:38,350 --> 00:09:42,170
La finestra di dialogo si chiude, 
e qui si può vedere che

127
00:09:42,170 --> 00:09:45,700
il mio nome utente è ora 
il nome che ho appena inserito.

128
00:09:48,100 --> 00:09:50,600
Ora voglio chiudere l'applicazione, 
e riavviarla.

129
00:09:53,960 --> 00:09:56,610
Io clicco nuovamente sul tasto 
View User Name, e

130
00:09:58,010 --> 00:10:02,290
come potete vedere, il mio nome utente è ancora
Adam.

131
00:10:02,290 --> 00:10:07,100
Quindi, l'informazione effettivamente persiste
attraverso le sessioni utente.

132
00:10:10,130 --> 00:10:12,740
Diamo uno sguardo al codice sorgente per
questa applicazione.

133
00:10:14,080 --> 00:10:16,400
Quindi, ecco l'applicazione aperta nell'IDE.

134
00:10:17,680 --> 00:10:22,540
Ora, aprirò la 
ViewAndUpdatePreferencesActivity.

135
00:10:22,540 --> 00:10:24,870
Questa activity è quella che viene avviata

136
00:10:24,870 --> 00:10:27,860
quando l'utente fa clic sul 
pulsante View User Name.

137
00:10:30,000 --> 00:10:34,900
Il metodo onCreate prima chiama
setContentView, passando un file XML

138
00:10:34,900 --> 00:10:43,750
chiamato user_prefs_fragment.xml.

139
00:10:43,750 --> 00:10:48,190
E questo file di layout istanzia e
visualizza un'istanza

140
00:10:48,190 --> 00:10:53,510
della classe UserPreferenceFragment, 
che è definita in questo file.

141
00:10:54,930 --> 00:10:55,890
Diamo un'occhiata a questa classe ora.

142
00:10:57,870 --> 00:11:05,462
Il metodo onCreate di questa classe chiama 
il metodo AddPreferencesFromResource,

143
00:11:05,462 --> 00:11:12,540
passandogli il file user_preps.xml, 
che è nella directory res/xml.

144
00:11:13,860 --> 00:11:18,101
Apriamo il file.

145
00:11:18,101 --> 00:11:24,226
Come potete vedere, questo file definisce 
una risorsa PreferenceScreen .

146
00:11:24,226 --> 00:11:28,006
Questa PreferenceScreen, contiene una
preferenza,

147
00:11:28,006 --> 00:11:30,820
che viene visualizzato in una casella di testo.

148
00:11:32,650 --> 00:11:35,430
E che la preferenza ha una chiave, 
la stringa "uname"

149
00:11:35,430 --> 00:11:40,550
e viene visualizzata con il titolo
User Name.

150
00:11:42,090 --> 00:11:45,990
Quando l'utente fa clic sulla casella di testo
per cambiare il nome utente, 

151
00:11:45,990 --> 00:11:51,980
una finestra di dialogo si apre, 
con il titolo  Change User Name.

152
00:11:53,120 --> 00:11:58,320
Un sottotitolo, o un messaggio, dice: 
Inserisci il tuo nome utente,

153
00:11:59,390 --> 00:12:03,680
e due pulsanti etichettati 
Cancel e Submit.

154
00:12:07,020 --> 00:12:10,990
In aggiunta alle preferenze, Android
supporta l'utilizzo dei file.

155
00:12:12,690 --> 00:12:18,392
File è una classe che rappresenta una entità di sistema
identificato da un nome di percorso.

156
00:12:19,770 --> 00:12:25,820
In Android, le aree di archivizione sono 
classificate sia come interne che esterne.

157
00:12:26,990 --> 00:12:33,330
Storicamente, questo si distingue tra
la memoria Flash interna di un dispositivo,

158
00:12:33,330 --> 00:12:38,780
e le schede di memoria esterne rimovibili
attaccate al dispositivo.

159
00:12:38,780 --> 00:12:42,250
Oggi, tuttavia, non tutte le 
memoria esterne sono rimovibili.

160
00:12:43,670 --> 00:12:46,410
La memoria interna, viene di solito 
utilizzata per piccoli

161
00:12:46,410 --> 00:12:49,420
set di dati che sono privati 
di un'applicazione.

162
00:12:50,650 --> 00:12:57,120
La memoria esterna, al contrario, è solitamente
riservata per grandi insiemi di dati non privati.

163
00:12:57,120 --> 00:12:59,760
Cose come i file musicali e immagini.

164
00:13:00,840 --> 00:13:03,110
Le applicazioni di esempio che ora guardiamo
appena un secondo,

165
00:13:03,110 --> 00:13:07,300
accedono e utilizzano i file per 
memorizzare informazioni.

166
00:13:08,340 --> 00:13:11,420
Due dei metodi che usano per questo,
 sono

167
00:13:11,420 --> 00:13:16,492
il metodo OpenFileOutput che apre 
un file privato per la scrittura.

168
00:13:16,492 --> 00:13:22,321
Questo metodo crea un file
fisico, se non esiste già.

169
00:13:22,321 --> 00:13:28,506
C'è anche OpenFileInput, metodo
che apre un file privato per la lettura.

170
00:13:28,506 --> 00:13:31,000
E ci sono, naturalmente, molti altri 
metodi correlati ai file

171
00:13:31,000 --> 00:13:34,510
quindi vi prego di guardare la documentazione
per maggiori informazioni.

172
00:13:36,550 --> 00:13:43,290
L'esempio applicativo successivo è chiamato
Data Management File Internal Memory.

173
00:13:43,290 --> 00:13:48,850
Quando questa applicazione si avvia, controlla
se esiste un particolare file di testo.

174
00:13:49,860 --> 00:13:52,300
E se non esiste, l'applicazione

175
00:13:52,300 --> 00:13:55,830
crea quel file, e ci scrive un testo.

176
00:13:56,930 --> 00:14:00,930
Dopo di che, l'applicazione apre il file
legge il testo

177
00:14:00,930 --> 00:14:06,030
e visualizza il testo sul display.

178
00:14:06,030 --> 00:14:07,420
Diamo uno sguardo a questa applicazione.

179
00:14:07,420 --> 00:14:07,920
Quindi

180
00:14:10,230 --> 00:14:12,200
ecco il mio dispositivo.

181
00:14:12,200 --> 00:14:17,420
Ora, apriamo
Data Management File Internal Memory

182
00:14:19,030 --> 00:14:23,310
Come potete vedere, l'applicazione ha
visualizzato del testo sullo schermo.

183
00:14:24,770 --> 00:14:26,260
Diamo un'occhiata al codice sorgente di questa

184
00:14:26,260 --> 00:14:28,820
applicazione , per scoprire da dove 
il testo proviene.

185
00:14:31,960 --> 00:14:35,410
Quindi, ecco l'applicazione, 
aperta nell'IDE.

186
00:14:35,410 --> 00:14:38,980
Ora, aprirò la main activity
 per questa applicazione.

187
00:14:40,610 --> 00:14:45,490
E qui nel metodo onCreate, il codice
prima ottiene la path del file

188
00:14:46,740 --> 00:14:52,120
associato al nome del file,
TestFile.txt.

189
00:14:52,120 --> 00:14:59,100
E se questo file non esiste, allora il codice
va a chiamare il metodo WriteFile.

190
00:14:59,100 --> 00:15:02,385
Scorriamo la pagina fino a quel metodo.

191
00:15:02,385 --> 00:15:06,265
Ora, questo metodo prima chiama
il metodo OpenFileOutput

192
00:15:06,265 --> 00:15:10,068
che restituisce uno stream di output.

193
00:15:10,068 --> 00:15:15,332
Il codice prosegue, scrivendo tre
righe di testo

194
00:15:15,332 --> 00:15:20,169
neel file di testo, e infine 
chiude il file.

195
00:15:20,169 --> 00:15:23,235
Ora torniamo indietro fino 
al metodo onCreate.

196
00:15:23,235 --> 00:15:26,740
[BLANK_AUDIO]

197
00:15:26,740 --> 00:15:31,780
Qui il codice continua, 
chiamando il metodo readFile, 

198
00:15:31,780 --> 00:15:35,444
passando un linear layout
su cui visualizzare il testo.

199
00:15:35,444 --> 00:15:40,688
Il metodo readFile ora apre 
il file di testo per l'input,

200
00:15:40,688 --> 00:15:45,441
e poi inizia a leggere 
ogni riga del file.

201
00:15:45,441 --> 00:15:48,101
E ognuna di queste linee 
viene poi collocata 

202
00:15:48,101 --> 00:15:51,035
in una testviev e aggiunta
al  linear layout.

203
00:15:51,035 --> 00:15:51,333
[BLANK_AUDIO]
</pre>
